
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  itemId: 'itemId',
  quantity: 'quantity'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  fullName: 'fullName',
  studentId: 'studentId',
  university: 'university',
  faculty: 'faculty',
  major: 'major',
  phoneNumber: 'phoneNumber',
  profileImage: 'profileImage',
  isVerified: 'isVerified',
  verificationToken: 'verificationToken',
  resetPasswordToken: 'resetPasswordToken',
  reputation: 'reputation',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  price: 'price',
  category: 'category',
  condition: 'condition',
  conditionDetail: 'conditionDetail',
  isDonation: 'isDonation',
  isBundle: 'isBundle',
  bundleItems: 'bundleItems',
  location: 'location',
  isAvailable: 'isAvailable',
  viewCount: 'viewCount',
  favoriteCount: 'favoriteCount',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AcademicDataScalarFieldEnum = {
  id: 'id',
  courseCode: 'courseCode',
  courseName: 'courseName',
  lecturerName: 'lecturerName',
  faculty: 'faculty',
  semester: 'semester',
  credits: 'credits',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransaksiScalarFieldEnum = {
  id: 'id',
  pembeliId: 'pembeliId',
  penjualId: 'penjualId',
  itemId: 'itemId',
  jumlah: 'jumlah',
  status: 'status',
  metodeBayar: 'metodeBayar',
  statusBayar: 'statusBayar',
  lokasiCOD: 'lokasiCOD',
  catatan: 'catatan',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BarterRequestScalarFieldEnum = {
  id: 'id',
  requesterId: 'requesterId',
  itemOwnerId: 'itemOwnerId',
  requestedItemId: 'requestedItemId',
  offeredItemIds: 'offeredItemIds',
  message: 'message',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BarterNegotiationScalarFieldEnum = {
  id: 'id',
  barterRequestId: 'barterRequestId',
  senderId: 'senderId',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.WtbRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  maxPrice: 'maxPrice',
  category: 'category',
  preferredCondition: 'preferredCondition',
  location: 'location',
  urgency: 'urgency',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WtbResponseScalarFieldEnum = {
  id: 'id',
  wtbRequestId: 'wtbRequestId',
  responderId: 'responderId',
  message: 'message',
  offeredPrice: 'offeredPrice',
  itemImages: 'itemImages',
  contactInfo: 'contactInfo',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  itemId: 'itemId',
  createdAt: 'createdAt'
};

exports.Prisma.DiscussionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  academicDataId: 'academicDataId',
  title: 'title',
  content: 'content',
  category: 'category',
  tags: 'tags',
  isPinned: 'isPinned',
  isLocked: 'isLocked',
  viewCount: 'viewCount',
  replyCount: 'replyCount',
  lastReplyAt: 'lastReplyAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  discussionId: 'discussionId',
  userId: 'userId',
  parentId: 'parentId',
  content: 'content',
  isEdited: 'isEdited',
  editedAt: 'editedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  relatedId: 'relatedId',
  relatedType: 'relatedType',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  price: 'price',
  condition: 'condition',
  category: 'category',
  recordedAt: 'recordedAt'
};

exports.Prisma.ItemImageScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  imageUrl: 'imageUrl',
  isPrimary: 'isPrimary',
  caption: 'caption',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt'
};

exports.Prisma.CodLocationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  faculty: 'faculty',
  building: 'building',
  floor: 'floor',
  coordinates: 'coordinates',
  imageUrl: 'imageUrl',
  safetyRating: 'safetyRating',
  accessibilityRating: 'accessibilityRating',
  popularityCount: 'popularityCount',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeType: 'badgeType',
  title: 'title',
  description: 'description',
  iconUrl: 'iconUrl',
  earnedAt: 'earnedAt'
};

exports.Prisma.DonationRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  category: 'category',
  urgency: 'urgency',
  status: 'status',
  maxQuantity: 'maxQuantity',
  receivedCount: 'receivedCount',
  location: 'location',
  contactInfo: 'contactInfo',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DonationDistributionScalarFieldEnum = {
  id: 'id',
  donationRequestId: 'donationRequestId',
  donorId: 'donorId',
  recipientId: 'recipientId',
  itemTitle: 'itemTitle',
  itemDescription: 'itemDescription',
  quantity: 'quantity',
  status: 'status',
  distributedAt: 'distributedAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecommendationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  itemId: 'itemId',
  score: 'score',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.AcademicPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  academicDataId: 'academicDataId',
  priority: 'priority',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  username: 'username',
  password: 'password',
  fullName: 'fullName',
  studentId: 'studentId',
  university: 'university',
  faculty: 'faculty',
  major: 'major',
  phoneNumber: 'phoneNumber',
  profileImage: 'profileImage',
  verificationToken: 'verificationToken',
  resetPasswordToken: 'resetPasswordToken'
};

exports.Prisma.ItemOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  category: 'category',
  conditionDetail: 'conditionDetail',
  bundleItems: 'bundleItems',
  location: 'location'
};

exports.Prisma.AcademicDataOrderByRelevanceFieldEnum = {
  courseCode: 'courseCode',
  courseName: 'courseName',
  lecturerName: 'lecturerName',
  faculty: 'faculty',
  description: 'description'
};

exports.Prisma.TransaksiOrderByRelevanceFieldEnum = {
  metodeBayar: 'metodeBayar',
  lokasiCOD: 'lokasiCOD',
  catatan: 'catatan'
};

exports.Prisma.BarterRequestOrderByRelevanceFieldEnum = {
  offeredItemIds: 'offeredItemIds',
  message: 'message'
};

exports.Prisma.BarterNegotiationOrderByRelevanceFieldEnum = {
  message: 'message'
};

exports.Prisma.WtbRequestOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  category: 'category',
  preferredCondition: 'preferredCondition',
  location: 'location'
};

exports.Prisma.WtbResponseOrderByRelevanceFieldEnum = {
  message: 'message',
  itemImages: 'itemImages',
  contactInfo: 'contactInfo'
};

exports.Prisma.DiscussionOrderByRelevanceFieldEnum = {
  title: 'title',
  content: 'content',
  category: 'category',
  tags: 'tags'
};

exports.Prisma.CommentOrderByRelevanceFieldEnum = {
  content: 'content'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  title: 'title',
  message: 'message',
  relatedType: 'relatedType'
};

exports.Prisma.PriceHistoryOrderByRelevanceFieldEnum = {
  category: 'category'
};

exports.Prisma.ItemImageOrderByRelevanceFieldEnum = {
  imageUrl: 'imageUrl',
  caption: 'caption'
};

exports.Prisma.CodLocationOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  faculty: 'faculty',
  building: 'building',
  floor: 'floor',
  coordinates: 'coordinates',
  imageUrl: 'imageUrl'
};

exports.Prisma.UserBadgeOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  iconUrl: 'iconUrl'
};

exports.Prisma.DonationRequestOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  category: 'category',
  location: 'location',
  contactInfo: 'contactInfo'
};

exports.Prisma.DonationDistributionOrderByRelevanceFieldEnum = {
  itemTitle: 'itemTitle',
  itemDescription: 'itemDescription',
  notes: 'notes'
};
exports.ItemCondition = exports.$Enums.ItemCondition = {
  NEW: 'NEW',
  LIKE_NEW: 'LIKE_NEW',
  GOOD: 'GOOD',
  FAIR: 'FAIR',
  POOR: 'POOR'
};

exports.StatusTransaksi = exports.$Enums.StatusTransaksi = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  DISPUTED: 'DISPUTED'
};

exports.StatusPembayaran = exports.$Enums.StatusPembayaran = {
  UNPAID: 'UNPAID',
  CANCELLED: 'CANCELLED',
  DISPUTED: 'DISPUTED'
};

exports.BarterStatus = exports.$Enums.BarterStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED'
};

exports.WtbUrgency = exports.$Enums.WtbUrgency = {
  NORMAL: 'NORMAL',
  URGENT: 'URGENT'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  TRANSACTION: 'TRANSACTION',
  MESSAGE: 'MESSAGE',
  WARNING: 'WARNING'
};

exports.BadgeType = exports.$Enums.BadgeType = {
  TRUSTED: 'TRUSTED',
  FAST_RESPONDER: 'FAST_RESPONDER',
  VERIFIED: 'VERIFIED'
};

exports.DonationUrgency = exports.$Enums.DonationUrgency = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.DonationRequestStatus = exports.$Enums.DonationRequestStatus = {
  OPEN: 'OPEN',
  PARTIALLY_FULFILLED: 'PARTIALLY_FULFILLED',
  FULFILLED: 'FULFILLED',
  CLOSED: 'CLOSED',
  EXPIRED: 'EXPIRED'
};

exports.DistributionStatus = exports.$Enums.DistributionStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  DISTRIBUTED: 'DISTRIBUTED',
  CANCELLED: 'CANCELLED'
};

exports.RecommendationReason = exports.$Enums.RecommendationReason = {
  BASED_ON_WISHLIST: 'BASED_ON_WISHLIST',
  BASED_ON_CATEGORY: 'BASED_ON_CATEGORY',
  BASED_ON_PRICE_RANGE: 'BASED_ON_PRICE_RANGE',
  BASED_ON_LOCATION: 'BASED_ON_LOCATION',
  BASED_ON_ACADEMIC_INTEREST: 'BASED_ON_ACADEMIC_INTEREST',
  POPULAR_ITEM: 'POPULAR_ITEM'
};

exports.Prisma.ModelName = {
  Cart: 'Cart',
  User: 'User',
  Item: 'Item',
  AcademicData: 'AcademicData',
  Transaksi: 'Transaksi',
  BarterRequest: 'BarterRequest',
  BarterNegotiation: 'BarterNegotiation',
  WtbRequest: 'WtbRequest',
  WtbResponse: 'WtbResponse',
  Wishlist: 'Wishlist',
  Discussion: 'Discussion',
  Comment: 'Comment',
  Notification: 'Notification',
  PriceHistory: 'PriceHistory',
  ItemImage: 'ItemImage',
  CodLocation: 'CodLocation',
  UserBadge: 'UserBadge',
  DonationRequest: 'DonationRequest',
  DonationDistribution: 'DonationDistribution',
  Recommendation: 'Recommendation',
  AcademicPreference: 'AcademicPreference'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
