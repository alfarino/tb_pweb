
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Cart
 * 
 */
export type Cart = $Result.DefaultSelection<Prisma.$CartPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Item
 * 
 */
export type Item = $Result.DefaultSelection<Prisma.$ItemPayload>
/**
 * Model AcademicData
 * 
 */
export type AcademicData = $Result.DefaultSelection<Prisma.$AcademicDataPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model BarterRequest
 * 
 */
export type BarterRequest = $Result.DefaultSelection<Prisma.$BarterRequestPayload>
/**
 * Model BarterNegotiation
 * 
 */
export type BarterNegotiation = $Result.DefaultSelection<Prisma.$BarterNegotiationPayload>
/**
 * Model WtbRequest
 * 
 */
export type WtbRequest = $Result.DefaultSelection<Prisma.$WtbRequestPayload>
/**
 * Model WtbResponse
 * 
 */
export type WtbResponse = $Result.DefaultSelection<Prisma.$WtbResponsePayload>
/**
 * Model Wishlist
 * 
 */
export type Wishlist = $Result.DefaultSelection<Prisma.$WishlistPayload>
/**
 * Model Discussion
 * 
 */
export type Discussion = $Result.DefaultSelection<Prisma.$DiscussionPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model PriceHistory
 * 
 */
export type PriceHistory = $Result.DefaultSelection<Prisma.$PriceHistoryPayload>
/**
 * Model ItemImage
 * 
 */
export type ItemImage = $Result.DefaultSelection<Prisma.$ItemImagePayload>
/**
 * Model CodLocation
 * 
 */
export type CodLocation = $Result.DefaultSelection<Prisma.$CodLocationPayload>
/**
 * Model UserBadge
 * 
 */
export type UserBadge = $Result.DefaultSelection<Prisma.$UserBadgePayload>
/**
 * Model DonationRequest
 * 
 */
export type DonationRequest = $Result.DefaultSelection<Prisma.$DonationRequestPayload>
/**
 * Model DonationDistribution
 * 
 */
export type DonationDistribution = $Result.DefaultSelection<Prisma.$DonationDistributionPayload>
/**
 * Model Recommendation
 * 
 */
export type Recommendation = $Result.DefaultSelection<Prisma.$RecommendationPayload>
/**
 * Model AcademicPreference
 * 
 */
export type AcademicPreference = $Result.DefaultSelection<Prisma.$AcademicPreferencePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ItemCondition: {
  NEW: 'NEW',
  LIKE_NEW: 'LIKE_NEW',
  GOOD: 'GOOD',
  FAIR: 'FAIR',
  POOR: 'POOR'
};

export type ItemCondition = (typeof ItemCondition)[keyof typeof ItemCondition]


export const TransactionStatus: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  DISPUTED: 'DISPUTED'
};

export type TransactionStatus = (typeof TransactionStatus)[keyof typeof TransactionStatus]


export const PaymentStatus: {
  UNPAID: 'UNPAID',
  PAID: 'PAID',
  REFUNDED: 'REFUNDED',
  FAILED: 'FAILED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const BarterStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type BarterStatus = (typeof BarterStatus)[keyof typeof BarterStatus]


export const WtbUrgency: {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type WtbUrgency = (typeof WtbUrgency)[keyof typeof WtbUrgency]


export const NotificationType: {
  ITEM_SOLD: 'ITEM_SOLD',
  ITEM_LIKED: 'ITEM_LIKED',
  BARTER_REQUEST: 'BARTER_REQUEST',
  BARTER_ACCEPTED: 'BARTER_ACCEPTED',
  BARTER_REJECTED: 'BARTER_REJECTED',
  WTB_RESPONSE: 'WTB_RESPONSE',
  PRICE_ALERT: 'PRICE_ALERT',
  DISCUSSION_REPLY: 'DISCUSSION_REPLY',
  SYSTEM_ANNOUNCEMENT: 'SYSTEM_ANNOUNCEMENT',
  DONATION_REQUEST: 'DONATION_REQUEST',
  BADGE_EARNED: 'BADGE_EARNED',
  AN_ITEM_POST: 'AN_ITEM_POST'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const BadgeType: {
  VERIFIED_STUDENT: 'VERIFIED_STUDENT',
  TOP_SELLER: 'TOP_SELLER',
  HELPFUL_MEMBER: 'HELPFUL_MEMBER',
  ACTIVE_TRADER: 'ACTIVE_TRADER',
  GENEROUS_DONOR: 'GENEROUS_DONOR',
  DISCUSSION_LEADER: 'DISCUSSION_LEADER',
  EARLY_ADOPTER: 'EARLY_ADOPTER',
  TRUSTED_MEMBER: 'TRUSTED_MEMBER'
};

export type BadgeType = (typeof BadgeType)[keyof typeof BadgeType]


export const DonationUrgency: {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type DonationUrgency = (typeof DonationUrgency)[keyof typeof DonationUrgency]


export const DonationRequestStatus: {
  OPEN: 'OPEN',
  PARTIALLY_FULFILLED: 'PARTIALLY_FULFILLED',
  FULFILLED: 'FULFILLED',
  CLOSED: 'CLOSED',
  EXPIRED: 'EXPIRED'
};

export type DonationRequestStatus = (typeof DonationRequestStatus)[keyof typeof DonationRequestStatus]


export const DistributionStatus: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  DISTRIBUTED: 'DISTRIBUTED',
  CANCELLED: 'CANCELLED'
};

export type DistributionStatus = (typeof DistributionStatus)[keyof typeof DistributionStatus]


export const RecommendationReason: {
  BASED_ON_WISHLIST: 'BASED_ON_WISHLIST',
  BASED_ON_CATEGORY: 'BASED_ON_CATEGORY',
  BASED_ON_PRICE_RANGE: 'BASED_ON_PRICE_RANGE',
  BASED_ON_LOCATION: 'BASED_ON_LOCATION',
  BASED_ON_ACADEMIC_INTEREST: 'BASED_ON_ACADEMIC_INTEREST',
  POPULAR_ITEM: 'POPULAR_ITEM'
};

export type RecommendationReason = (typeof RecommendationReason)[keyof typeof RecommendationReason]

}

export type ItemCondition = $Enums.ItemCondition

export const ItemCondition: typeof $Enums.ItemCondition

export type TransactionStatus = $Enums.TransactionStatus

export const TransactionStatus: typeof $Enums.TransactionStatus

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type BarterStatus = $Enums.BarterStatus

export const BarterStatus: typeof $Enums.BarterStatus

export type WtbUrgency = $Enums.WtbUrgency

export const WtbUrgency: typeof $Enums.WtbUrgency

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type BadgeType = $Enums.BadgeType

export const BadgeType: typeof $Enums.BadgeType

export type DonationUrgency = $Enums.DonationUrgency

export const DonationUrgency: typeof $Enums.DonationUrgency

export type DonationRequestStatus = $Enums.DonationRequestStatus

export const DonationRequestStatus: typeof $Enums.DonationRequestStatus

export type DistributionStatus = $Enums.DistributionStatus

export const DistributionStatus: typeof $Enums.DistributionStatus

export type RecommendationReason = $Enums.RecommendationReason

export const RecommendationReason: typeof $Enums.RecommendationReason

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Carts
 * const carts = await prisma.cart.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Carts
   * const carts = await prisma.cart.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.cart`: Exposes CRUD operations for the **Cart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carts
    * const carts = await prisma.cart.findMany()
    * ```
    */
  get cart(): Prisma.CartDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.ItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.academicData`: Exposes CRUD operations for the **AcademicData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AcademicData
    * const academicData = await prisma.academicData.findMany()
    * ```
    */
  get academicData(): Prisma.AcademicDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.barterRequest`: Exposes CRUD operations for the **BarterRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BarterRequests
    * const barterRequests = await prisma.barterRequest.findMany()
    * ```
    */
  get barterRequest(): Prisma.BarterRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.barterNegotiation`: Exposes CRUD operations for the **BarterNegotiation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BarterNegotiations
    * const barterNegotiations = await prisma.barterNegotiation.findMany()
    * ```
    */
  get barterNegotiation(): Prisma.BarterNegotiationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wtbRequest`: Exposes CRUD operations for the **WtbRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WtbRequests
    * const wtbRequests = await prisma.wtbRequest.findMany()
    * ```
    */
  get wtbRequest(): Prisma.WtbRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wtbResponse`: Exposes CRUD operations for the **WtbResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WtbResponses
    * const wtbResponses = await prisma.wtbResponse.findMany()
    * ```
    */
  get wtbResponse(): Prisma.WtbResponseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wishlist`: Exposes CRUD operations for the **Wishlist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wishlists
    * const wishlists = await prisma.wishlist.findMany()
    * ```
    */
  get wishlist(): Prisma.WishlistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.discussion`: Exposes CRUD operations for the **Discussion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Discussions
    * const discussions = await prisma.discussion.findMany()
    * ```
    */
  get discussion(): Prisma.DiscussionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.priceHistory`: Exposes CRUD operations for the **PriceHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PriceHistories
    * const priceHistories = await prisma.priceHistory.findMany()
    * ```
    */
  get priceHistory(): Prisma.PriceHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.itemImage`: Exposes CRUD operations for the **ItemImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ItemImages
    * const itemImages = await prisma.itemImage.findMany()
    * ```
    */
  get itemImage(): Prisma.ItemImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.codLocation`: Exposes CRUD operations for the **CodLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CodLocations
    * const codLocations = await prisma.codLocation.findMany()
    * ```
    */
  get codLocation(): Prisma.CodLocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userBadge`: Exposes CRUD operations for the **UserBadge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBadges
    * const userBadges = await prisma.userBadge.findMany()
    * ```
    */
  get userBadge(): Prisma.UserBadgeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.donationRequest`: Exposes CRUD operations for the **DonationRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DonationRequests
    * const donationRequests = await prisma.donationRequest.findMany()
    * ```
    */
  get donationRequest(): Prisma.DonationRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.donationDistribution`: Exposes CRUD operations for the **DonationDistribution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DonationDistributions
    * const donationDistributions = await prisma.donationDistribution.findMany()
    * ```
    */
  get donationDistribution(): Prisma.DonationDistributionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recommendation`: Exposes CRUD operations for the **Recommendation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recommendations
    * const recommendations = await prisma.recommendation.findMany()
    * ```
    */
  get recommendation(): Prisma.RecommendationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.academicPreference`: Exposes CRUD operations for the **AcademicPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AcademicPreferences
    * const academicPreferences = await prisma.academicPreference.findMany()
    * ```
    */
  get academicPreference(): Prisma.AcademicPreferenceDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Cart: 'Cart',
    User: 'User',
    Item: 'Item',
    AcademicData: 'AcademicData',
    Transaction: 'Transaction',
    BarterRequest: 'BarterRequest',
    BarterNegotiation: 'BarterNegotiation',
    WtbRequest: 'WtbRequest',
    WtbResponse: 'WtbResponse',
    Wishlist: 'Wishlist',
    Discussion: 'Discussion',
    Comment: 'Comment',
    Notification: 'Notification',
    PriceHistory: 'PriceHistory',
    ItemImage: 'ItemImage',
    CodLocation: 'CodLocation',
    UserBadge: 'UserBadge',
    DonationRequest: 'DonationRequest',
    DonationDistribution: 'DonationDistribution',
    Recommendation: 'Recommendation',
    AcademicPreference: 'AcademicPreference'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "cart" | "user" | "item" | "academicData" | "transaction" | "barterRequest" | "barterNegotiation" | "wtbRequest" | "wtbResponse" | "wishlist" | "discussion" | "comment" | "notification" | "priceHistory" | "itemImage" | "codLocation" | "userBadge" | "donationRequest" | "donationDistribution" | "recommendation" | "academicPreference"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Cart: {
        payload: Prisma.$CartPayload<ExtArgs>
        fields: Prisma.CartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          findFirst: {
            args: Prisma.CartFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          findMany: {
            args: Prisma.CartFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>[]
          }
          create: {
            args: Prisma.CartCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          createMany: {
            args: Prisma.CartCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CartDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          update: {
            args: Prisma.CartUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          deleteMany: {
            args: Prisma.CartDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CartUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CartUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          aggregate: {
            args: Prisma.CartAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCart>
          }
          groupBy: {
            args: Prisma.CartGroupByArgs<ExtArgs>
            result: $Utils.Optional<CartGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartCountArgs<ExtArgs>
            result: $Utils.Optional<CartCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Item: {
        payload: Prisma.$ItemPayload<ExtArgs>
        fields: Prisma.ItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findFirst: {
            args: Prisma.ItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findMany: {
            args: Prisma.ItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          create: {
            args: Prisma.ItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          createMany: {
            args: Prisma.ItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          update: {
            args: Prisma.ItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          deleteMany: {
            args: Prisma.ItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          aggregate: {
            args: Prisma.ItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItem>
          }
          groupBy: {
            args: Prisma.ItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemCountArgs<ExtArgs>
            result: $Utils.Optional<ItemCountAggregateOutputType> | number
          }
        }
      }
      AcademicData: {
        payload: Prisma.$AcademicDataPayload<ExtArgs>
        fields: Prisma.AcademicDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AcademicDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AcademicDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicDataPayload>
          }
          findFirst: {
            args: Prisma.AcademicDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AcademicDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicDataPayload>
          }
          findMany: {
            args: Prisma.AcademicDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicDataPayload>[]
          }
          create: {
            args: Prisma.AcademicDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicDataPayload>
          }
          createMany: {
            args: Prisma.AcademicDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AcademicDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicDataPayload>
          }
          update: {
            args: Prisma.AcademicDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicDataPayload>
          }
          deleteMany: {
            args: Prisma.AcademicDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AcademicDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AcademicDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicDataPayload>
          }
          aggregate: {
            args: Prisma.AcademicDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAcademicData>
          }
          groupBy: {
            args: Prisma.AcademicDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<AcademicDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.AcademicDataCountArgs<ExtArgs>
            result: $Utils.Optional<AcademicDataCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      BarterRequest: {
        payload: Prisma.$BarterRequestPayload<ExtArgs>
        fields: Prisma.BarterRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BarterRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BarterRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterRequestPayload>
          }
          findFirst: {
            args: Prisma.BarterRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BarterRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterRequestPayload>
          }
          findMany: {
            args: Prisma.BarterRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterRequestPayload>[]
          }
          create: {
            args: Prisma.BarterRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterRequestPayload>
          }
          createMany: {
            args: Prisma.BarterRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BarterRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterRequestPayload>
          }
          update: {
            args: Prisma.BarterRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterRequestPayload>
          }
          deleteMany: {
            args: Prisma.BarterRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BarterRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BarterRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterRequestPayload>
          }
          aggregate: {
            args: Prisma.BarterRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBarterRequest>
          }
          groupBy: {
            args: Prisma.BarterRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<BarterRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.BarterRequestCountArgs<ExtArgs>
            result: $Utils.Optional<BarterRequestCountAggregateOutputType> | number
          }
        }
      }
      BarterNegotiation: {
        payload: Prisma.$BarterNegotiationPayload<ExtArgs>
        fields: Prisma.BarterNegotiationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BarterNegotiationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterNegotiationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BarterNegotiationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterNegotiationPayload>
          }
          findFirst: {
            args: Prisma.BarterNegotiationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterNegotiationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BarterNegotiationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterNegotiationPayload>
          }
          findMany: {
            args: Prisma.BarterNegotiationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterNegotiationPayload>[]
          }
          create: {
            args: Prisma.BarterNegotiationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterNegotiationPayload>
          }
          createMany: {
            args: Prisma.BarterNegotiationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BarterNegotiationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterNegotiationPayload>
          }
          update: {
            args: Prisma.BarterNegotiationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterNegotiationPayload>
          }
          deleteMany: {
            args: Prisma.BarterNegotiationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BarterNegotiationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BarterNegotiationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BarterNegotiationPayload>
          }
          aggregate: {
            args: Prisma.BarterNegotiationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBarterNegotiation>
          }
          groupBy: {
            args: Prisma.BarterNegotiationGroupByArgs<ExtArgs>
            result: $Utils.Optional<BarterNegotiationGroupByOutputType>[]
          }
          count: {
            args: Prisma.BarterNegotiationCountArgs<ExtArgs>
            result: $Utils.Optional<BarterNegotiationCountAggregateOutputType> | number
          }
        }
      }
      WtbRequest: {
        payload: Prisma.$WtbRequestPayload<ExtArgs>
        fields: Prisma.WtbRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WtbRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WtbRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbRequestPayload>
          }
          findFirst: {
            args: Prisma.WtbRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WtbRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbRequestPayload>
          }
          findMany: {
            args: Prisma.WtbRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbRequestPayload>[]
          }
          create: {
            args: Prisma.WtbRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbRequestPayload>
          }
          createMany: {
            args: Prisma.WtbRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.WtbRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbRequestPayload>
          }
          update: {
            args: Prisma.WtbRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbRequestPayload>
          }
          deleteMany: {
            args: Prisma.WtbRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WtbRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WtbRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbRequestPayload>
          }
          aggregate: {
            args: Prisma.WtbRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWtbRequest>
          }
          groupBy: {
            args: Prisma.WtbRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<WtbRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.WtbRequestCountArgs<ExtArgs>
            result: $Utils.Optional<WtbRequestCountAggregateOutputType> | number
          }
        }
      }
      WtbResponse: {
        payload: Prisma.$WtbResponsePayload<ExtArgs>
        fields: Prisma.WtbResponseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WtbResponseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WtbResponseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbResponsePayload>
          }
          findFirst: {
            args: Prisma.WtbResponseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WtbResponseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbResponsePayload>
          }
          findMany: {
            args: Prisma.WtbResponseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbResponsePayload>[]
          }
          create: {
            args: Prisma.WtbResponseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbResponsePayload>
          }
          createMany: {
            args: Prisma.WtbResponseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.WtbResponseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbResponsePayload>
          }
          update: {
            args: Prisma.WtbResponseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbResponsePayload>
          }
          deleteMany: {
            args: Prisma.WtbResponseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WtbResponseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WtbResponseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WtbResponsePayload>
          }
          aggregate: {
            args: Prisma.WtbResponseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWtbResponse>
          }
          groupBy: {
            args: Prisma.WtbResponseGroupByArgs<ExtArgs>
            result: $Utils.Optional<WtbResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.WtbResponseCountArgs<ExtArgs>
            result: $Utils.Optional<WtbResponseCountAggregateOutputType> | number
          }
        }
      }
      Wishlist: {
        payload: Prisma.$WishlistPayload<ExtArgs>
        fields: Prisma.WishlistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WishlistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WishlistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          findFirst: {
            args: Prisma.WishlistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WishlistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          findMany: {
            args: Prisma.WishlistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>[]
          }
          create: {
            args: Prisma.WishlistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          createMany: {
            args: Prisma.WishlistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.WishlistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          update: {
            args: Prisma.WishlistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          deleteMany: {
            args: Prisma.WishlistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WishlistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WishlistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          aggregate: {
            args: Prisma.WishlistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWishlist>
          }
          groupBy: {
            args: Prisma.WishlistGroupByArgs<ExtArgs>
            result: $Utils.Optional<WishlistGroupByOutputType>[]
          }
          count: {
            args: Prisma.WishlistCountArgs<ExtArgs>
            result: $Utils.Optional<WishlistCountAggregateOutputType> | number
          }
        }
      }
      Discussion: {
        payload: Prisma.$DiscussionPayload<ExtArgs>
        fields: Prisma.DiscussionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiscussionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiscussionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload>
          }
          findFirst: {
            args: Prisma.DiscussionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiscussionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload>
          }
          findMany: {
            args: Prisma.DiscussionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload>[]
          }
          create: {
            args: Prisma.DiscussionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload>
          }
          createMany: {
            args: Prisma.DiscussionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DiscussionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload>
          }
          update: {
            args: Prisma.DiscussionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload>
          }
          deleteMany: {
            args: Prisma.DiscussionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiscussionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DiscussionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionPayload>
          }
          aggregate: {
            args: Prisma.DiscussionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscussion>
          }
          groupBy: {
            args: Prisma.DiscussionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiscussionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiscussionCountArgs<ExtArgs>
            result: $Utils.Optional<DiscussionCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      PriceHistory: {
        payload: Prisma.$PriceHistoryPayload<ExtArgs>
        fields: Prisma.PriceHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PriceHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PriceHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          findFirst: {
            args: Prisma.PriceHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PriceHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          findMany: {
            args: Prisma.PriceHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>[]
          }
          create: {
            args: Prisma.PriceHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          createMany: {
            args: Prisma.PriceHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PriceHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          update: {
            args: Prisma.PriceHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          deleteMany: {
            args: Prisma.PriceHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PriceHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PriceHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          aggregate: {
            args: Prisma.PriceHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePriceHistory>
          }
          groupBy: {
            args: Prisma.PriceHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PriceHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PriceHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<PriceHistoryCountAggregateOutputType> | number
          }
        }
      }
      ItemImage: {
        payload: Prisma.$ItemImagePayload<ExtArgs>
        fields: Prisma.ItemImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemImagePayload>
          }
          findFirst: {
            args: Prisma.ItemImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemImagePayload>
          }
          findMany: {
            args: Prisma.ItemImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemImagePayload>[]
          }
          create: {
            args: Prisma.ItemImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemImagePayload>
          }
          createMany: {
            args: Prisma.ItemImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ItemImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemImagePayload>
          }
          update: {
            args: Prisma.ItemImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemImagePayload>
          }
          deleteMany: {
            args: Prisma.ItemImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ItemImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemImagePayload>
          }
          aggregate: {
            args: Prisma.ItemImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItemImage>
          }
          groupBy: {
            args: Prisma.ItemImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemImageCountArgs<ExtArgs>
            result: $Utils.Optional<ItemImageCountAggregateOutputType> | number
          }
        }
      }
      CodLocation: {
        payload: Prisma.$CodLocationPayload<ExtArgs>
        fields: Prisma.CodLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CodLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CodLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodLocationPayload>
          }
          findFirst: {
            args: Prisma.CodLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CodLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodLocationPayload>
          }
          findMany: {
            args: Prisma.CodLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodLocationPayload>[]
          }
          create: {
            args: Prisma.CodLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodLocationPayload>
          }
          createMany: {
            args: Prisma.CodLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CodLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodLocationPayload>
          }
          update: {
            args: Prisma.CodLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodLocationPayload>
          }
          deleteMany: {
            args: Prisma.CodLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CodLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CodLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodLocationPayload>
          }
          aggregate: {
            args: Prisma.CodLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCodLocation>
          }
          groupBy: {
            args: Prisma.CodLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<CodLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.CodLocationCountArgs<ExtArgs>
            result: $Utils.Optional<CodLocationCountAggregateOutputType> | number
          }
        }
      }
      UserBadge: {
        payload: Prisma.$UserBadgePayload<ExtArgs>
        fields: Prisma.UserBadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserBadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserBadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findFirst: {
            args: Prisma.UserBadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserBadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findMany: {
            args: Prisma.UserBadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          create: {
            args: Prisma.UserBadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          createMany: {
            args: Prisma.UserBadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserBadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          update: {
            args: Prisma.UserBadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          deleteMany: {
            args: Prisma.UserBadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserBadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserBadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          aggregate: {
            args: Prisma.UserBadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserBadge>
          }
          groupBy: {
            args: Prisma.UserBadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserBadgeCountArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeCountAggregateOutputType> | number
          }
        }
      }
      DonationRequest: {
        payload: Prisma.$DonationRequestPayload<ExtArgs>
        fields: Prisma.DonationRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DonationRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DonationRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationRequestPayload>
          }
          findFirst: {
            args: Prisma.DonationRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DonationRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationRequestPayload>
          }
          findMany: {
            args: Prisma.DonationRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationRequestPayload>[]
          }
          create: {
            args: Prisma.DonationRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationRequestPayload>
          }
          createMany: {
            args: Prisma.DonationRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DonationRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationRequestPayload>
          }
          update: {
            args: Prisma.DonationRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationRequestPayload>
          }
          deleteMany: {
            args: Prisma.DonationRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DonationRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DonationRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationRequestPayload>
          }
          aggregate: {
            args: Prisma.DonationRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDonationRequest>
          }
          groupBy: {
            args: Prisma.DonationRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<DonationRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.DonationRequestCountArgs<ExtArgs>
            result: $Utils.Optional<DonationRequestCountAggregateOutputType> | number
          }
        }
      }
      DonationDistribution: {
        payload: Prisma.$DonationDistributionPayload<ExtArgs>
        fields: Prisma.DonationDistributionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DonationDistributionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationDistributionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DonationDistributionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationDistributionPayload>
          }
          findFirst: {
            args: Prisma.DonationDistributionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationDistributionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DonationDistributionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationDistributionPayload>
          }
          findMany: {
            args: Prisma.DonationDistributionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationDistributionPayload>[]
          }
          create: {
            args: Prisma.DonationDistributionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationDistributionPayload>
          }
          createMany: {
            args: Prisma.DonationDistributionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DonationDistributionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationDistributionPayload>
          }
          update: {
            args: Prisma.DonationDistributionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationDistributionPayload>
          }
          deleteMany: {
            args: Prisma.DonationDistributionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DonationDistributionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DonationDistributionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationDistributionPayload>
          }
          aggregate: {
            args: Prisma.DonationDistributionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDonationDistribution>
          }
          groupBy: {
            args: Prisma.DonationDistributionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DonationDistributionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DonationDistributionCountArgs<ExtArgs>
            result: $Utils.Optional<DonationDistributionCountAggregateOutputType> | number
          }
        }
      }
      Recommendation: {
        payload: Prisma.$RecommendationPayload<ExtArgs>
        fields: Prisma.RecommendationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecommendationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecommendationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          findFirst: {
            args: Prisma.RecommendationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecommendationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          findMany: {
            args: Prisma.RecommendationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>[]
          }
          create: {
            args: Prisma.RecommendationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          createMany: {
            args: Prisma.RecommendationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RecommendationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          update: {
            args: Prisma.RecommendationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          deleteMany: {
            args: Prisma.RecommendationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecommendationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecommendationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          aggregate: {
            args: Prisma.RecommendationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecommendation>
          }
          groupBy: {
            args: Prisma.RecommendationGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecommendationGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecommendationCountArgs<ExtArgs>
            result: $Utils.Optional<RecommendationCountAggregateOutputType> | number
          }
        }
      }
      AcademicPreference: {
        payload: Prisma.$AcademicPreferencePayload<ExtArgs>
        fields: Prisma.AcademicPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AcademicPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AcademicPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicPreferencePayload>
          }
          findFirst: {
            args: Prisma.AcademicPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AcademicPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicPreferencePayload>
          }
          findMany: {
            args: Prisma.AcademicPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicPreferencePayload>[]
          }
          create: {
            args: Prisma.AcademicPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicPreferencePayload>
          }
          createMany: {
            args: Prisma.AcademicPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AcademicPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicPreferencePayload>
          }
          update: {
            args: Prisma.AcademicPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicPreferencePayload>
          }
          deleteMany: {
            args: Prisma.AcademicPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AcademicPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AcademicPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicPreferencePayload>
          }
          aggregate: {
            args: Prisma.AcademicPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAcademicPreference>
          }
          groupBy: {
            args: Prisma.AcademicPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AcademicPreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AcademicPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<AcademicPreferenceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    cart?: CartOmit
    user?: UserOmit
    item?: ItemOmit
    academicData?: AcademicDataOmit
    transaction?: TransactionOmit
    barterRequest?: BarterRequestOmit
    barterNegotiation?: BarterNegotiationOmit
    wtbRequest?: WtbRequestOmit
    wtbResponse?: WtbResponseOmit
    wishlist?: WishlistOmit
    discussion?: DiscussionOmit
    comment?: CommentOmit
    notification?: NotificationOmit
    priceHistory?: PriceHistoryOmit
    itemImage?: ItemImageOmit
    codLocation?: CodLocationOmit
    userBadge?: UserBadgeOmit
    donationRequest?: DonationRequestOmit
    donationDistribution?: DonationDistributionOmit
    recommendation?: RecommendationOmit
    academicPreference?: AcademicPreferenceOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    items: number
    barterRequests: number
    barterNegotiations: number
    wishlists: number
    wtbRequests: number
    wtbResponses: number
    buyerTransactions: number
    sellerTransactions: number
    discussions: number
    comments: number
    notifications: number
    userBadges: number
    donationRequests: number
    donationDistributions: number
    recommendations: number
    academicPreferences: number
    carts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | UserCountOutputTypeCountItemsArgs
    barterRequests?: boolean | UserCountOutputTypeCountBarterRequestsArgs
    barterNegotiations?: boolean | UserCountOutputTypeCountBarterNegotiationsArgs
    wishlists?: boolean | UserCountOutputTypeCountWishlistsArgs
    wtbRequests?: boolean | UserCountOutputTypeCountWtbRequestsArgs
    wtbResponses?: boolean | UserCountOutputTypeCountWtbResponsesArgs
    buyerTransactions?: boolean | UserCountOutputTypeCountBuyerTransactionsArgs
    sellerTransactions?: boolean | UserCountOutputTypeCountSellerTransactionsArgs
    discussions?: boolean | UserCountOutputTypeCountDiscussionsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    userBadges?: boolean | UserCountOutputTypeCountUserBadgesArgs
    donationRequests?: boolean | UserCountOutputTypeCountDonationRequestsArgs
    donationDistributions?: boolean | UserCountOutputTypeCountDonationDistributionsArgs
    recommendations?: boolean | UserCountOutputTypeCountRecommendationsArgs
    academicPreferences?: boolean | UserCountOutputTypeCountAcademicPreferencesArgs
    carts?: boolean | UserCountOutputTypeCountCartsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBarterRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BarterRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBarterNegotiationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BarterNegotiationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WishlistWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWtbRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WtbRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWtbResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WtbResponseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBuyerTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSellerTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDiscussionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDonationRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DonationRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDonationDistributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DonationDistributionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRecommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAcademicPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicPreferenceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartWhereInput
  }


  /**
   * Count Type ItemCountOutputType
   */

  export type ItemCountOutputType = {
    itemImages: number
    barterRequests: number
    wishlists: number
    transactions: number
    priceHistories: number
    recommendations: number
    carts: number
  }

  export type ItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    itemImages?: boolean | ItemCountOutputTypeCountItemImagesArgs
    barterRequests?: boolean | ItemCountOutputTypeCountBarterRequestsArgs
    wishlists?: boolean | ItemCountOutputTypeCountWishlistsArgs
    transactions?: boolean | ItemCountOutputTypeCountTransactionsArgs
    priceHistories?: boolean | ItemCountOutputTypeCountPriceHistoriesArgs
    recommendations?: boolean | ItemCountOutputTypeCountRecommendationsArgs
    carts?: boolean | ItemCountOutputTypeCountCartsArgs
  }

  // Custom InputTypes
  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemCountOutputType
     */
    select?: ItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountItemImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemImageWhereInput
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountBarterRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BarterRequestWhereInput
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountWishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WishlistWhereInput
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountPriceHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceHistoryWhereInput
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountRecommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationWhereInput
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountCartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartWhereInput
  }


  /**
   * Count Type AcademicDataCountOutputType
   */

  export type AcademicDataCountOutputType = {
    discussions: number
    academicPreferences: number
  }

  export type AcademicDataCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discussions?: boolean | AcademicDataCountOutputTypeCountDiscussionsArgs
    academicPreferences?: boolean | AcademicDataCountOutputTypeCountAcademicPreferencesArgs
  }

  // Custom InputTypes
  /**
   * AcademicDataCountOutputType without action
   */
  export type AcademicDataCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicDataCountOutputType
     */
    select?: AcademicDataCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AcademicDataCountOutputType without action
   */
  export type AcademicDataCountOutputTypeCountDiscussionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionWhereInput
  }

  /**
   * AcademicDataCountOutputType without action
   */
  export type AcademicDataCountOutputTypeCountAcademicPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicPreferenceWhereInput
  }


  /**
   * Count Type BarterRequestCountOutputType
   */

  export type BarterRequestCountOutputType = {
    barterNegotiations: number
  }

  export type BarterRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    barterNegotiations?: boolean | BarterRequestCountOutputTypeCountBarterNegotiationsArgs
  }

  // Custom InputTypes
  /**
   * BarterRequestCountOutputType without action
   */
  export type BarterRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterRequestCountOutputType
     */
    select?: BarterRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BarterRequestCountOutputType without action
   */
  export type BarterRequestCountOutputTypeCountBarterNegotiationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BarterNegotiationWhereInput
  }


  /**
   * Count Type WtbRequestCountOutputType
   */

  export type WtbRequestCountOutputType = {
    wtbResponses: number
  }

  export type WtbRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wtbResponses?: boolean | WtbRequestCountOutputTypeCountWtbResponsesArgs
  }

  // Custom InputTypes
  /**
   * WtbRequestCountOutputType without action
   */
  export type WtbRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbRequestCountOutputType
     */
    select?: WtbRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WtbRequestCountOutputType without action
   */
  export type WtbRequestCountOutputTypeCountWtbResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WtbResponseWhereInput
  }


  /**
   * Count Type DiscussionCountOutputType
   */

  export type DiscussionCountOutputType = {
    comments: number
  }

  export type DiscussionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | DiscussionCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * DiscussionCountOutputType without action
   */
  export type DiscussionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionCountOutputType
     */
    select?: DiscussionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DiscussionCountOutputType without action
   */
  export type DiscussionCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    replies: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | CommentCountOutputTypeCountRepliesArgs
  }

  // Custom InputTypes
  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type DonationRequestCountOutputType
   */

  export type DonationRequestCountOutputType = {
    donationDistributions: number
  }

  export type DonationRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    donationDistributions?: boolean | DonationRequestCountOutputTypeCountDonationDistributionsArgs
  }

  // Custom InputTypes
  /**
   * DonationRequestCountOutputType without action
   */
  export type DonationRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationRequestCountOutputType
     */
    select?: DonationRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DonationRequestCountOutputType without action
   */
  export type DonationRequestCountOutputTypeCountDonationDistributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DonationDistributionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Cart
   */

  export type AggregateCart = {
    _count: CartCountAggregateOutputType | null
    _avg: CartAvgAggregateOutputType | null
    _sum: CartSumAggregateOutputType | null
    _min: CartMinAggregateOutputType | null
    _max: CartMaxAggregateOutputType | null
  }

  export type CartAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
    quantity: number | null
  }

  export type CartSumAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
    quantity: number | null
  }

  export type CartMinAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
    quantity: number | null
  }

  export type CartMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
    quantity: number | null
  }

  export type CartCountAggregateOutputType = {
    id: number
    userId: number
    itemId: number
    quantity: number
    _all: number
  }


  export type CartAvgAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    quantity?: true
  }

  export type CartSumAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    quantity?: true
  }

  export type CartMinAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    quantity?: true
  }

  export type CartMaxAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    quantity?: true
  }

  export type CartCountAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    quantity?: true
    _all?: true
  }

  export type CartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cart to aggregate.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carts
    **/
    _count?: true | CartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartMaxAggregateInputType
  }

  export type GetCartAggregateType<T extends CartAggregateArgs> = {
        [P in keyof T & keyof AggregateCart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCart[P]>
      : GetScalarType<T[P], AggregateCart[P]>
  }




  export type CartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartWhereInput
    orderBy?: CartOrderByWithAggregationInput | CartOrderByWithAggregationInput[]
    by: CartScalarFieldEnum[] | CartScalarFieldEnum
    having?: CartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartCountAggregateInputType | true
    _avg?: CartAvgAggregateInputType
    _sum?: CartSumAggregateInputType
    _min?: CartMinAggregateInputType
    _max?: CartMaxAggregateInputType
  }

  export type CartGroupByOutputType = {
    id: number
    userId: number
    itemId: number
    quantity: number
    _count: CartCountAggregateOutputType | null
    _avg: CartAvgAggregateOutputType | null
    _sum: CartSumAggregateOutputType | null
    _min: CartMinAggregateOutputType | null
    _max: CartMaxAggregateOutputType | null
  }

  type GetCartGroupByPayload<T extends CartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartGroupByOutputType[P]>
            : GetScalarType<T[P], CartGroupByOutputType[P]>
        }
      >
    >


  export type CartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    itemId?: boolean
    quantity?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cart"]>



  export type CartSelectScalar = {
    id?: boolean
    userId?: boolean
    itemId?: boolean
    quantity?: boolean
  }

  export type CartOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "itemId" | "quantity", ExtArgs["result"]["cart"]>
  export type CartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
  }

  export type $CartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cart"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      item: Prisma.$ItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      itemId: number
      quantity: number
    }, ExtArgs["result"]["cart"]>
    composites: {}
  }

  type CartGetPayload<S extends boolean | null | undefined | CartDefaultArgs> = $Result.GetResult<Prisma.$CartPayload, S>

  type CartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CartFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CartCountAggregateInputType | true
    }

  export interface CartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cart'], meta: { name: 'Cart' } }
    /**
     * Find zero or one Cart that matches the filter.
     * @param {CartFindUniqueArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CartFindUniqueArgs>(args: SelectSubset<T, CartFindUniqueArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cart that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CartFindUniqueOrThrowArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CartFindUniqueOrThrowArgs>(args: SelectSubset<T, CartFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindFirstArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CartFindFirstArgs>(args?: SelectSubset<T, CartFindFirstArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cart that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindFirstOrThrowArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CartFindFirstOrThrowArgs>(args?: SelectSubset<T, CartFindFirstOrThrowArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Carts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carts
     * const carts = await prisma.cart.findMany()
     * 
     * // Get first 10 Carts
     * const carts = await prisma.cart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartWithIdOnly = await prisma.cart.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CartFindManyArgs>(args?: SelectSubset<T, CartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cart.
     * @param {CartCreateArgs} args - Arguments to create a Cart.
     * @example
     * // Create one Cart
     * const Cart = await prisma.cart.create({
     *   data: {
     *     // ... data to create a Cart
     *   }
     * })
     * 
     */
    create<T extends CartCreateArgs>(args: SelectSubset<T, CartCreateArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Carts.
     * @param {CartCreateManyArgs} args - Arguments to create many Carts.
     * @example
     * // Create many Carts
     * const cart = await prisma.cart.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CartCreateManyArgs>(args?: SelectSubset<T, CartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cart.
     * @param {CartDeleteArgs} args - Arguments to delete one Cart.
     * @example
     * // Delete one Cart
     * const Cart = await prisma.cart.delete({
     *   where: {
     *     // ... filter to delete one Cart
     *   }
     * })
     * 
     */
    delete<T extends CartDeleteArgs>(args: SelectSubset<T, CartDeleteArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cart.
     * @param {CartUpdateArgs} args - Arguments to update one Cart.
     * @example
     * // Update one Cart
     * const cart = await prisma.cart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CartUpdateArgs>(args: SelectSubset<T, CartUpdateArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Carts.
     * @param {CartDeleteManyArgs} args - Arguments to filter Carts to delete.
     * @example
     * // Delete a few Carts
     * const { count } = await prisma.cart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CartDeleteManyArgs>(args?: SelectSubset<T, CartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carts
     * const cart = await prisma.cart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CartUpdateManyArgs>(args: SelectSubset<T, CartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cart.
     * @param {CartUpsertArgs} args - Arguments to update or create a Cart.
     * @example
     * // Update or create a Cart
     * const cart = await prisma.cart.upsert({
     *   create: {
     *     // ... data to create a Cart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cart we want to update
     *   }
     * })
     */
    upsert<T extends CartUpsertArgs>(args: SelectSubset<T, CartUpsertArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartCountArgs} args - Arguments to filter Carts to count.
     * @example
     * // Count the number of Carts
     * const count = await prisma.cart.count({
     *   where: {
     *     // ... the filter for the Carts we want to count
     *   }
     * })
    **/
    count<T extends CartCountArgs>(
      args?: Subset<T, CartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartAggregateArgs>(args: Subset<T, CartAggregateArgs>): Prisma.PrismaPromise<GetCartAggregateType<T>>

    /**
     * Group by Cart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartGroupByArgs['orderBy'] }
        : { orderBy?: CartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cart model
   */
  readonly fields: CartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    item<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cart model
   */
  interface CartFieldRefs {
    readonly id: FieldRef<"Cart", 'Int'>
    readonly userId: FieldRef<"Cart", 'Int'>
    readonly itemId: FieldRef<"Cart", 'Int'>
    readonly quantity: FieldRef<"Cart", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Cart findUnique
   */
  export type CartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where: CartWhereUniqueInput
  }

  /**
   * Cart findUniqueOrThrow
   */
  export type CartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where: CartWhereUniqueInput
  }

  /**
   * Cart findFirst
   */
  export type CartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carts.
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carts.
     */
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }

  /**
   * Cart findFirstOrThrow
   */
  export type CartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carts.
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carts.
     */
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }

  /**
   * Cart findMany
   */
  export type CartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Carts to fetch.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carts.
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }

  /**
   * Cart create
   */
  export type CartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * The data needed to create a Cart.
     */
    data: XOR<CartCreateInput, CartUncheckedCreateInput>
  }

  /**
   * Cart createMany
   */
  export type CartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Carts.
     */
    data: CartCreateManyInput | CartCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cart update
   */
  export type CartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * The data needed to update a Cart.
     */
    data: XOR<CartUpdateInput, CartUncheckedUpdateInput>
    /**
     * Choose, which Cart to update.
     */
    where: CartWhereUniqueInput
  }

  /**
   * Cart updateMany
   */
  export type CartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Carts.
     */
    data: XOR<CartUpdateManyMutationInput, CartUncheckedUpdateManyInput>
    /**
     * Filter which Carts to update
     */
    where?: CartWhereInput
    /**
     * Limit how many Carts to update.
     */
    limit?: number
  }

  /**
   * Cart upsert
   */
  export type CartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * The filter to search for the Cart to update in case it exists.
     */
    where: CartWhereUniqueInput
    /**
     * In case the Cart found by the `where` argument doesn't exist, create a new Cart with this data.
     */
    create: XOR<CartCreateInput, CartUncheckedCreateInput>
    /**
     * In case the Cart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartUpdateInput, CartUncheckedUpdateInput>
  }

  /**
   * Cart delete
   */
  export type CartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter which Cart to delete.
     */
    where: CartWhereUniqueInput
  }

  /**
   * Cart deleteMany
   */
  export type CartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carts to delete
     */
    where?: CartWhereInput
    /**
     * Limit how many Carts to delete.
     */
    limit?: number
  }

  /**
   * Cart without action
   */
  export type CartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    reputation: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    reputation: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    username: string | null
    password: string | null
    fullName: string | null
    studentId: string | null
    university: string | null
    faculty: string | null
    major: string | null
    phoneNumber: string | null
    profileImage: string | null
    isVerified: boolean | null
    verificationToken: string | null
    resetPasswordToken: string | null
    reputation: number | null
    isActive: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    username: string | null
    password: string | null
    fullName: string | null
    studentId: string | null
    university: string | null
    faculty: string | null
    major: string | null
    phoneNumber: string | null
    profileImage: string | null
    isVerified: boolean | null
    verificationToken: string | null
    resetPasswordToken: string | null
    reputation: number | null
    isActive: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password: number
    fullName: number
    studentId: number
    university: number
    faculty: number
    major: number
    phoneNumber: number
    profileImage: number
    isVerified: number
    verificationToken: number
    resetPasswordToken: number
    reputation: number
    isActive: number
    lastLoginAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    reputation?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    reputation?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    fullName?: true
    studentId?: true
    university?: true
    faculty?: true
    major?: true
    phoneNumber?: true
    profileImage?: true
    isVerified?: true
    verificationToken?: true
    resetPasswordToken?: true
    reputation?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    fullName?: true
    studentId?: true
    university?: true
    faculty?: true
    major?: true
    phoneNumber?: true
    profileImage?: true
    isVerified?: true
    verificationToken?: true
    resetPasswordToken?: true
    reputation?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    fullName?: true
    studentId?: true
    university?: true
    faculty?: true
    major?: true
    phoneNumber?: true
    profileImage?: true
    isVerified?: true
    verificationToken?: true
    resetPasswordToken?: true
    reputation?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    username: string
    password: string
    fullName: string
    studentId: string | null
    university: string | null
    faculty: string | null
    major: string | null
    phoneNumber: string | null
    profileImage: string | null
    isVerified: boolean
    verificationToken: string | null
    resetPasswordToken: string | null
    reputation: number
    isActive: boolean
    lastLoginAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    fullName?: boolean
    studentId?: boolean
    university?: boolean
    faculty?: boolean
    major?: boolean
    phoneNumber?: boolean
    profileImage?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    resetPasswordToken?: boolean
    reputation?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    items?: boolean | User$itemsArgs<ExtArgs>
    barterRequests?: boolean | User$barterRequestsArgs<ExtArgs>
    barterNegotiations?: boolean | User$barterNegotiationsArgs<ExtArgs>
    wishlists?: boolean | User$wishlistsArgs<ExtArgs>
    wtbRequests?: boolean | User$wtbRequestsArgs<ExtArgs>
    wtbResponses?: boolean | User$wtbResponsesArgs<ExtArgs>
    buyerTransactions?: boolean | User$buyerTransactionsArgs<ExtArgs>
    sellerTransactions?: boolean | User$sellerTransactionsArgs<ExtArgs>
    discussions?: boolean | User$discussionsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    userBadges?: boolean | User$userBadgesArgs<ExtArgs>
    donationRequests?: boolean | User$donationRequestsArgs<ExtArgs>
    donationDistributions?: boolean | User$donationDistributionsArgs<ExtArgs>
    recommendations?: boolean | User$recommendationsArgs<ExtArgs>
    academicPreferences?: boolean | User$academicPreferencesArgs<ExtArgs>
    carts?: boolean | User$cartsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    fullName?: boolean
    studentId?: boolean
    university?: boolean
    faculty?: boolean
    major?: boolean
    phoneNumber?: boolean
    profileImage?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    resetPasswordToken?: boolean
    reputation?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "username" | "password" | "fullName" | "studentId" | "university" | "faculty" | "major" | "phoneNumber" | "profileImage" | "isVerified" | "verificationToken" | "resetPasswordToken" | "reputation" | "isActive" | "lastLoginAt" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | User$itemsArgs<ExtArgs>
    barterRequests?: boolean | User$barterRequestsArgs<ExtArgs>
    barterNegotiations?: boolean | User$barterNegotiationsArgs<ExtArgs>
    wishlists?: boolean | User$wishlistsArgs<ExtArgs>
    wtbRequests?: boolean | User$wtbRequestsArgs<ExtArgs>
    wtbResponses?: boolean | User$wtbResponsesArgs<ExtArgs>
    buyerTransactions?: boolean | User$buyerTransactionsArgs<ExtArgs>
    sellerTransactions?: boolean | User$sellerTransactionsArgs<ExtArgs>
    discussions?: boolean | User$discussionsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    userBadges?: boolean | User$userBadgesArgs<ExtArgs>
    donationRequests?: boolean | User$donationRequestsArgs<ExtArgs>
    donationDistributions?: boolean | User$donationDistributionsArgs<ExtArgs>
    recommendations?: boolean | User$recommendationsArgs<ExtArgs>
    academicPreferences?: boolean | User$academicPreferencesArgs<ExtArgs>
    carts?: boolean | User$cartsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      items: Prisma.$ItemPayload<ExtArgs>[]
      barterRequests: Prisma.$BarterRequestPayload<ExtArgs>[]
      barterNegotiations: Prisma.$BarterNegotiationPayload<ExtArgs>[]
      wishlists: Prisma.$WishlistPayload<ExtArgs>[]
      wtbRequests: Prisma.$WtbRequestPayload<ExtArgs>[]
      wtbResponses: Prisma.$WtbResponsePayload<ExtArgs>[]
      buyerTransactions: Prisma.$TransactionPayload<ExtArgs>[]
      sellerTransactions: Prisma.$TransactionPayload<ExtArgs>[]
      discussions: Prisma.$DiscussionPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      userBadges: Prisma.$UserBadgePayload<ExtArgs>[]
      donationRequests: Prisma.$DonationRequestPayload<ExtArgs>[]
      donationDistributions: Prisma.$DonationDistributionPayload<ExtArgs>[]
      recommendations: Prisma.$RecommendationPayload<ExtArgs>[]
      academicPreferences: Prisma.$AcademicPreferencePayload<ExtArgs>[]
      carts: Prisma.$CartPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      username: string
      password: string
      fullName: string
      studentId: string | null
      university: string | null
      faculty: string | null
      major: string | null
      phoneNumber: string | null
      profileImage: string | null
      isVerified: boolean
      verificationToken: string | null
      resetPasswordToken: string | null
      reputation: number
      isActive: boolean
      lastLoginAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends User$itemsArgs<ExtArgs> = {}>(args?: Subset<T, User$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    barterRequests<T extends User$barterRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$barterRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BarterRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    barterNegotiations<T extends User$barterNegotiationsArgs<ExtArgs> = {}>(args?: Subset<T, User$barterNegotiationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BarterNegotiationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wishlists<T extends User$wishlistsArgs<ExtArgs> = {}>(args?: Subset<T, User$wishlistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wtbRequests<T extends User$wtbRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$wtbRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WtbRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wtbResponses<T extends User$wtbResponsesArgs<ExtArgs> = {}>(args?: Subset<T, User$wtbResponsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WtbResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    buyerTransactions<T extends User$buyerTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$buyerTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sellerTransactions<T extends User$sellerTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sellerTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    discussions<T extends User$discussionsArgs<ExtArgs> = {}>(args?: Subset<T, User$discussionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userBadges<T extends User$userBadgesArgs<ExtArgs> = {}>(args?: Subset<T, User$userBadgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    donationRequests<T extends User$donationRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$donationRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DonationRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    donationDistributions<T extends User$donationDistributionsArgs<ExtArgs> = {}>(args?: Subset<T, User$donationDistributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DonationDistributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    recommendations<T extends User$recommendationsArgs<ExtArgs> = {}>(args?: Subset<T, User$recommendationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    academicPreferences<T extends User$academicPreferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$academicPreferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    carts<T extends User$cartsArgs<ExtArgs> = {}>(args?: Subset<T, User$cartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly studentId: FieldRef<"User", 'String'>
    readonly university: FieldRef<"User", 'String'>
    readonly faculty: FieldRef<"User", 'String'>
    readonly major: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly profileImage: FieldRef<"User", 'String'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly verificationToken: FieldRef<"User", 'String'>
    readonly resetPasswordToken: FieldRef<"User", 'String'>
    readonly reputation: FieldRef<"User", 'Int'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.items
   */
  export type User$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * User.barterRequests
   */
  export type User$barterRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterRequest
     */
    select?: BarterRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterRequest
     */
    omit?: BarterRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterRequestInclude<ExtArgs> | null
    where?: BarterRequestWhereInput
    orderBy?: BarterRequestOrderByWithRelationInput | BarterRequestOrderByWithRelationInput[]
    cursor?: BarterRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BarterRequestScalarFieldEnum | BarterRequestScalarFieldEnum[]
  }

  /**
   * User.barterNegotiations
   */
  export type User$barterNegotiationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterNegotiation
     */
    select?: BarterNegotiationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterNegotiation
     */
    omit?: BarterNegotiationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterNegotiationInclude<ExtArgs> | null
    where?: BarterNegotiationWhereInput
    orderBy?: BarterNegotiationOrderByWithRelationInput | BarterNegotiationOrderByWithRelationInput[]
    cursor?: BarterNegotiationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BarterNegotiationScalarFieldEnum | BarterNegotiationScalarFieldEnum[]
  }

  /**
   * User.wishlists
   */
  export type User$wishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    where?: WishlistWhereInput
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    cursor?: WishlistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WishlistScalarFieldEnum | WishlistScalarFieldEnum[]
  }

  /**
   * User.wtbRequests
   */
  export type User$wtbRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbRequest
     */
    select?: WtbRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbRequest
     */
    omit?: WtbRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbRequestInclude<ExtArgs> | null
    where?: WtbRequestWhereInput
    orderBy?: WtbRequestOrderByWithRelationInput | WtbRequestOrderByWithRelationInput[]
    cursor?: WtbRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WtbRequestScalarFieldEnum | WtbRequestScalarFieldEnum[]
  }

  /**
   * User.wtbResponses
   */
  export type User$wtbResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbResponse
     */
    select?: WtbResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbResponse
     */
    omit?: WtbResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbResponseInclude<ExtArgs> | null
    where?: WtbResponseWhereInput
    orderBy?: WtbResponseOrderByWithRelationInput | WtbResponseOrderByWithRelationInput[]
    cursor?: WtbResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WtbResponseScalarFieldEnum | WtbResponseScalarFieldEnum[]
  }

  /**
   * User.buyerTransactions
   */
  export type User$buyerTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.sellerTransactions
   */
  export type User$sellerTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.discussions
   */
  export type User$discussionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discussion
     */
    omit?: DiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionInclude<ExtArgs> | null
    where?: DiscussionWhereInput
    orderBy?: DiscussionOrderByWithRelationInput | DiscussionOrderByWithRelationInput[]
    cursor?: DiscussionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionScalarFieldEnum | DiscussionScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.userBadges
   */
  export type User$userBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    cursor?: UserBadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * User.donationRequests
   */
  export type User$donationRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationRequest
     */
    select?: DonationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationRequest
     */
    omit?: DonationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationRequestInclude<ExtArgs> | null
    where?: DonationRequestWhereInput
    orderBy?: DonationRequestOrderByWithRelationInput | DonationRequestOrderByWithRelationInput[]
    cursor?: DonationRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DonationRequestScalarFieldEnum | DonationRequestScalarFieldEnum[]
  }

  /**
   * User.donationDistributions
   */
  export type User$donationDistributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationDistribution
     */
    select?: DonationDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationDistribution
     */
    omit?: DonationDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationDistributionInclude<ExtArgs> | null
    where?: DonationDistributionWhereInput
    orderBy?: DonationDistributionOrderByWithRelationInput | DonationDistributionOrderByWithRelationInput[]
    cursor?: DonationDistributionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DonationDistributionScalarFieldEnum | DonationDistributionScalarFieldEnum[]
  }

  /**
   * User.recommendations
   */
  export type User$recommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    where?: RecommendationWhereInput
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    cursor?: RecommendationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * User.academicPreferences
   */
  export type User$academicPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicPreference
     */
    select?: AcademicPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicPreference
     */
    omit?: AcademicPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicPreferenceInclude<ExtArgs> | null
    where?: AcademicPreferenceWhereInput
    orderBy?: AcademicPreferenceOrderByWithRelationInput | AcademicPreferenceOrderByWithRelationInput[]
    cursor?: AcademicPreferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AcademicPreferenceScalarFieldEnum | AcademicPreferenceScalarFieldEnum[]
  }

  /**
   * User.carts
   */
  export type User$cartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    where?: CartWhereInput
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    cursor?: CartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Item
   */

  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    price: Decimal | null
    viewCount: number | null
    favoriteCount: number | null
  }

  export type ItemSumAggregateOutputType = {
    id: number | null
    userId: number | null
    price: Decimal | null
    viewCount: number | null
    favoriteCount: number | null
  }

  export type ItemMinAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    description: string | null
    price: Decimal | null
    category: string | null
    condition: $Enums.ItemCondition | null
    conditionDetail: string | null
    isDonation: boolean | null
    isBundle: boolean | null
    bundleItems: string | null
    location: string | null
    isAvailable: boolean | null
    viewCount: number | null
    favoriteCount: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    description: string | null
    price: Decimal | null
    category: string | null
    condition: $Enums.ItemCondition | null
    conditionDetail: string | null
    isDonation: boolean | null
    isBundle: boolean | null
    bundleItems: string | null
    location: string | null
    isAvailable: boolean | null
    viewCount: number | null
    favoriteCount: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    description: number
    price: number
    category: number
    condition: number
    conditionDetail: number
    isDonation: number
    isBundle: number
    bundleItems: number
    location: number
    isAvailable: number
    viewCount: number
    favoriteCount: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    id?: true
    userId?: true
    price?: true
    viewCount?: true
    favoriteCount?: true
  }

  export type ItemSumAggregateInputType = {
    id?: true
    userId?: true
    price?: true
    viewCount?: true
    favoriteCount?: true
  }

  export type ItemMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    price?: true
    category?: true
    condition?: true
    conditionDetail?: true
    isDonation?: true
    isBundle?: true
    bundleItems?: true
    location?: true
    isAvailable?: true
    viewCount?: true
    favoriteCount?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    price?: true
    category?: true
    condition?: true
    conditionDetail?: true
    isDonation?: true
    isBundle?: true
    bundleItems?: true
    location?: true
    isAvailable?: true
    viewCount?: true
    favoriteCount?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    price?: true
    category?: true
    condition?: true
    conditionDetail?: true
    isDonation?: true
    isBundle?: true
    bundleItems?: true
    location?: true
    isAvailable?: true
    viewCount?: true
    favoriteCount?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Item to aggregate.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithAggregationInput | ItemOrderByWithAggregationInput[]
    by: ItemScalarFieldEnum[] | ItemScalarFieldEnum
    having?: ItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _avg?: ItemAvgAggregateInputType
    _sum?: ItemSumAggregateInputType
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }

  export type ItemGroupByOutputType = {
    id: number
    userId: number
    title: string
    description: string
    price: Decimal
    category: string
    condition: $Enums.ItemCondition
    conditionDetail: string | null
    isDonation: boolean
    isBundle: boolean
    bundleItems: string | null
    location: string | null
    isAvailable: boolean
    viewCount: number
    favoriteCount: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type ItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    category?: boolean
    condition?: boolean
    conditionDetail?: boolean
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: boolean
    location?: boolean
    isAvailable?: boolean
    viewCount?: boolean
    favoriteCount?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    itemImages?: boolean | Item$itemImagesArgs<ExtArgs>
    barterRequests?: boolean | Item$barterRequestsArgs<ExtArgs>
    wishlists?: boolean | Item$wishlistsArgs<ExtArgs>
    transactions?: boolean | Item$transactionsArgs<ExtArgs>
    priceHistories?: boolean | Item$priceHistoriesArgs<ExtArgs>
    recommendations?: boolean | Item$recommendationsArgs<ExtArgs>
    carts?: boolean | Item$cartsArgs<ExtArgs>
    _count?: boolean | ItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>



  export type ItemSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    category?: boolean
    condition?: boolean
    conditionDetail?: boolean
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: boolean
    location?: boolean
    isAvailable?: boolean
    viewCount?: boolean
    favoriteCount?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "description" | "price" | "category" | "condition" | "conditionDetail" | "isDonation" | "isBundle" | "bundleItems" | "location" | "isAvailable" | "viewCount" | "favoriteCount" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["item"]>
  export type ItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    itemImages?: boolean | Item$itemImagesArgs<ExtArgs>
    barterRequests?: boolean | Item$barterRequestsArgs<ExtArgs>
    wishlists?: boolean | Item$wishlistsArgs<ExtArgs>
    transactions?: boolean | Item$transactionsArgs<ExtArgs>
    priceHistories?: boolean | Item$priceHistoriesArgs<ExtArgs>
    recommendations?: boolean | Item$recommendationsArgs<ExtArgs>
    carts?: boolean | Item$cartsArgs<ExtArgs>
    _count?: boolean | ItemCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Item"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      itemImages: Prisma.$ItemImagePayload<ExtArgs>[]
      barterRequests: Prisma.$BarterRequestPayload<ExtArgs>[]
      wishlists: Prisma.$WishlistPayload<ExtArgs>[]
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      priceHistories: Prisma.$PriceHistoryPayload<ExtArgs>[]
      recommendations: Prisma.$RecommendationPayload<ExtArgs>[]
      carts: Prisma.$CartPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      title: string
      description: string
      price: Prisma.Decimal
      category: string
      condition: $Enums.ItemCondition
      conditionDetail: string | null
      isDonation: boolean
      isBundle: boolean
      bundleItems: string | null
      location: string | null
      isAvailable: boolean
      viewCount: number
      favoriteCount: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["item"]>
    composites: {}
  }

  type ItemGetPayload<S extends boolean | null | undefined | ItemDefaultArgs> = $Result.GetResult<Prisma.$ItemPayload, S>

  type ItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ItemCountAggregateInputType | true
    }

  export interface ItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Item'], meta: { name: 'Item' } }
    /**
     * Find zero or one Item that matches the filter.
     * @param {ItemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemFindUniqueArgs>(args: SelectSubset<T, ItemFindUniqueArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Item that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ItemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemFindFirstArgs>(args?: SelectSubset<T, ItemFindFirstArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemFindManyArgs>(args?: SelectSubset<T, ItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Item.
     * @param {ItemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
     */
    create<T extends ItemCreateArgs>(args: SelectSubset<T, ItemCreateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Items.
     * @param {ItemCreateManyArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemCreateManyArgs>(args?: SelectSubset<T, ItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Item.
     * @param {ItemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
     */
    delete<T extends ItemDeleteArgs>(args: SelectSubset<T, ItemDeleteArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Item.
     * @param {ItemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemUpdateArgs>(args: SelectSubset<T, ItemUpdateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Items.
     * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemDeleteManyArgs>(args?: SelectSubset<T, ItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemUpdateManyArgs>(args: SelectSubset<T, ItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
     */
    upsert<T extends ItemUpsertArgs>(args: SelectSubset<T, ItemUpsertArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemCountArgs>(
      args?: Subset<T, ItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Item model
   */
  readonly fields: ItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    itemImages<T extends Item$itemImagesArgs<ExtArgs> = {}>(args?: Subset<T, Item$itemImagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    barterRequests<T extends Item$barterRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Item$barterRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BarterRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wishlists<T extends Item$wishlistsArgs<ExtArgs> = {}>(args?: Subset<T, Item$wishlistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactions<T extends Item$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Item$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    priceHistories<T extends Item$priceHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, Item$priceHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    recommendations<T extends Item$recommendationsArgs<ExtArgs> = {}>(args?: Subset<T, Item$recommendationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    carts<T extends Item$cartsArgs<ExtArgs> = {}>(args?: Subset<T, Item$cartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Item model
   */
  interface ItemFieldRefs {
    readonly id: FieldRef<"Item", 'Int'>
    readonly userId: FieldRef<"Item", 'Int'>
    readonly title: FieldRef<"Item", 'String'>
    readonly description: FieldRef<"Item", 'String'>
    readonly price: FieldRef<"Item", 'Decimal'>
    readonly category: FieldRef<"Item", 'String'>
    readonly condition: FieldRef<"Item", 'ItemCondition'>
    readonly conditionDetail: FieldRef<"Item", 'String'>
    readonly isDonation: FieldRef<"Item", 'Boolean'>
    readonly isBundle: FieldRef<"Item", 'Boolean'>
    readonly bundleItems: FieldRef<"Item", 'String'>
    readonly location: FieldRef<"Item", 'String'>
    readonly isAvailable: FieldRef<"Item", 'Boolean'>
    readonly viewCount: FieldRef<"Item", 'Int'>
    readonly favoriteCount: FieldRef<"Item", 'Int'>
    readonly isActive: FieldRef<"Item", 'Boolean'>
    readonly createdAt: FieldRef<"Item", 'DateTime'>
    readonly updatedAt: FieldRef<"Item", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Item findUnique
   */
  export type ItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findUniqueOrThrow
   */
  export type ItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findFirst
   */
  export type ItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findFirstOrThrow
   */
  export type ItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findMany
   */
  export type ItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item create
   */
  export type ItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to create a Item.
     */
    data: XOR<ItemCreateInput, ItemUncheckedCreateInput>
  }

  /**
   * Item createMany
   */
  export type ItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Item update
   */
  export type ItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to update a Item.
     */
    data: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
    /**
     * Choose, which Item to update.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item updateMany
   */
  export type ItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemWhereInput
    /**
     * Limit how many Items to update.
     */
    limit?: number
  }

  /**
   * Item upsert
   */
  export type ItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The filter to search for the Item to update in case it exists.
     */
    where: ItemWhereUniqueInput
    /**
     * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
     */
    create: XOR<ItemCreateInput, ItemUncheckedCreateInput>
    /**
     * In case the Item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
  }

  /**
   * Item delete
   */
  export type ItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter which Item to delete.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item deleteMany
   */
  export type ItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemWhereInput
    /**
     * Limit how many Items to delete.
     */
    limit?: number
  }

  /**
   * Item.itemImages
   */
  export type Item$itemImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemImage
     */
    select?: ItemImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemImage
     */
    omit?: ItemImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemImageInclude<ExtArgs> | null
    where?: ItemImageWhereInput
    orderBy?: ItemImageOrderByWithRelationInput | ItemImageOrderByWithRelationInput[]
    cursor?: ItemImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemImageScalarFieldEnum | ItemImageScalarFieldEnum[]
  }

  /**
   * Item.barterRequests
   */
  export type Item$barterRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterRequest
     */
    select?: BarterRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterRequest
     */
    omit?: BarterRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterRequestInclude<ExtArgs> | null
    where?: BarterRequestWhereInput
    orderBy?: BarterRequestOrderByWithRelationInput | BarterRequestOrderByWithRelationInput[]
    cursor?: BarterRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BarterRequestScalarFieldEnum | BarterRequestScalarFieldEnum[]
  }

  /**
   * Item.wishlists
   */
  export type Item$wishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    where?: WishlistWhereInput
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    cursor?: WishlistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WishlistScalarFieldEnum | WishlistScalarFieldEnum[]
  }

  /**
   * Item.transactions
   */
  export type Item$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Item.priceHistories
   */
  export type Item$priceHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    where?: PriceHistoryWhereInput
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    cursor?: PriceHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PriceHistoryScalarFieldEnum | PriceHistoryScalarFieldEnum[]
  }

  /**
   * Item.recommendations
   */
  export type Item$recommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    where?: RecommendationWhereInput
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    cursor?: RecommendationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Item.carts
   */
  export type Item$cartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    where?: CartWhereInput
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    cursor?: CartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }

  /**
   * Item without action
   */
  export type ItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
  }


  /**
   * Model AcademicData
   */

  export type AggregateAcademicData = {
    _count: AcademicDataCountAggregateOutputType | null
    _avg: AcademicDataAvgAggregateOutputType | null
    _sum: AcademicDataSumAggregateOutputType | null
    _min: AcademicDataMinAggregateOutputType | null
    _max: AcademicDataMaxAggregateOutputType | null
  }

  export type AcademicDataAvgAggregateOutputType = {
    id: number | null
    semester: number | null
    credits: number | null
  }

  export type AcademicDataSumAggregateOutputType = {
    id: number | null
    semester: number | null
    credits: number | null
  }

  export type AcademicDataMinAggregateOutputType = {
    id: number | null
    courseCode: string | null
    courseName: string | null
    lecturerName: string | null
    faculty: string | null
    semester: number | null
    credits: number | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AcademicDataMaxAggregateOutputType = {
    id: number | null
    courseCode: string | null
    courseName: string | null
    lecturerName: string | null
    faculty: string | null
    semester: number | null
    credits: number | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AcademicDataCountAggregateOutputType = {
    id: number
    courseCode: number
    courseName: number
    lecturerName: number
    faculty: number
    semester: number
    credits: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AcademicDataAvgAggregateInputType = {
    id?: true
    semester?: true
    credits?: true
  }

  export type AcademicDataSumAggregateInputType = {
    id?: true
    semester?: true
    credits?: true
  }

  export type AcademicDataMinAggregateInputType = {
    id?: true
    courseCode?: true
    courseName?: true
    lecturerName?: true
    faculty?: true
    semester?: true
    credits?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AcademicDataMaxAggregateInputType = {
    id?: true
    courseCode?: true
    courseName?: true
    lecturerName?: true
    faculty?: true
    semester?: true
    credits?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AcademicDataCountAggregateInputType = {
    id?: true
    courseCode?: true
    courseName?: true
    lecturerName?: true
    faculty?: true
    semester?: true
    credits?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AcademicDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicData to aggregate.
     */
    where?: AcademicDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicData to fetch.
     */
    orderBy?: AcademicDataOrderByWithRelationInput | AcademicDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AcademicDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AcademicData
    **/
    _count?: true | AcademicDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AcademicDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AcademicDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AcademicDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AcademicDataMaxAggregateInputType
  }

  export type GetAcademicDataAggregateType<T extends AcademicDataAggregateArgs> = {
        [P in keyof T & keyof AggregateAcademicData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAcademicData[P]>
      : GetScalarType<T[P], AggregateAcademicData[P]>
  }




  export type AcademicDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicDataWhereInput
    orderBy?: AcademicDataOrderByWithAggregationInput | AcademicDataOrderByWithAggregationInput[]
    by: AcademicDataScalarFieldEnum[] | AcademicDataScalarFieldEnum
    having?: AcademicDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AcademicDataCountAggregateInputType | true
    _avg?: AcademicDataAvgAggregateInputType
    _sum?: AcademicDataSumAggregateInputType
    _min?: AcademicDataMinAggregateInputType
    _max?: AcademicDataMaxAggregateInputType
  }

  export type AcademicDataGroupByOutputType = {
    id: number
    courseCode: string
    courseName: string
    lecturerName: string | null
    faculty: string
    semester: number | null
    credits: number | null
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: AcademicDataCountAggregateOutputType | null
    _avg: AcademicDataAvgAggregateOutputType | null
    _sum: AcademicDataSumAggregateOutputType | null
    _min: AcademicDataMinAggregateOutputType | null
    _max: AcademicDataMaxAggregateOutputType | null
  }

  type GetAcademicDataGroupByPayload<T extends AcademicDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AcademicDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AcademicDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AcademicDataGroupByOutputType[P]>
            : GetScalarType<T[P], AcademicDataGroupByOutputType[P]>
        }
      >
    >


  export type AcademicDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseCode?: boolean
    courseName?: boolean
    lecturerName?: boolean
    faculty?: boolean
    semester?: boolean
    credits?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    discussions?: boolean | AcademicData$discussionsArgs<ExtArgs>
    academicPreferences?: boolean | AcademicData$academicPreferencesArgs<ExtArgs>
    _count?: boolean | AcademicDataCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["academicData"]>



  export type AcademicDataSelectScalar = {
    id?: boolean
    courseCode?: boolean
    courseName?: boolean
    lecturerName?: boolean
    faculty?: boolean
    semester?: boolean
    credits?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AcademicDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "courseCode" | "courseName" | "lecturerName" | "faculty" | "semester" | "credits" | "description" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["academicData"]>
  export type AcademicDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discussions?: boolean | AcademicData$discussionsArgs<ExtArgs>
    academicPreferences?: boolean | AcademicData$academicPreferencesArgs<ExtArgs>
    _count?: boolean | AcademicDataCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AcademicDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AcademicData"
    objects: {
      discussions: Prisma.$DiscussionPayload<ExtArgs>[]
      academicPreferences: Prisma.$AcademicPreferencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      courseCode: string
      courseName: string
      lecturerName: string | null
      faculty: string
      semester: number | null
      credits: number | null
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["academicData"]>
    composites: {}
  }

  type AcademicDataGetPayload<S extends boolean | null | undefined | AcademicDataDefaultArgs> = $Result.GetResult<Prisma.$AcademicDataPayload, S>

  type AcademicDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AcademicDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AcademicDataCountAggregateInputType | true
    }

  export interface AcademicDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AcademicData'], meta: { name: 'AcademicData' } }
    /**
     * Find zero or one AcademicData that matches the filter.
     * @param {AcademicDataFindUniqueArgs} args - Arguments to find a AcademicData
     * @example
     * // Get one AcademicData
     * const academicData = await prisma.academicData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AcademicDataFindUniqueArgs>(args: SelectSubset<T, AcademicDataFindUniqueArgs<ExtArgs>>): Prisma__AcademicDataClient<$Result.GetResult<Prisma.$AcademicDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AcademicData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AcademicDataFindUniqueOrThrowArgs} args - Arguments to find a AcademicData
     * @example
     * // Get one AcademicData
     * const academicData = await prisma.academicData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AcademicDataFindUniqueOrThrowArgs>(args: SelectSubset<T, AcademicDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AcademicDataClient<$Result.GetResult<Prisma.$AcademicDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AcademicData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicDataFindFirstArgs} args - Arguments to find a AcademicData
     * @example
     * // Get one AcademicData
     * const academicData = await prisma.academicData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AcademicDataFindFirstArgs>(args?: SelectSubset<T, AcademicDataFindFirstArgs<ExtArgs>>): Prisma__AcademicDataClient<$Result.GetResult<Prisma.$AcademicDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AcademicData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicDataFindFirstOrThrowArgs} args - Arguments to find a AcademicData
     * @example
     * // Get one AcademicData
     * const academicData = await prisma.academicData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AcademicDataFindFirstOrThrowArgs>(args?: SelectSubset<T, AcademicDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__AcademicDataClient<$Result.GetResult<Prisma.$AcademicDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AcademicData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AcademicData
     * const academicData = await prisma.academicData.findMany()
     * 
     * // Get first 10 AcademicData
     * const academicData = await prisma.academicData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const academicDataWithIdOnly = await prisma.academicData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AcademicDataFindManyArgs>(args?: SelectSubset<T, AcademicDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AcademicData.
     * @param {AcademicDataCreateArgs} args - Arguments to create a AcademicData.
     * @example
     * // Create one AcademicData
     * const AcademicData = await prisma.academicData.create({
     *   data: {
     *     // ... data to create a AcademicData
     *   }
     * })
     * 
     */
    create<T extends AcademicDataCreateArgs>(args: SelectSubset<T, AcademicDataCreateArgs<ExtArgs>>): Prisma__AcademicDataClient<$Result.GetResult<Prisma.$AcademicDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AcademicData.
     * @param {AcademicDataCreateManyArgs} args - Arguments to create many AcademicData.
     * @example
     * // Create many AcademicData
     * const academicData = await prisma.academicData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AcademicDataCreateManyArgs>(args?: SelectSubset<T, AcademicDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AcademicData.
     * @param {AcademicDataDeleteArgs} args - Arguments to delete one AcademicData.
     * @example
     * // Delete one AcademicData
     * const AcademicData = await prisma.academicData.delete({
     *   where: {
     *     // ... filter to delete one AcademicData
     *   }
     * })
     * 
     */
    delete<T extends AcademicDataDeleteArgs>(args: SelectSubset<T, AcademicDataDeleteArgs<ExtArgs>>): Prisma__AcademicDataClient<$Result.GetResult<Prisma.$AcademicDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AcademicData.
     * @param {AcademicDataUpdateArgs} args - Arguments to update one AcademicData.
     * @example
     * // Update one AcademicData
     * const academicData = await prisma.academicData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AcademicDataUpdateArgs>(args: SelectSubset<T, AcademicDataUpdateArgs<ExtArgs>>): Prisma__AcademicDataClient<$Result.GetResult<Prisma.$AcademicDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AcademicData.
     * @param {AcademicDataDeleteManyArgs} args - Arguments to filter AcademicData to delete.
     * @example
     * // Delete a few AcademicData
     * const { count } = await prisma.academicData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AcademicDataDeleteManyArgs>(args?: SelectSubset<T, AcademicDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AcademicData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AcademicData
     * const academicData = await prisma.academicData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AcademicDataUpdateManyArgs>(args: SelectSubset<T, AcademicDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AcademicData.
     * @param {AcademicDataUpsertArgs} args - Arguments to update or create a AcademicData.
     * @example
     * // Update or create a AcademicData
     * const academicData = await prisma.academicData.upsert({
     *   create: {
     *     // ... data to create a AcademicData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AcademicData we want to update
     *   }
     * })
     */
    upsert<T extends AcademicDataUpsertArgs>(args: SelectSubset<T, AcademicDataUpsertArgs<ExtArgs>>): Prisma__AcademicDataClient<$Result.GetResult<Prisma.$AcademicDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AcademicData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicDataCountArgs} args - Arguments to filter AcademicData to count.
     * @example
     * // Count the number of AcademicData
     * const count = await prisma.academicData.count({
     *   where: {
     *     // ... the filter for the AcademicData we want to count
     *   }
     * })
    **/
    count<T extends AcademicDataCountArgs>(
      args?: Subset<T, AcademicDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AcademicDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AcademicData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AcademicDataAggregateArgs>(args: Subset<T, AcademicDataAggregateArgs>): Prisma.PrismaPromise<GetAcademicDataAggregateType<T>>

    /**
     * Group by AcademicData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AcademicDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AcademicDataGroupByArgs['orderBy'] }
        : { orderBy?: AcademicDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AcademicDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAcademicDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AcademicData model
   */
  readonly fields: AcademicDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AcademicData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AcademicDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    discussions<T extends AcademicData$discussionsArgs<ExtArgs> = {}>(args?: Subset<T, AcademicData$discussionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    academicPreferences<T extends AcademicData$academicPreferencesArgs<ExtArgs> = {}>(args?: Subset<T, AcademicData$academicPreferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AcademicData model
   */
  interface AcademicDataFieldRefs {
    readonly id: FieldRef<"AcademicData", 'Int'>
    readonly courseCode: FieldRef<"AcademicData", 'String'>
    readonly courseName: FieldRef<"AcademicData", 'String'>
    readonly lecturerName: FieldRef<"AcademicData", 'String'>
    readonly faculty: FieldRef<"AcademicData", 'String'>
    readonly semester: FieldRef<"AcademicData", 'Int'>
    readonly credits: FieldRef<"AcademicData", 'Int'>
    readonly description: FieldRef<"AcademicData", 'String'>
    readonly isActive: FieldRef<"AcademicData", 'Boolean'>
    readonly createdAt: FieldRef<"AcademicData", 'DateTime'>
    readonly updatedAt: FieldRef<"AcademicData", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AcademicData findUnique
   */
  export type AcademicDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicData
     */
    select?: AcademicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicData
     */
    omit?: AcademicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicDataInclude<ExtArgs> | null
    /**
     * Filter, which AcademicData to fetch.
     */
    where: AcademicDataWhereUniqueInput
  }

  /**
   * AcademicData findUniqueOrThrow
   */
  export type AcademicDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicData
     */
    select?: AcademicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicData
     */
    omit?: AcademicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicDataInclude<ExtArgs> | null
    /**
     * Filter, which AcademicData to fetch.
     */
    where: AcademicDataWhereUniqueInput
  }

  /**
   * AcademicData findFirst
   */
  export type AcademicDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicData
     */
    select?: AcademicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicData
     */
    omit?: AcademicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicDataInclude<ExtArgs> | null
    /**
     * Filter, which AcademicData to fetch.
     */
    where?: AcademicDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicData to fetch.
     */
    orderBy?: AcademicDataOrderByWithRelationInput | AcademicDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicData.
     */
    cursor?: AcademicDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicData.
     */
    distinct?: AcademicDataScalarFieldEnum | AcademicDataScalarFieldEnum[]
  }

  /**
   * AcademicData findFirstOrThrow
   */
  export type AcademicDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicData
     */
    select?: AcademicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicData
     */
    omit?: AcademicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicDataInclude<ExtArgs> | null
    /**
     * Filter, which AcademicData to fetch.
     */
    where?: AcademicDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicData to fetch.
     */
    orderBy?: AcademicDataOrderByWithRelationInput | AcademicDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicData.
     */
    cursor?: AcademicDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicData.
     */
    distinct?: AcademicDataScalarFieldEnum | AcademicDataScalarFieldEnum[]
  }

  /**
   * AcademicData findMany
   */
  export type AcademicDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicData
     */
    select?: AcademicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicData
     */
    omit?: AcademicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicDataInclude<ExtArgs> | null
    /**
     * Filter, which AcademicData to fetch.
     */
    where?: AcademicDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicData to fetch.
     */
    orderBy?: AcademicDataOrderByWithRelationInput | AcademicDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AcademicData.
     */
    cursor?: AcademicDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicData.
     */
    skip?: number
    distinct?: AcademicDataScalarFieldEnum | AcademicDataScalarFieldEnum[]
  }

  /**
   * AcademicData create
   */
  export type AcademicDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicData
     */
    select?: AcademicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicData
     */
    omit?: AcademicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicDataInclude<ExtArgs> | null
    /**
     * The data needed to create a AcademicData.
     */
    data: XOR<AcademicDataCreateInput, AcademicDataUncheckedCreateInput>
  }

  /**
   * AcademicData createMany
   */
  export type AcademicDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AcademicData.
     */
    data: AcademicDataCreateManyInput | AcademicDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AcademicData update
   */
  export type AcademicDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicData
     */
    select?: AcademicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicData
     */
    omit?: AcademicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicDataInclude<ExtArgs> | null
    /**
     * The data needed to update a AcademicData.
     */
    data: XOR<AcademicDataUpdateInput, AcademicDataUncheckedUpdateInput>
    /**
     * Choose, which AcademicData to update.
     */
    where: AcademicDataWhereUniqueInput
  }

  /**
   * AcademicData updateMany
   */
  export type AcademicDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AcademicData.
     */
    data: XOR<AcademicDataUpdateManyMutationInput, AcademicDataUncheckedUpdateManyInput>
    /**
     * Filter which AcademicData to update
     */
    where?: AcademicDataWhereInput
    /**
     * Limit how many AcademicData to update.
     */
    limit?: number
  }

  /**
   * AcademicData upsert
   */
  export type AcademicDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicData
     */
    select?: AcademicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicData
     */
    omit?: AcademicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicDataInclude<ExtArgs> | null
    /**
     * The filter to search for the AcademicData to update in case it exists.
     */
    where: AcademicDataWhereUniqueInput
    /**
     * In case the AcademicData found by the `where` argument doesn't exist, create a new AcademicData with this data.
     */
    create: XOR<AcademicDataCreateInput, AcademicDataUncheckedCreateInput>
    /**
     * In case the AcademicData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AcademicDataUpdateInput, AcademicDataUncheckedUpdateInput>
  }

  /**
   * AcademicData delete
   */
  export type AcademicDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicData
     */
    select?: AcademicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicData
     */
    omit?: AcademicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicDataInclude<ExtArgs> | null
    /**
     * Filter which AcademicData to delete.
     */
    where: AcademicDataWhereUniqueInput
  }

  /**
   * AcademicData deleteMany
   */
  export type AcademicDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicData to delete
     */
    where?: AcademicDataWhereInput
    /**
     * Limit how many AcademicData to delete.
     */
    limit?: number
  }

  /**
   * AcademicData.discussions
   */
  export type AcademicData$discussionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discussion
     */
    omit?: DiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionInclude<ExtArgs> | null
    where?: DiscussionWhereInput
    orderBy?: DiscussionOrderByWithRelationInput | DiscussionOrderByWithRelationInput[]
    cursor?: DiscussionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionScalarFieldEnum | DiscussionScalarFieldEnum[]
  }

  /**
   * AcademicData.academicPreferences
   */
  export type AcademicData$academicPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicPreference
     */
    select?: AcademicPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicPreference
     */
    omit?: AcademicPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicPreferenceInclude<ExtArgs> | null
    where?: AcademicPreferenceWhereInput
    orderBy?: AcademicPreferenceOrderByWithRelationInput | AcademicPreferenceOrderByWithRelationInput[]
    cursor?: AcademicPreferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AcademicPreferenceScalarFieldEnum | AcademicPreferenceScalarFieldEnum[]
  }

  /**
   * AcademicData without action
   */
  export type AcademicDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicData
     */
    select?: AcademicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicData
     */
    omit?: AcademicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicDataInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    id: number | null
    buyerId: number | null
    sellerId: number | null
    itemId: number | null
    amount: Decimal | null
  }

  export type TransactionSumAggregateOutputType = {
    id: number | null
    buyerId: number | null
    sellerId: number | null
    itemId: number | null
    amount: Decimal | null
  }

  export type TransactionMinAggregateOutputType = {
    id: number | null
    buyerId: number | null
    sellerId: number | null
    itemId: number | null
    amount: Decimal | null
    status: $Enums.TransactionStatus | null
    paymentMethod: string | null
    paymentStatus: $Enums.PaymentStatus | null
    codLocation: string | null
    notes: string | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: number | null
    buyerId: number | null
    sellerId: number | null
    itemId: number | null
    amount: Decimal | null
    status: $Enums.TransactionStatus | null
    paymentMethod: string | null
    paymentStatus: $Enums.PaymentStatus | null
    codLocation: string | null
    notes: string | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    buyerId: number
    sellerId: number
    itemId: number
    amount: number
    status: number
    paymentMethod: number
    paymentStatus: number
    codLocation: number
    notes: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    id?: true
    buyerId?: true
    sellerId?: true
    itemId?: true
    amount?: true
  }

  export type TransactionSumAggregateInputType = {
    id?: true
    buyerId?: true
    sellerId?: true
    itemId?: true
    amount?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    buyerId?: true
    sellerId?: true
    itemId?: true
    amount?: true
    status?: true
    paymentMethod?: true
    paymentStatus?: true
    codLocation?: true
    notes?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    buyerId?: true
    sellerId?: true
    itemId?: true
    amount?: true
    status?: true
    paymentMethod?: true
    paymentStatus?: true
    codLocation?: true
    notes?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    buyerId?: true
    sellerId?: true
    itemId?: true
    amount?: true
    status?: true
    paymentMethod?: true
    paymentStatus?: true
    codLocation?: true
    notes?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: number
    buyerId: number
    sellerId: number
    itemId: number
    amount: Decimal
    status: $Enums.TransactionStatus
    paymentMethod: string | null
    paymentStatus: $Enums.PaymentStatus
    codLocation: string | null
    notes: string | null
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buyerId?: boolean
    sellerId?: boolean
    itemId?: boolean
    amount?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentStatus?: boolean
    codLocation?: boolean
    notes?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    buyer?: boolean | UserDefaultArgs<ExtArgs>
    seller?: boolean | UserDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>



  export type TransactionSelectScalar = {
    id?: boolean
    buyerId?: boolean
    sellerId?: boolean
    itemId?: boolean
    amount?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentStatus?: boolean
    codLocation?: boolean
    notes?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "buyerId" | "sellerId" | "itemId" | "amount" | "status" | "paymentMethod" | "paymentStatus" | "codLocation" | "notes" | "completedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["transaction"]>
  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyer?: boolean | UserDefaultArgs<ExtArgs>
    seller?: boolean | UserDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      buyer: Prisma.$UserPayload<ExtArgs>
      seller: Prisma.$UserPayload<ExtArgs>
      item: Prisma.$ItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      buyerId: number
      sellerId: number
      itemId: number
      amount: Prisma.Decimal
      status: $Enums.TransactionStatus
      paymentMethod: string | null
      paymentStatus: $Enums.PaymentStatus
      codLocation: string | null
      notes: string | null
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    buyer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    seller<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    item<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'Int'>
    readonly buyerId: FieldRef<"Transaction", 'Int'>
    readonly sellerId: FieldRef<"Transaction", 'Int'>
    readonly itemId: FieldRef<"Transaction", 'Int'>
    readonly amount: FieldRef<"Transaction", 'Decimal'>
    readonly status: FieldRef<"Transaction", 'TransactionStatus'>
    readonly paymentMethod: FieldRef<"Transaction", 'String'>
    readonly paymentStatus: FieldRef<"Transaction", 'PaymentStatus'>
    readonly codLocation: FieldRef<"Transaction", 'String'>
    readonly notes: FieldRef<"Transaction", 'String'>
    readonly completedAt: FieldRef<"Transaction", 'DateTime'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly updatedAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to delete.
     */
    limit?: number
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model BarterRequest
   */

  export type AggregateBarterRequest = {
    _count: BarterRequestCountAggregateOutputType | null
    _avg: BarterRequestAvgAggregateOutputType | null
    _sum: BarterRequestSumAggregateOutputType | null
    _min: BarterRequestMinAggregateOutputType | null
    _max: BarterRequestMaxAggregateOutputType | null
  }

  export type BarterRequestAvgAggregateOutputType = {
    id: number | null
    requesterId: number | null
    itemOwnerId: number | null
    requestedItemId: number | null
  }

  export type BarterRequestSumAggregateOutputType = {
    id: number | null
    requesterId: number | null
    itemOwnerId: number | null
    requestedItemId: number | null
  }

  export type BarterRequestMinAggregateOutputType = {
    id: number | null
    requesterId: number | null
    itemOwnerId: number | null
    requestedItemId: number | null
    offeredItemIds: string | null
    message: string | null
    status: $Enums.BarterStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BarterRequestMaxAggregateOutputType = {
    id: number | null
    requesterId: number | null
    itemOwnerId: number | null
    requestedItemId: number | null
    offeredItemIds: string | null
    message: string | null
    status: $Enums.BarterStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BarterRequestCountAggregateOutputType = {
    id: number
    requesterId: number
    itemOwnerId: number
    requestedItemId: number
    offeredItemIds: number
    message: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BarterRequestAvgAggregateInputType = {
    id?: true
    requesterId?: true
    itemOwnerId?: true
    requestedItemId?: true
  }

  export type BarterRequestSumAggregateInputType = {
    id?: true
    requesterId?: true
    itemOwnerId?: true
    requestedItemId?: true
  }

  export type BarterRequestMinAggregateInputType = {
    id?: true
    requesterId?: true
    itemOwnerId?: true
    requestedItemId?: true
    offeredItemIds?: true
    message?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BarterRequestMaxAggregateInputType = {
    id?: true
    requesterId?: true
    itemOwnerId?: true
    requestedItemId?: true
    offeredItemIds?: true
    message?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BarterRequestCountAggregateInputType = {
    id?: true
    requesterId?: true
    itemOwnerId?: true
    requestedItemId?: true
    offeredItemIds?: true
    message?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BarterRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BarterRequest to aggregate.
     */
    where?: BarterRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BarterRequests to fetch.
     */
    orderBy?: BarterRequestOrderByWithRelationInput | BarterRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BarterRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BarterRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BarterRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BarterRequests
    **/
    _count?: true | BarterRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BarterRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BarterRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BarterRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BarterRequestMaxAggregateInputType
  }

  export type GetBarterRequestAggregateType<T extends BarterRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateBarterRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBarterRequest[P]>
      : GetScalarType<T[P], AggregateBarterRequest[P]>
  }




  export type BarterRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BarterRequestWhereInput
    orderBy?: BarterRequestOrderByWithAggregationInput | BarterRequestOrderByWithAggregationInput[]
    by: BarterRequestScalarFieldEnum[] | BarterRequestScalarFieldEnum
    having?: BarterRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BarterRequestCountAggregateInputType | true
    _avg?: BarterRequestAvgAggregateInputType
    _sum?: BarterRequestSumAggregateInputType
    _min?: BarterRequestMinAggregateInputType
    _max?: BarterRequestMaxAggregateInputType
  }

  export type BarterRequestGroupByOutputType = {
    id: number
    requesterId: number
    itemOwnerId: number
    requestedItemId: number
    offeredItemIds: string
    message: string | null
    status: $Enums.BarterStatus
    createdAt: Date
    updatedAt: Date
    _count: BarterRequestCountAggregateOutputType | null
    _avg: BarterRequestAvgAggregateOutputType | null
    _sum: BarterRequestSumAggregateOutputType | null
    _min: BarterRequestMinAggregateOutputType | null
    _max: BarterRequestMaxAggregateOutputType | null
  }

  type GetBarterRequestGroupByPayload<T extends BarterRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BarterRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BarterRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BarterRequestGroupByOutputType[P]>
            : GetScalarType<T[P], BarterRequestGroupByOutputType[P]>
        }
      >
    >


  export type BarterRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requesterId?: boolean
    itemOwnerId?: boolean
    requestedItemId?: boolean
    offeredItemIds?: boolean
    message?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    requestedItem?: boolean | ItemDefaultArgs<ExtArgs>
    barterNegotiations?: boolean | BarterRequest$barterNegotiationsArgs<ExtArgs>
    _count?: boolean | BarterRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["barterRequest"]>



  export type BarterRequestSelectScalar = {
    id?: boolean
    requesterId?: boolean
    itemOwnerId?: boolean
    requestedItemId?: boolean
    offeredItemIds?: boolean
    message?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BarterRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "requesterId" | "itemOwnerId" | "requestedItemId" | "offeredItemIds" | "message" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["barterRequest"]>
  export type BarterRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    requestedItem?: boolean | ItemDefaultArgs<ExtArgs>
    barterNegotiations?: boolean | BarterRequest$barterNegotiationsArgs<ExtArgs>
    _count?: boolean | BarterRequestCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BarterRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BarterRequest"
    objects: {
      requester: Prisma.$UserPayload<ExtArgs>
      requestedItem: Prisma.$ItemPayload<ExtArgs>
      barterNegotiations: Prisma.$BarterNegotiationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      requesterId: number
      itemOwnerId: number
      requestedItemId: number
      offeredItemIds: string
      message: string | null
      status: $Enums.BarterStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["barterRequest"]>
    composites: {}
  }

  type BarterRequestGetPayload<S extends boolean | null | undefined | BarterRequestDefaultArgs> = $Result.GetResult<Prisma.$BarterRequestPayload, S>

  type BarterRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BarterRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BarterRequestCountAggregateInputType | true
    }

  export interface BarterRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BarterRequest'], meta: { name: 'BarterRequest' } }
    /**
     * Find zero or one BarterRequest that matches the filter.
     * @param {BarterRequestFindUniqueArgs} args - Arguments to find a BarterRequest
     * @example
     * // Get one BarterRequest
     * const barterRequest = await prisma.barterRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BarterRequestFindUniqueArgs>(args: SelectSubset<T, BarterRequestFindUniqueArgs<ExtArgs>>): Prisma__BarterRequestClient<$Result.GetResult<Prisma.$BarterRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BarterRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BarterRequestFindUniqueOrThrowArgs} args - Arguments to find a BarterRequest
     * @example
     * // Get one BarterRequest
     * const barterRequest = await prisma.barterRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BarterRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, BarterRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BarterRequestClient<$Result.GetResult<Prisma.$BarterRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BarterRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarterRequestFindFirstArgs} args - Arguments to find a BarterRequest
     * @example
     * // Get one BarterRequest
     * const barterRequest = await prisma.barterRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BarterRequestFindFirstArgs>(args?: SelectSubset<T, BarterRequestFindFirstArgs<ExtArgs>>): Prisma__BarterRequestClient<$Result.GetResult<Prisma.$BarterRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BarterRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarterRequestFindFirstOrThrowArgs} args - Arguments to find a BarterRequest
     * @example
     * // Get one BarterRequest
     * const barterRequest = await prisma.barterRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BarterRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, BarterRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__BarterRequestClient<$Result.GetResult<Prisma.$BarterRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BarterRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarterRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BarterRequests
     * const barterRequests = await prisma.barterRequest.findMany()
     * 
     * // Get first 10 BarterRequests
     * const barterRequests = await prisma.barterRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const barterRequestWithIdOnly = await prisma.barterRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BarterRequestFindManyArgs>(args?: SelectSubset<T, BarterRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BarterRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BarterRequest.
     * @param {BarterRequestCreateArgs} args - Arguments to create a BarterRequest.
     * @example
     * // Create one BarterRequest
     * const BarterRequest = await prisma.barterRequest.create({
     *   data: {
     *     // ... data to create a BarterRequest
     *   }
     * })
     * 
     */
    create<T extends BarterRequestCreateArgs>(args: SelectSubset<T, BarterRequestCreateArgs<ExtArgs>>): Prisma__BarterRequestClient<$Result.GetResult<Prisma.$BarterRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BarterRequests.
     * @param {BarterRequestCreateManyArgs} args - Arguments to create many BarterRequests.
     * @example
     * // Create many BarterRequests
     * const barterRequest = await prisma.barterRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BarterRequestCreateManyArgs>(args?: SelectSubset<T, BarterRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BarterRequest.
     * @param {BarterRequestDeleteArgs} args - Arguments to delete one BarterRequest.
     * @example
     * // Delete one BarterRequest
     * const BarterRequest = await prisma.barterRequest.delete({
     *   where: {
     *     // ... filter to delete one BarterRequest
     *   }
     * })
     * 
     */
    delete<T extends BarterRequestDeleteArgs>(args: SelectSubset<T, BarterRequestDeleteArgs<ExtArgs>>): Prisma__BarterRequestClient<$Result.GetResult<Prisma.$BarterRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BarterRequest.
     * @param {BarterRequestUpdateArgs} args - Arguments to update one BarterRequest.
     * @example
     * // Update one BarterRequest
     * const barterRequest = await prisma.barterRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BarterRequestUpdateArgs>(args: SelectSubset<T, BarterRequestUpdateArgs<ExtArgs>>): Prisma__BarterRequestClient<$Result.GetResult<Prisma.$BarterRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BarterRequests.
     * @param {BarterRequestDeleteManyArgs} args - Arguments to filter BarterRequests to delete.
     * @example
     * // Delete a few BarterRequests
     * const { count } = await prisma.barterRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BarterRequestDeleteManyArgs>(args?: SelectSubset<T, BarterRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BarterRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarterRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BarterRequests
     * const barterRequest = await prisma.barterRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BarterRequestUpdateManyArgs>(args: SelectSubset<T, BarterRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BarterRequest.
     * @param {BarterRequestUpsertArgs} args - Arguments to update or create a BarterRequest.
     * @example
     * // Update or create a BarterRequest
     * const barterRequest = await prisma.barterRequest.upsert({
     *   create: {
     *     // ... data to create a BarterRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BarterRequest we want to update
     *   }
     * })
     */
    upsert<T extends BarterRequestUpsertArgs>(args: SelectSubset<T, BarterRequestUpsertArgs<ExtArgs>>): Prisma__BarterRequestClient<$Result.GetResult<Prisma.$BarterRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BarterRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarterRequestCountArgs} args - Arguments to filter BarterRequests to count.
     * @example
     * // Count the number of BarterRequests
     * const count = await prisma.barterRequest.count({
     *   where: {
     *     // ... the filter for the BarterRequests we want to count
     *   }
     * })
    **/
    count<T extends BarterRequestCountArgs>(
      args?: Subset<T, BarterRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BarterRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BarterRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarterRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BarterRequestAggregateArgs>(args: Subset<T, BarterRequestAggregateArgs>): Prisma.PrismaPromise<GetBarterRequestAggregateType<T>>

    /**
     * Group by BarterRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarterRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BarterRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BarterRequestGroupByArgs['orderBy'] }
        : { orderBy?: BarterRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BarterRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBarterRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BarterRequest model
   */
  readonly fields: BarterRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BarterRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BarterRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    requester<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    requestedItem<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    barterNegotiations<T extends BarterRequest$barterNegotiationsArgs<ExtArgs> = {}>(args?: Subset<T, BarterRequest$barterNegotiationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BarterNegotiationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BarterRequest model
   */
  interface BarterRequestFieldRefs {
    readonly id: FieldRef<"BarterRequest", 'Int'>
    readonly requesterId: FieldRef<"BarterRequest", 'Int'>
    readonly itemOwnerId: FieldRef<"BarterRequest", 'Int'>
    readonly requestedItemId: FieldRef<"BarterRequest", 'Int'>
    readonly offeredItemIds: FieldRef<"BarterRequest", 'String'>
    readonly message: FieldRef<"BarterRequest", 'String'>
    readonly status: FieldRef<"BarterRequest", 'BarterStatus'>
    readonly createdAt: FieldRef<"BarterRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"BarterRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BarterRequest findUnique
   */
  export type BarterRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterRequest
     */
    select?: BarterRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterRequest
     */
    omit?: BarterRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterRequestInclude<ExtArgs> | null
    /**
     * Filter, which BarterRequest to fetch.
     */
    where: BarterRequestWhereUniqueInput
  }

  /**
   * BarterRequest findUniqueOrThrow
   */
  export type BarterRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterRequest
     */
    select?: BarterRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterRequest
     */
    omit?: BarterRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterRequestInclude<ExtArgs> | null
    /**
     * Filter, which BarterRequest to fetch.
     */
    where: BarterRequestWhereUniqueInput
  }

  /**
   * BarterRequest findFirst
   */
  export type BarterRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterRequest
     */
    select?: BarterRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterRequest
     */
    omit?: BarterRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterRequestInclude<ExtArgs> | null
    /**
     * Filter, which BarterRequest to fetch.
     */
    where?: BarterRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BarterRequests to fetch.
     */
    orderBy?: BarterRequestOrderByWithRelationInput | BarterRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BarterRequests.
     */
    cursor?: BarterRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BarterRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BarterRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BarterRequests.
     */
    distinct?: BarterRequestScalarFieldEnum | BarterRequestScalarFieldEnum[]
  }

  /**
   * BarterRequest findFirstOrThrow
   */
  export type BarterRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterRequest
     */
    select?: BarterRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterRequest
     */
    omit?: BarterRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterRequestInclude<ExtArgs> | null
    /**
     * Filter, which BarterRequest to fetch.
     */
    where?: BarterRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BarterRequests to fetch.
     */
    orderBy?: BarterRequestOrderByWithRelationInput | BarterRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BarterRequests.
     */
    cursor?: BarterRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BarterRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BarterRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BarterRequests.
     */
    distinct?: BarterRequestScalarFieldEnum | BarterRequestScalarFieldEnum[]
  }

  /**
   * BarterRequest findMany
   */
  export type BarterRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterRequest
     */
    select?: BarterRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterRequest
     */
    omit?: BarterRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterRequestInclude<ExtArgs> | null
    /**
     * Filter, which BarterRequests to fetch.
     */
    where?: BarterRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BarterRequests to fetch.
     */
    orderBy?: BarterRequestOrderByWithRelationInput | BarterRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BarterRequests.
     */
    cursor?: BarterRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BarterRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BarterRequests.
     */
    skip?: number
    distinct?: BarterRequestScalarFieldEnum | BarterRequestScalarFieldEnum[]
  }

  /**
   * BarterRequest create
   */
  export type BarterRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterRequest
     */
    select?: BarterRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterRequest
     */
    omit?: BarterRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a BarterRequest.
     */
    data: XOR<BarterRequestCreateInput, BarterRequestUncheckedCreateInput>
  }

  /**
   * BarterRequest createMany
   */
  export type BarterRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BarterRequests.
     */
    data: BarterRequestCreateManyInput | BarterRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BarterRequest update
   */
  export type BarterRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterRequest
     */
    select?: BarterRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterRequest
     */
    omit?: BarterRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a BarterRequest.
     */
    data: XOR<BarterRequestUpdateInput, BarterRequestUncheckedUpdateInput>
    /**
     * Choose, which BarterRequest to update.
     */
    where: BarterRequestWhereUniqueInput
  }

  /**
   * BarterRequest updateMany
   */
  export type BarterRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BarterRequests.
     */
    data: XOR<BarterRequestUpdateManyMutationInput, BarterRequestUncheckedUpdateManyInput>
    /**
     * Filter which BarterRequests to update
     */
    where?: BarterRequestWhereInput
    /**
     * Limit how many BarterRequests to update.
     */
    limit?: number
  }

  /**
   * BarterRequest upsert
   */
  export type BarterRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterRequest
     */
    select?: BarterRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterRequest
     */
    omit?: BarterRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the BarterRequest to update in case it exists.
     */
    where: BarterRequestWhereUniqueInput
    /**
     * In case the BarterRequest found by the `where` argument doesn't exist, create a new BarterRequest with this data.
     */
    create: XOR<BarterRequestCreateInput, BarterRequestUncheckedCreateInput>
    /**
     * In case the BarterRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BarterRequestUpdateInput, BarterRequestUncheckedUpdateInput>
  }

  /**
   * BarterRequest delete
   */
  export type BarterRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterRequest
     */
    select?: BarterRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterRequest
     */
    omit?: BarterRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterRequestInclude<ExtArgs> | null
    /**
     * Filter which BarterRequest to delete.
     */
    where: BarterRequestWhereUniqueInput
  }

  /**
   * BarterRequest deleteMany
   */
  export type BarterRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BarterRequests to delete
     */
    where?: BarterRequestWhereInput
    /**
     * Limit how many BarterRequests to delete.
     */
    limit?: number
  }

  /**
   * BarterRequest.barterNegotiations
   */
  export type BarterRequest$barterNegotiationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterNegotiation
     */
    select?: BarterNegotiationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterNegotiation
     */
    omit?: BarterNegotiationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterNegotiationInclude<ExtArgs> | null
    where?: BarterNegotiationWhereInput
    orderBy?: BarterNegotiationOrderByWithRelationInput | BarterNegotiationOrderByWithRelationInput[]
    cursor?: BarterNegotiationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BarterNegotiationScalarFieldEnum | BarterNegotiationScalarFieldEnum[]
  }

  /**
   * BarterRequest without action
   */
  export type BarterRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterRequest
     */
    select?: BarterRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterRequest
     */
    omit?: BarterRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterRequestInclude<ExtArgs> | null
  }


  /**
   * Model BarterNegotiation
   */

  export type AggregateBarterNegotiation = {
    _count: BarterNegotiationCountAggregateOutputType | null
    _avg: BarterNegotiationAvgAggregateOutputType | null
    _sum: BarterNegotiationSumAggregateOutputType | null
    _min: BarterNegotiationMinAggregateOutputType | null
    _max: BarterNegotiationMaxAggregateOutputType | null
  }

  export type BarterNegotiationAvgAggregateOutputType = {
    id: number | null
    barterRequestId: number | null
    senderId: number | null
  }

  export type BarterNegotiationSumAggregateOutputType = {
    id: number | null
    barterRequestId: number | null
    senderId: number | null
  }

  export type BarterNegotiationMinAggregateOutputType = {
    id: number | null
    barterRequestId: number | null
    senderId: number | null
    message: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type BarterNegotiationMaxAggregateOutputType = {
    id: number | null
    barterRequestId: number | null
    senderId: number | null
    message: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type BarterNegotiationCountAggregateOutputType = {
    id: number
    barterRequestId: number
    senderId: number
    message: number
    isRead: number
    createdAt: number
    _all: number
  }


  export type BarterNegotiationAvgAggregateInputType = {
    id?: true
    barterRequestId?: true
    senderId?: true
  }

  export type BarterNegotiationSumAggregateInputType = {
    id?: true
    barterRequestId?: true
    senderId?: true
  }

  export type BarterNegotiationMinAggregateInputType = {
    id?: true
    barterRequestId?: true
    senderId?: true
    message?: true
    isRead?: true
    createdAt?: true
  }

  export type BarterNegotiationMaxAggregateInputType = {
    id?: true
    barterRequestId?: true
    senderId?: true
    message?: true
    isRead?: true
    createdAt?: true
  }

  export type BarterNegotiationCountAggregateInputType = {
    id?: true
    barterRequestId?: true
    senderId?: true
    message?: true
    isRead?: true
    createdAt?: true
    _all?: true
  }

  export type BarterNegotiationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BarterNegotiation to aggregate.
     */
    where?: BarterNegotiationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BarterNegotiations to fetch.
     */
    orderBy?: BarterNegotiationOrderByWithRelationInput | BarterNegotiationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BarterNegotiationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BarterNegotiations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BarterNegotiations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BarterNegotiations
    **/
    _count?: true | BarterNegotiationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BarterNegotiationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BarterNegotiationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BarterNegotiationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BarterNegotiationMaxAggregateInputType
  }

  export type GetBarterNegotiationAggregateType<T extends BarterNegotiationAggregateArgs> = {
        [P in keyof T & keyof AggregateBarterNegotiation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBarterNegotiation[P]>
      : GetScalarType<T[P], AggregateBarterNegotiation[P]>
  }




  export type BarterNegotiationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BarterNegotiationWhereInput
    orderBy?: BarterNegotiationOrderByWithAggregationInput | BarterNegotiationOrderByWithAggregationInput[]
    by: BarterNegotiationScalarFieldEnum[] | BarterNegotiationScalarFieldEnum
    having?: BarterNegotiationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BarterNegotiationCountAggregateInputType | true
    _avg?: BarterNegotiationAvgAggregateInputType
    _sum?: BarterNegotiationSumAggregateInputType
    _min?: BarterNegotiationMinAggregateInputType
    _max?: BarterNegotiationMaxAggregateInputType
  }

  export type BarterNegotiationGroupByOutputType = {
    id: number
    barterRequestId: number
    senderId: number
    message: string
    isRead: boolean
    createdAt: Date
    _count: BarterNegotiationCountAggregateOutputType | null
    _avg: BarterNegotiationAvgAggregateOutputType | null
    _sum: BarterNegotiationSumAggregateOutputType | null
    _min: BarterNegotiationMinAggregateOutputType | null
    _max: BarterNegotiationMaxAggregateOutputType | null
  }

  type GetBarterNegotiationGroupByPayload<T extends BarterNegotiationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BarterNegotiationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BarterNegotiationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BarterNegotiationGroupByOutputType[P]>
            : GetScalarType<T[P], BarterNegotiationGroupByOutputType[P]>
        }
      >
    >


  export type BarterNegotiationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    barterRequestId?: boolean
    senderId?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
    barterRequest?: boolean | BarterRequestDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["barterNegotiation"]>



  export type BarterNegotiationSelectScalar = {
    id?: boolean
    barterRequestId?: boolean
    senderId?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
  }

  export type BarterNegotiationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "barterRequestId" | "senderId" | "message" | "isRead" | "createdAt", ExtArgs["result"]["barterNegotiation"]>
  export type BarterNegotiationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    barterRequest?: boolean | BarterRequestDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BarterNegotiationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BarterNegotiation"
    objects: {
      barterRequest: Prisma.$BarterRequestPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      barterRequestId: number
      senderId: number
      message: string
      isRead: boolean
      createdAt: Date
    }, ExtArgs["result"]["barterNegotiation"]>
    composites: {}
  }

  type BarterNegotiationGetPayload<S extends boolean | null | undefined | BarterNegotiationDefaultArgs> = $Result.GetResult<Prisma.$BarterNegotiationPayload, S>

  type BarterNegotiationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BarterNegotiationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BarterNegotiationCountAggregateInputType | true
    }

  export interface BarterNegotiationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BarterNegotiation'], meta: { name: 'BarterNegotiation' } }
    /**
     * Find zero or one BarterNegotiation that matches the filter.
     * @param {BarterNegotiationFindUniqueArgs} args - Arguments to find a BarterNegotiation
     * @example
     * // Get one BarterNegotiation
     * const barterNegotiation = await prisma.barterNegotiation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BarterNegotiationFindUniqueArgs>(args: SelectSubset<T, BarterNegotiationFindUniqueArgs<ExtArgs>>): Prisma__BarterNegotiationClient<$Result.GetResult<Prisma.$BarterNegotiationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BarterNegotiation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BarterNegotiationFindUniqueOrThrowArgs} args - Arguments to find a BarterNegotiation
     * @example
     * // Get one BarterNegotiation
     * const barterNegotiation = await prisma.barterNegotiation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BarterNegotiationFindUniqueOrThrowArgs>(args: SelectSubset<T, BarterNegotiationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BarterNegotiationClient<$Result.GetResult<Prisma.$BarterNegotiationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BarterNegotiation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarterNegotiationFindFirstArgs} args - Arguments to find a BarterNegotiation
     * @example
     * // Get one BarterNegotiation
     * const barterNegotiation = await prisma.barterNegotiation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BarterNegotiationFindFirstArgs>(args?: SelectSubset<T, BarterNegotiationFindFirstArgs<ExtArgs>>): Prisma__BarterNegotiationClient<$Result.GetResult<Prisma.$BarterNegotiationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BarterNegotiation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarterNegotiationFindFirstOrThrowArgs} args - Arguments to find a BarterNegotiation
     * @example
     * // Get one BarterNegotiation
     * const barterNegotiation = await prisma.barterNegotiation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BarterNegotiationFindFirstOrThrowArgs>(args?: SelectSubset<T, BarterNegotiationFindFirstOrThrowArgs<ExtArgs>>): Prisma__BarterNegotiationClient<$Result.GetResult<Prisma.$BarterNegotiationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BarterNegotiations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarterNegotiationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BarterNegotiations
     * const barterNegotiations = await prisma.barterNegotiation.findMany()
     * 
     * // Get first 10 BarterNegotiations
     * const barterNegotiations = await prisma.barterNegotiation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const barterNegotiationWithIdOnly = await prisma.barterNegotiation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BarterNegotiationFindManyArgs>(args?: SelectSubset<T, BarterNegotiationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BarterNegotiationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BarterNegotiation.
     * @param {BarterNegotiationCreateArgs} args - Arguments to create a BarterNegotiation.
     * @example
     * // Create one BarterNegotiation
     * const BarterNegotiation = await prisma.barterNegotiation.create({
     *   data: {
     *     // ... data to create a BarterNegotiation
     *   }
     * })
     * 
     */
    create<T extends BarterNegotiationCreateArgs>(args: SelectSubset<T, BarterNegotiationCreateArgs<ExtArgs>>): Prisma__BarterNegotiationClient<$Result.GetResult<Prisma.$BarterNegotiationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BarterNegotiations.
     * @param {BarterNegotiationCreateManyArgs} args - Arguments to create many BarterNegotiations.
     * @example
     * // Create many BarterNegotiations
     * const barterNegotiation = await prisma.barterNegotiation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BarterNegotiationCreateManyArgs>(args?: SelectSubset<T, BarterNegotiationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BarterNegotiation.
     * @param {BarterNegotiationDeleteArgs} args - Arguments to delete one BarterNegotiation.
     * @example
     * // Delete one BarterNegotiation
     * const BarterNegotiation = await prisma.barterNegotiation.delete({
     *   where: {
     *     // ... filter to delete one BarterNegotiation
     *   }
     * })
     * 
     */
    delete<T extends BarterNegotiationDeleteArgs>(args: SelectSubset<T, BarterNegotiationDeleteArgs<ExtArgs>>): Prisma__BarterNegotiationClient<$Result.GetResult<Prisma.$BarterNegotiationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BarterNegotiation.
     * @param {BarterNegotiationUpdateArgs} args - Arguments to update one BarterNegotiation.
     * @example
     * // Update one BarterNegotiation
     * const barterNegotiation = await prisma.barterNegotiation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BarterNegotiationUpdateArgs>(args: SelectSubset<T, BarterNegotiationUpdateArgs<ExtArgs>>): Prisma__BarterNegotiationClient<$Result.GetResult<Prisma.$BarterNegotiationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BarterNegotiations.
     * @param {BarterNegotiationDeleteManyArgs} args - Arguments to filter BarterNegotiations to delete.
     * @example
     * // Delete a few BarterNegotiations
     * const { count } = await prisma.barterNegotiation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BarterNegotiationDeleteManyArgs>(args?: SelectSubset<T, BarterNegotiationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BarterNegotiations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarterNegotiationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BarterNegotiations
     * const barterNegotiation = await prisma.barterNegotiation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BarterNegotiationUpdateManyArgs>(args: SelectSubset<T, BarterNegotiationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BarterNegotiation.
     * @param {BarterNegotiationUpsertArgs} args - Arguments to update or create a BarterNegotiation.
     * @example
     * // Update or create a BarterNegotiation
     * const barterNegotiation = await prisma.barterNegotiation.upsert({
     *   create: {
     *     // ... data to create a BarterNegotiation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BarterNegotiation we want to update
     *   }
     * })
     */
    upsert<T extends BarterNegotiationUpsertArgs>(args: SelectSubset<T, BarterNegotiationUpsertArgs<ExtArgs>>): Prisma__BarterNegotiationClient<$Result.GetResult<Prisma.$BarterNegotiationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BarterNegotiations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarterNegotiationCountArgs} args - Arguments to filter BarterNegotiations to count.
     * @example
     * // Count the number of BarterNegotiations
     * const count = await prisma.barterNegotiation.count({
     *   where: {
     *     // ... the filter for the BarterNegotiations we want to count
     *   }
     * })
    **/
    count<T extends BarterNegotiationCountArgs>(
      args?: Subset<T, BarterNegotiationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BarterNegotiationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BarterNegotiation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarterNegotiationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BarterNegotiationAggregateArgs>(args: Subset<T, BarterNegotiationAggregateArgs>): Prisma.PrismaPromise<GetBarterNegotiationAggregateType<T>>

    /**
     * Group by BarterNegotiation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BarterNegotiationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BarterNegotiationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BarterNegotiationGroupByArgs['orderBy'] }
        : { orderBy?: BarterNegotiationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BarterNegotiationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBarterNegotiationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BarterNegotiation model
   */
  readonly fields: BarterNegotiationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BarterNegotiation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BarterNegotiationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    barterRequest<T extends BarterRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BarterRequestDefaultArgs<ExtArgs>>): Prisma__BarterRequestClient<$Result.GetResult<Prisma.$BarterRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BarterNegotiation model
   */
  interface BarterNegotiationFieldRefs {
    readonly id: FieldRef<"BarterNegotiation", 'Int'>
    readonly barterRequestId: FieldRef<"BarterNegotiation", 'Int'>
    readonly senderId: FieldRef<"BarterNegotiation", 'Int'>
    readonly message: FieldRef<"BarterNegotiation", 'String'>
    readonly isRead: FieldRef<"BarterNegotiation", 'Boolean'>
    readonly createdAt: FieldRef<"BarterNegotiation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BarterNegotiation findUnique
   */
  export type BarterNegotiationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterNegotiation
     */
    select?: BarterNegotiationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterNegotiation
     */
    omit?: BarterNegotiationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterNegotiationInclude<ExtArgs> | null
    /**
     * Filter, which BarterNegotiation to fetch.
     */
    where: BarterNegotiationWhereUniqueInput
  }

  /**
   * BarterNegotiation findUniqueOrThrow
   */
  export type BarterNegotiationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterNegotiation
     */
    select?: BarterNegotiationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterNegotiation
     */
    omit?: BarterNegotiationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterNegotiationInclude<ExtArgs> | null
    /**
     * Filter, which BarterNegotiation to fetch.
     */
    where: BarterNegotiationWhereUniqueInput
  }

  /**
   * BarterNegotiation findFirst
   */
  export type BarterNegotiationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterNegotiation
     */
    select?: BarterNegotiationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterNegotiation
     */
    omit?: BarterNegotiationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterNegotiationInclude<ExtArgs> | null
    /**
     * Filter, which BarterNegotiation to fetch.
     */
    where?: BarterNegotiationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BarterNegotiations to fetch.
     */
    orderBy?: BarterNegotiationOrderByWithRelationInput | BarterNegotiationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BarterNegotiations.
     */
    cursor?: BarterNegotiationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BarterNegotiations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BarterNegotiations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BarterNegotiations.
     */
    distinct?: BarterNegotiationScalarFieldEnum | BarterNegotiationScalarFieldEnum[]
  }

  /**
   * BarterNegotiation findFirstOrThrow
   */
  export type BarterNegotiationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterNegotiation
     */
    select?: BarterNegotiationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterNegotiation
     */
    omit?: BarterNegotiationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterNegotiationInclude<ExtArgs> | null
    /**
     * Filter, which BarterNegotiation to fetch.
     */
    where?: BarterNegotiationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BarterNegotiations to fetch.
     */
    orderBy?: BarterNegotiationOrderByWithRelationInput | BarterNegotiationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BarterNegotiations.
     */
    cursor?: BarterNegotiationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BarterNegotiations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BarterNegotiations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BarterNegotiations.
     */
    distinct?: BarterNegotiationScalarFieldEnum | BarterNegotiationScalarFieldEnum[]
  }

  /**
   * BarterNegotiation findMany
   */
  export type BarterNegotiationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterNegotiation
     */
    select?: BarterNegotiationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterNegotiation
     */
    omit?: BarterNegotiationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterNegotiationInclude<ExtArgs> | null
    /**
     * Filter, which BarterNegotiations to fetch.
     */
    where?: BarterNegotiationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BarterNegotiations to fetch.
     */
    orderBy?: BarterNegotiationOrderByWithRelationInput | BarterNegotiationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BarterNegotiations.
     */
    cursor?: BarterNegotiationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BarterNegotiations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BarterNegotiations.
     */
    skip?: number
    distinct?: BarterNegotiationScalarFieldEnum | BarterNegotiationScalarFieldEnum[]
  }

  /**
   * BarterNegotiation create
   */
  export type BarterNegotiationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterNegotiation
     */
    select?: BarterNegotiationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterNegotiation
     */
    omit?: BarterNegotiationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterNegotiationInclude<ExtArgs> | null
    /**
     * The data needed to create a BarterNegotiation.
     */
    data: XOR<BarterNegotiationCreateInput, BarterNegotiationUncheckedCreateInput>
  }

  /**
   * BarterNegotiation createMany
   */
  export type BarterNegotiationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BarterNegotiations.
     */
    data: BarterNegotiationCreateManyInput | BarterNegotiationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BarterNegotiation update
   */
  export type BarterNegotiationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterNegotiation
     */
    select?: BarterNegotiationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterNegotiation
     */
    omit?: BarterNegotiationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterNegotiationInclude<ExtArgs> | null
    /**
     * The data needed to update a BarterNegotiation.
     */
    data: XOR<BarterNegotiationUpdateInput, BarterNegotiationUncheckedUpdateInput>
    /**
     * Choose, which BarterNegotiation to update.
     */
    where: BarterNegotiationWhereUniqueInput
  }

  /**
   * BarterNegotiation updateMany
   */
  export type BarterNegotiationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BarterNegotiations.
     */
    data: XOR<BarterNegotiationUpdateManyMutationInput, BarterNegotiationUncheckedUpdateManyInput>
    /**
     * Filter which BarterNegotiations to update
     */
    where?: BarterNegotiationWhereInput
    /**
     * Limit how many BarterNegotiations to update.
     */
    limit?: number
  }

  /**
   * BarterNegotiation upsert
   */
  export type BarterNegotiationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterNegotiation
     */
    select?: BarterNegotiationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterNegotiation
     */
    omit?: BarterNegotiationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterNegotiationInclude<ExtArgs> | null
    /**
     * The filter to search for the BarterNegotiation to update in case it exists.
     */
    where: BarterNegotiationWhereUniqueInput
    /**
     * In case the BarterNegotiation found by the `where` argument doesn't exist, create a new BarterNegotiation with this data.
     */
    create: XOR<BarterNegotiationCreateInput, BarterNegotiationUncheckedCreateInput>
    /**
     * In case the BarterNegotiation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BarterNegotiationUpdateInput, BarterNegotiationUncheckedUpdateInput>
  }

  /**
   * BarterNegotiation delete
   */
  export type BarterNegotiationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterNegotiation
     */
    select?: BarterNegotiationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterNegotiation
     */
    omit?: BarterNegotiationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterNegotiationInclude<ExtArgs> | null
    /**
     * Filter which BarterNegotiation to delete.
     */
    where: BarterNegotiationWhereUniqueInput
  }

  /**
   * BarterNegotiation deleteMany
   */
  export type BarterNegotiationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BarterNegotiations to delete
     */
    where?: BarterNegotiationWhereInput
    /**
     * Limit how many BarterNegotiations to delete.
     */
    limit?: number
  }

  /**
   * BarterNegotiation without action
   */
  export type BarterNegotiationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BarterNegotiation
     */
    select?: BarterNegotiationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BarterNegotiation
     */
    omit?: BarterNegotiationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BarterNegotiationInclude<ExtArgs> | null
  }


  /**
   * Model WtbRequest
   */

  export type AggregateWtbRequest = {
    _count: WtbRequestCountAggregateOutputType | null
    _avg: WtbRequestAvgAggregateOutputType | null
    _sum: WtbRequestSumAggregateOutputType | null
    _min: WtbRequestMinAggregateOutputType | null
    _max: WtbRequestMaxAggregateOutputType | null
  }

  export type WtbRequestAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    maxPrice: Decimal | null
  }

  export type WtbRequestSumAggregateOutputType = {
    id: number | null
    userId: number | null
    maxPrice: Decimal | null
  }

  export type WtbRequestMinAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    description: string | null
    maxPrice: Decimal | null
    category: string | null
    preferredCondition: string | null
    location: string | null
    urgency: $Enums.WtbUrgency | null
    isActive: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WtbRequestMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    description: string | null
    maxPrice: Decimal | null
    category: string | null
    preferredCondition: string | null
    location: string | null
    urgency: $Enums.WtbUrgency | null
    isActive: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WtbRequestCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    description: number
    maxPrice: number
    category: number
    preferredCondition: number
    location: number
    urgency: number
    isActive: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WtbRequestAvgAggregateInputType = {
    id?: true
    userId?: true
    maxPrice?: true
  }

  export type WtbRequestSumAggregateInputType = {
    id?: true
    userId?: true
    maxPrice?: true
  }

  export type WtbRequestMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    maxPrice?: true
    category?: true
    preferredCondition?: true
    location?: true
    urgency?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WtbRequestMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    maxPrice?: true
    category?: true
    preferredCondition?: true
    location?: true
    urgency?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WtbRequestCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    maxPrice?: true
    category?: true
    preferredCondition?: true
    location?: true
    urgency?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WtbRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WtbRequest to aggregate.
     */
    where?: WtbRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WtbRequests to fetch.
     */
    orderBy?: WtbRequestOrderByWithRelationInput | WtbRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WtbRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WtbRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WtbRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WtbRequests
    **/
    _count?: true | WtbRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WtbRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WtbRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WtbRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WtbRequestMaxAggregateInputType
  }

  export type GetWtbRequestAggregateType<T extends WtbRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateWtbRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWtbRequest[P]>
      : GetScalarType<T[P], AggregateWtbRequest[P]>
  }




  export type WtbRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WtbRequestWhereInput
    orderBy?: WtbRequestOrderByWithAggregationInput | WtbRequestOrderByWithAggregationInput[]
    by: WtbRequestScalarFieldEnum[] | WtbRequestScalarFieldEnum
    having?: WtbRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WtbRequestCountAggregateInputType | true
    _avg?: WtbRequestAvgAggregateInputType
    _sum?: WtbRequestSumAggregateInputType
    _min?: WtbRequestMinAggregateInputType
    _max?: WtbRequestMaxAggregateInputType
  }

  export type WtbRequestGroupByOutputType = {
    id: number
    userId: number
    title: string
    description: string
    maxPrice: Decimal | null
    category: string | null
    preferredCondition: string | null
    location: string | null
    urgency: $Enums.WtbUrgency
    isActive: boolean
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: WtbRequestCountAggregateOutputType | null
    _avg: WtbRequestAvgAggregateOutputType | null
    _sum: WtbRequestSumAggregateOutputType | null
    _min: WtbRequestMinAggregateOutputType | null
    _max: WtbRequestMaxAggregateOutputType | null
  }

  type GetWtbRequestGroupByPayload<T extends WtbRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WtbRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WtbRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WtbRequestGroupByOutputType[P]>
            : GetScalarType<T[P], WtbRequestGroupByOutputType[P]>
        }
      >
    >


  export type WtbRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    maxPrice?: boolean
    category?: boolean
    preferredCondition?: boolean
    location?: boolean
    urgency?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    wtbResponses?: boolean | WtbRequest$wtbResponsesArgs<ExtArgs>
    _count?: boolean | WtbRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wtbRequest"]>



  export type WtbRequestSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    maxPrice?: boolean
    category?: boolean
    preferredCondition?: boolean
    location?: boolean
    urgency?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WtbRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "description" | "maxPrice" | "category" | "preferredCondition" | "location" | "urgency" | "isActive" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["wtbRequest"]>
  export type WtbRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    wtbResponses?: boolean | WtbRequest$wtbResponsesArgs<ExtArgs>
    _count?: boolean | WtbRequestCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $WtbRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WtbRequest"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      wtbResponses: Prisma.$WtbResponsePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      title: string
      description: string
      maxPrice: Prisma.Decimal | null
      category: string | null
      preferredCondition: string | null
      location: string | null
      urgency: $Enums.WtbUrgency
      isActive: boolean
      expiresAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["wtbRequest"]>
    composites: {}
  }

  type WtbRequestGetPayload<S extends boolean | null | undefined | WtbRequestDefaultArgs> = $Result.GetResult<Prisma.$WtbRequestPayload, S>

  type WtbRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WtbRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WtbRequestCountAggregateInputType | true
    }

  export interface WtbRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WtbRequest'], meta: { name: 'WtbRequest' } }
    /**
     * Find zero or one WtbRequest that matches the filter.
     * @param {WtbRequestFindUniqueArgs} args - Arguments to find a WtbRequest
     * @example
     * // Get one WtbRequest
     * const wtbRequest = await prisma.wtbRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WtbRequestFindUniqueArgs>(args: SelectSubset<T, WtbRequestFindUniqueArgs<ExtArgs>>): Prisma__WtbRequestClient<$Result.GetResult<Prisma.$WtbRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WtbRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WtbRequestFindUniqueOrThrowArgs} args - Arguments to find a WtbRequest
     * @example
     * // Get one WtbRequest
     * const wtbRequest = await prisma.wtbRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WtbRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, WtbRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WtbRequestClient<$Result.GetResult<Prisma.$WtbRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WtbRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WtbRequestFindFirstArgs} args - Arguments to find a WtbRequest
     * @example
     * // Get one WtbRequest
     * const wtbRequest = await prisma.wtbRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WtbRequestFindFirstArgs>(args?: SelectSubset<T, WtbRequestFindFirstArgs<ExtArgs>>): Prisma__WtbRequestClient<$Result.GetResult<Prisma.$WtbRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WtbRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WtbRequestFindFirstOrThrowArgs} args - Arguments to find a WtbRequest
     * @example
     * // Get one WtbRequest
     * const wtbRequest = await prisma.wtbRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WtbRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, WtbRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__WtbRequestClient<$Result.GetResult<Prisma.$WtbRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WtbRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WtbRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WtbRequests
     * const wtbRequests = await prisma.wtbRequest.findMany()
     * 
     * // Get first 10 WtbRequests
     * const wtbRequests = await prisma.wtbRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wtbRequestWithIdOnly = await prisma.wtbRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WtbRequestFindManyArgs>(args?: SelectSubset<T, WtbRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WtbRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WtbRequest.
     * @param {WtbRequestCreateArgs} args - Arguments to create a WtbRequest.
     * @example
     * // Create one WtbRequest
     * const WtbRequest = await prisma.wtbRequest.create({
     *   data: {
     *     // ... data to create a WtbRequest
     *   }
     * })
     * 
     */
    create<T extends WtbRequestCreateArgs>(args: SelectSubset<T, WtbRequestCreateArgs<ExtArgs>>): Prisma__WtbRequestClient<$Result.GetResult<Prisma.$WtbRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WtbRequests.
     * @param {WtbRequestCreateManyArgs} args - Arguments to create many WtbRequests.
     * @example
     * // Create many WtbRequests
     * const wtbRequest = await prisma.wtbRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WtbRequestCreateManyArgs>(args?: SelectSubset<T, WtbRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WtbRequest.
     * @param {WtbRequestDeleteArgs} args - Arguments to delete one WtbRequest.
     * @example
     * // Delete one WtbRequest
     * const WtbRequest = await prisma.wtbRequest.delete({
     *   where: {
     *     // ... filter to delete one WtbRequest
     *   }
     * })
     * 
     */
    delete<T extends WtbRequestDeleteArgs>(args: SelectSubset<T, WtbRequestDeleteArgs<ExtArgs>>): Prisma__WtbRequestClient<$Result.GetResult<Prisma.$WtbRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WtbRequest.
     * @param {WtbRequestUpdateArgs} args - Arguments to update one WtbRequest.
     * @example
     * // Update one WtbRequest
     * const wtbRequest = await prisma.wtbRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WtbRequestUpdateArgs>(args: SelectSubset<T, WtbRequestUpdateArgs<ExtArgs>>): Prisma__WtbRequestClient<$Result.GetResult<Prisma.$WtbRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WtbRequests.
     * @param {WtbRequestDeleteManyArgs} args - Arguments to filter WtbRequests to delete.
     * @example
     * // Delete a few WtbRequests
     * const { count } = await prisma.wtbRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WtbRequestDeleteManyArgs>(args?: SelectSubset<T, WtbRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WtbRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WtbRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WtbRequests
     * const wtbRequest = await prisma.wtbRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WtbRequestUpdateManyArgs>(args: SelectSubset<T, WtbRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WtbRequest.
     * @param {WtbRequestUpsertArgs} args - Arguments to update or create a WtbRequest.
     * @example
     * // Update or create a WtbRequest
     * const wtbRequest = await prisma.wtbRequest.upsert({
     *   create: {
     *     // ... data to create a WtbRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WtbRequest we want to update
     *   }
     * })
     */
    upsert<T extends WtbRequestUpsertArgs>(args: SelectSubset<T, WtbRequestUpsertArgs<ExtArgs>>): Prisma__WtbRequestClient<$Result.GetResult<Prisma.$WtbRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WtbRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WtbRequestCountArgs} args - Arguments to filter WtbRequests to count.
     * @example
     * // Count the number of WtbRequests
     * const count = await prisma.wtbRequest.count({
     *   where: {
     *     // ... the filter for the WtbRequests we want to count
     *   }
     * })
    **/
    count<T extends WtbRequestCountArgs>(
      args?: Subset<T, WtbRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WtbRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WtbRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WtbRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WtbRequestAggregateArgs>(args: Subset<T, WtbRequestAggregateArgs>): Prisma.PrismaPromise<GetWtbRequestAggregateType<T>>

    /**
     * Group by WtbRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WtbRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WtbRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WtbRequestGroupByArgs['orderBy'] }
        : { orderBy?: WtbRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WtbRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWtbRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WtbRequest model
   */
  readonly fields: WtbRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WtbRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WtbRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    wtbResponses<T extends WtbRequest$wtbResponsesArgs<ExtArgs> = {}>(args?: Subset<T, WtbRequest$wtbResponsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WtbResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WtbRequest model
   */
  interface WtbRequestFieldRefs {
    readonly id: FieldRef<"WtbRequest", 'Int'>
    readonly userId: FieldRef<"WtbRequest", 'Int'>
    readonly title: FieldRef<"WtbRequest", 'String'>
    readonly description: FieldRef<"WtbRequest", 'String'>
    readonly maxPrice: FieldRef<"WtbRequest", 'Decimal'>
    readonly category: FieldRef<"WtbRequest", 'String'>
    readonly preferredCondition: FieldRef<"WtbRequest", 'String'>
    readonly location: FieldRef<"WtbRequest", 'String'>
    readonly urgency: FieldRef<"WtbRequest", 'WtbUrgency'>
    readonly isActive: FieldRef<"WtbRequest", 'Boolean'>
    readonly expiresAt: FieldRef<"WtbRequest", 'DateTime'>
    readonly createdAt: FieldRef<"WtbRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"WtbRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WtbRequest findUnique
   */
  export type WtbRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbRequest
     */
    select?: WtbRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbRequest
     */
    omit?: WtbRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbRequestInclude<ExtArgs> | null
    /**
     * Filter, which WtbRequest to fetch.
     */
    where: WtbRequestWhereUniqueInput
  }

  /**
   * WtbRequest findUniqueOrThrow
   */
  export type WtbRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbRequest
     */
    select?: WtbRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbRequest
     */
    omit?: WtbRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbRequestInclude<ExtArgs> | null
    /**
     * Filter, which WtbRequest to fetch.
     */
    where: WtbRequestWhereUniqueInput
  }

  /**
   * WtbRequest findFirst
   */
  export type WtbRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbRequest
     */
    select?: WtbRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbRequest
     */
    omit?: WtbRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbRequestInclude<ExtArgs> | null
    /**
     * Filter, which WtbRequest to fetch.
     */
    where?: WtbRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WtbRequests to fetch.
     */
    orderBy?: WtbRequestOrderByWithRelationInput | WtbRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WtbRequests.
     */
    cursor?: WtbRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WtbRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WtbRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WtbRequests.
     */
    distinct?: WtbRequestScalarFieldEnum | WtbRequestScalarFieldEnum[]
  }

  /**
   * WtbRequest findFirstOrThrow
   */
  export type WtbRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbRequest
     */
    select?: WtbRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbRequest
     */
    omit?: WtbRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbRequestInclude<ExtArgs> | null
    /**
     * Filter, which WtbRequest to fetch.
     */
    where?: WtbRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WtbRequests to fetch.
     */
    orderBy?: WtbRequestOrderByWithRelationInput | WtbRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WtbRequests.
     */
    cursor?: WtbRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WtbRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WtbRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WtbRequests.
     */
    distinct?: WtbRequestScalarFieldEnum | WtbRequestScalarFieldEnum[]
  }

  /**
   * WtbRequest findMany
   */
  export type WtbRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbRequest
     */
    select?: WtbRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbRequest
     */
    omit?: WtbRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbRequestInclude<ExtArgs> | null
    /**
     * Filter, which WtbRequests to fetch.
     */
    where?: WtbRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WtbRequests to fetch.
     */
    orderBy?: WtbRequestOrderByWithRelationInput | WtbRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WtbRequests.
     */
    cursor?: WtbRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WtbRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WtbRequests.
     */
    skip?: number
    distinct?: WtbRequestScalarFieldEnum | WtbRequestScalarFieldEnum[]
  }

  /**
   * WtbRequest create
   */
  export type WtbRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbRequest
     */
    select?: WtbRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbRequest
     */
    omit?: WtbRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a WtbRequest.
     */
    data: XOR<WtbRequestCreateInput, WtbRequestUncheckedCreateInput>
  }

  /**
   * WtbRequest createMany
   */
  export type WtbRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WtbRequests.
     */
    data: WtbRequestCreateManyInput | WtbRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WtbRequest update
   */
  export type WtbRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbRequest
     */
    select?: WtbRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbRequest
     */
    omit?: WtbRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a WtbRequest.
     */
    data: XOR<WtbRequestUpdateInput, WtbRequestUncheckedUpdateInput>
    /**
     * Choose, which WtbRequest to update.
     */
    where: WtbRequestWhereUniqueInput
  }

  /**
   * WtbRequest updateMany
   */
  export type WtbRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WtbRequests.
     */
    data: XOR<WtbRequestUpdateManyMutationInput, WtbRequestUncheckedUpdateManyInput>
    /**
     * Filter which WtbRequests to update
     */
    where?: WtbRequestWhereInput
    /**
     * Limit how many WtbRequests to update.
     */
    limit?: number
  }

  /**
   * WtbRequest upsert
   */
  export type WtbRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbRequest
     */
    select?: WtbRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbRequest
     */
    omit?: WtbRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the WtbRequest to update in case it exists.
     */
    where: WtbRequestWhereUniqueInput
    /**
     * In case the WtbRequest found by the `where` argument doesn't exist, create a new WtbRequest with this data.
     */
    create: XOR<WtbRequestCreateInput, WtbRequestUncheckedCreateInput>
    /**
     * In case the WtbRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WtbRequestUpdateInput, WtbRequestUncheckedUpdateInput>
  }

  /**
   * WtbRequest delete
   */
  export type WtbRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbRequest
     */
    select?: WtbRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbRequest
     */
    omit?: WtbRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbRequestInclude<ExtArgs> | null
    /**
     * Filter which WtbRequest to delete.
     */
    where: WtbRequestWhereUniqueInput
  }

  /**
   * WtbRequest deleteMany
   */
  export type WtbRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WtbRequests to delete
     */
    where?: WtbRequestWhereInput
    /**
     * Limit how many WtbRequests to delete.
     */
    limit?: number
  }

  /**
   * WtbRequest.wtbResponses
   */
  export type WtbRequest$wtbResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbResponse
     */
    select?: WtbResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbResponse
     */
    omit?: WtbResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbResponseInclude<ExtArgs> | null
    where?: WtbResponseWhereInput
    orderBy?: WtbResponseOrderByWithRelationInput | WtbResponseOrderByWithRelationInput[]
    cursor?: WtbResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WtbResponseScalarFieldEnum | WtbResponseScalarFieldEnum[]
  }

  /**
   * WtbRequest without action
   */
  export type WtbRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbRequest
     */
    select?: WtbRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbRequest
     */
    omit?: WtbRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbRequestInclude<ExtArgs> | null
  }


  /**
   * Model WtbResponse
   */

  export type AggregateWtbResponse = {
    _count: WtbResponseCountAggregateOutputType | null
    _avg: WtbResponseAvgAggregateOutputType | null
    _sum: WtbResponseSumAggregateOutputType | null
    _min: WtbResponseMinAggregateOutputType | null
    _max: WtbResponseMaxAggregateOutputType | null
  }

  export type WtbResponseAvgAggregateOutputType = {
    id: number | null
    wtbRequestId: number | null
    responderId: number | null
    offeredPrice: Decimal | null
  }

  export type WtbResponseSumAggregateOutputType = {
    id: number | null
    wtbRequestId: number | null
    responderId: number | null
    offeredPrice: Decimal | null
  }

  export type WtbResponseMinAggregateOutputType = {
    id: number | null
    wtbRequestId: number | null
    responderId: number | null
    message: string | null
    offeredPrice: Decimal | null
    itemImages: string | null
    contactInfo: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type WtbResponseMaxAggregateOutputType = {
    id: number | null
    wtbRequestId: number | null
    responderId: number | null
    message: string | null
    offeredPrice: Decimal | null
    itemImages: string | null
    contactInfo: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type WtbResponseCountAggregateOutputType = {
    id: number
    wtbRequestId: number
    responderId: number
    message: number
    offeredPrice: number
    itemImages: number
    contactInfo: number
    isRead: number
    createdAt: number
    _all: number
  }


  export type WtbResponseAvgAggregateInputType = {
    id?: true
    wtbRequestId?: true
    responderId?: true
    offeredPrice?: true
  }

  export type WtbResponseSumAggregateInputType = {
    id?: true
    wtbRequestId?: true
    responderId?: true
    offeredPrice?: true
  }

  export type WtbResponseMinAggregateInputType = {
    id?: true
    wtbRequestId?: true
    responderId?: true
    message?: true
    offeredPrice?: true
    itemImages?: true
    contactInfo?: true
    isRead?: true
    createdAt?: true
  }

  export type WtbResponseMaxAggregateInputType = {
    id?: true
    wtbRequestId?: true
    responderId?: true
    message?: true
    offeredPrice?: true
    itemImages?: true
    contactInfo?: true
    isRead?: true
    createdAt?: true
  }

  export type WtbResponseCountAggregateInputType = {
    id?: true
    wtbRequestId?: true
    responderId?: true
    message?: true
    offeredPrice?: true
    itemImages?: true
    contactInfo?: true
    isRead?: true
    createdAt?: true
    _all?: true
  }

  export type WtbResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WtbResponse to aggregate.
     */
    where?: WtbResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WtbResponses to fetch.
     */
    orderBy?: WtbResponseOrderByWithRelationInput | WtbResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WtbResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WtbResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WtbResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WtbResponses
    **/
    _count?: true | WtbResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WtbResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WtbResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WtbResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WtbResponseMaxAggregateInputType
  }

  export type GetWtbResponseAggregateType<T extends WtbResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateWtbResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWtbResponse[P]>
      : GetScalarType<T[P], AggregateWtbResponse[P]>
  }




  export type WtbResponseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WtbResponseWhereInput
    orderBy?: WtbResponseOrderByWithAggregationInput | WtbResponseOrderByWithAggregationInput[]
    by: WtbResponseScalarFieldEnum[] | WtbResponseScalarFieldEnum
    having?: WtbResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WtbResponseCountAggregateInputType | true
    _avg?: WtbResponseAvgAggregateInputType
    _sum?: WtbResponseSumAggregateInputType
    _min?: WtbResponseMinAggregateInputType
    _max?: WtbResponseMaxAggregateInputType
  }

  export type WtbResponseGroupByOutputType = {
    id: number
    wtbRequestId: number
    responderId: number
    message: string
    offeredPrice: Decimal | null
    itemImages: string | null
    contactInfo: string | null
    isRead: boolean
    createdAt: Date
    _count: WtbResponseCountAggregateOutputType | null
    _avg: WtbResponseAvgAggregateOutputType | null
    _sum: WtbResponseSumAggregateOutputType | null
    _min: WtbResponseMinAggregateOutputType | null
    _max: WtbResponseMaxAggregateOutputType | null
  }

  type GetWtbResponseGroupByPayload<T extends WtbResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WtbResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WtbResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WtbResponseGroupByOutputType[P]>
            : GetScalarType<T[P], WtbResponseGroupByOutputType[P]>
        }
      >
    >


  export type WtbResponseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wtbRequestId?: boolean
    responderId?: boolean
    message?: boolean
    offeredPrice?: boolean
    itemImages?: boolean
    contactInfo?: boolean
    isRead?: boolean
    createdAt?: boolean
    wtbRequest?: boolean | WtbRequestDefaultArgs<ExtArgs>
    responder?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wtbResponse"]>



  export type WtbResponseSelectScalar = {
    id?: boolean
    wtbRequestId?: boolean
    responderId?: boolean
    message?: boolean
    offeredPrice?: boolean
    itemImages?: boolean
    contactInfo?: boolean
    isRead?: boolean
    createdAt?: boolean
  }

  export type WtbResponseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "wtbRequestId" | "responderId" | "message" | "offeredPrice" | "itemImages" | "contactInfo" | "isRead" | "createdAt", ExtArgs["result"]["wtbResponse"]>
  export type WtbResponseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wtbRequest?: boolean | WtbRequestDefaultArgs<ExtArgs>
    responder?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WtbResponsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WtbResponse"
    objects: {
      wtbRequest: Prisma.$WtbRequestPayload<ExtArgs>
      responder: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      wtbRequestId: number
      responderId: number
      message: string
      offeredPrice: Prisma.Decimal | null
      itemImages: string | null
      contactInfo: string | null
      isRead: boolean
      createdAt: Date
    }, ExtArgs["result"]["wtbResponse"]>
    composites: {}
  }

  type WtbResponseGetPayload<S extends boolean | null | undefined | WtbResponseDefaultArgs> = $Result.GetResult<Prisma.$WtbResponsePayload, S>

  type WtbResponseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WtbResponseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WtbResponseCountAggregateInputType | true
    }

  export interface WtbResponseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WtbResponse'], meta: { name: 'WtbResponse' } }
    /**
     * Find zero or one WtbResponse that matches the filter.
     * @param {WtbResponseFindUniqueArgs} args - Arguments to find a WtbResponse
     * @example
     * // Get one WtbResponse
     * const wtbResponse = await prisma.wtbResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WtbResponseFindUniqueArgs>(args: SelectSubset<T, WtbResponseFindUniqueArgs<ExtArgs>>): Prisma__WtbResponseClient<$Result.GetResult<Prisma.$WtbResponsePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WtbResponse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WtbResponseFindUniqueOrThrowArgs} args - Arguments to find a WtbResponse
     * @example
     * // Get one WtbResponse
     * const wtbResponse = await prisma.wtbResponse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WtbResponseFindUniqueOrThrowArgs>(args: SelectSubset<T, WtbResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WtbResponseClient<$Result.GetResult<Prisma.$WtbResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WtbResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WtbResponseFindFirstArgs} args - Arguments to find a WtbResponse
     * @example
     * // Get one WtbResponse
     * const wtbResponse = await prisma.wtbResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WtbResponseFindFirstArgs>(args?: SelectSubset<T, WtbResponseFindFirstArgs<ExtArgs>>): Prisma__WtbResponseClient<$Result.GetResult<Prisma.$WtbResponsePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WtbResponse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WtbResponseFindFirstOrThrowArgs} args - Arguments to find a WtbResponse
     * @example
     * // Get one WtbResponse
     * const wtbResponse = await prisma.wtbResponse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WtbResponseFindFirstOrThrowArgs>(args?: SelectSubset<T, WtbResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma__WtbResponseClient<$Result.GetResult<Prisma.$WtbResponsePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WtbResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WtbResponseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WtbResponses
     * const wtbResponses = await prisma.wtbResponse.findMany()
     * 
     * // Get first 10 WtbResponses
     * const wtbResponses = await prisma.wtbResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wtbResponseWithIdOnly = await prisma.wtbResponse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WtbResponseFindManyArgs>(args?: SelectSubset<T, WtbResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WtbResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WtbResponse.
     * @param {WtbResponseCreateArgs} args - Arguments to create a WtbResponse.
     * @example
     * // Create one WtbResponse
     * const WtbResponse = await prisma.wtbResponse.create({
     *   data: {
     *     // ... data to create a WtbResponse
     *   }
     * })
     * 
     */
    create<T extends WtbResponseCreateArgs>(args: SelectSubset<T, WtbResponseCreateArgs<ExtArgs>>): Prisma__WtbResponseClient<$Result.GetResult<Prisma.$WtbResponsePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WtbResponses.
     * @param {WtbResponseCreateManyArgs} args - Arguments to create many WtbResponses.
     * @example
     * // Create many WtbResponses
     * const wtbResponse = await prisma.wtbResponse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WtbResponseCreateManyArgs>(args?: SelectSubset<T, WtbResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WtbResponse.
     * @param {WtbResponseDeleteArgs} args - Arguments to delete one WtbResponse.
     * @example
     * // Delete one WtbResponse
     * const WtbResponse = await prisma.wtbResponse.delete({
     *   where: {
     *     // ... filter to delete one WtbResponse
     *   }
     * })
     * 
     */
    delete<T extends WtbResponseDeleteArgs>(args: SelectSubset<T, WtbResponseDeleteArgs<ExtArgs>>): Prisma__WtbResponseClient<$Result.GetResult<Prisma.$WtbResponsePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WtbResponse.
     * @param {WtbResponseUpdateArgs} args - Arguments to update one WtbResponse.
     * @example
     * // Update one WtbResponse
     * const wtbResponse = await prisma.wtbResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WtbResponseUpdateArgs>(args: SelectSubset<T, WtbResponseUpdateArgs<ExtArgs>>): Prisma__WtbResponseClient<$Result.GetResult<Prisma.$WtbResponsePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WtbResponses.
     * @param {WtbResponseDeleteManyArgs} args - Arguments to filter WtbResponses to delete.
     * @example
     * // Delete a few WtbResponses
     * const { count } = await prisma.wtbResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WtbResponseDeleteManyArgs>(args?: SelectSubset<T, WtbResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WtbResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WtbResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WtbResponses
     * const wtbResponse = await prisma.wtbResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WtbResponseUpdateManyArgs>(args: SelectSubset<T, WtbResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WtbResponse.
     * @param {WtbResponseUpsertArgs} args - Arguments to update or create a WtbResponse.
     * @example
     * // Update or create a WtbResponse
     * const wtbResponse = await prisma.wtbResponse.upsert({
     *   create: {
     *     // ... data to create a WtbResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WtbResponse we want to update
     *   }
     * })
     */
    upsert<T extends WtbResponseUpsertArgs>(args: SelectSubset<T, WtbResponseUpsertArgs<ExtArgs>>): Prisma__WtbResponseClient<$Result.GetResult<Prisma.$WtbResponsePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WtbResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WtbResponseCountArgs} args - Arguments to filter WtbResponses to count.
     * @example
     * // Count the number of WtbResponses
     * const count = await prisma.wtbResponse.count({
     *   where: {
     *     // ... the filter for the WtbResponses we want to count
     *   }
     * })
    **/
    count<T extends WtbResponseCountArgs>(
      args?: Subset<T, WtbResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WtbResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WtbResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WtbResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WtbResponseAggregateArgs>(args: Subset<T, WtbResponseAggregateArgs>): Prisma.PrismaPromise<GetWtbResponseAggregateType<T>>

    /**
     * Group by WtbResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WtbResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WtbResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WtbResponseGroupByArgs['orderBy'] }
        : { orderBy?: WtbResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WtbResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWtbResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WtbResponse model
   */
  readonly fields: WtbResponseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WtbResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WtbResponseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wtbRequest<T extends WtbRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WtbRequestDefaultArgs<ExtArgs>>): Prisma__WtbRequestClient<$Result.GetResult<Prisma.$WtbRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    responder<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WtbResponse model
   */
  interface WtbResponseFieldRefs {
    readonly id: FieldRef<"WtbResponse", 'Int'>
    readonly wtbRequestId: FieldRef<"WtbResponse", 'Int'>
    readonly responderId: FieldRef<"WtbResponse", 'Int'>
    readonly message: FieldRef<"WtbResponse", 'String'>
    readonly offeredPrice: FieldRef<"WtbResponse", 'Decimal'>
    readonly itemImages: FieldRef<"WtbResponse", 'String'>
    readonly contactInfo: FieldRef<"WtbResponse", 'String'>
    readonly isRead: FieldRef<"WtbResponse", 'Boolean'>
    readonly createdAt: FieldRef<"WtbResponse", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WtbResponse findUnique
   */
  export type WtbResponseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbResponse
     */
    select?: WtbResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbResponse
     */
    omit?: WtbResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbResponseInclude<ExtArgs> | null
    /**
     * Filter, which WtbResponse to fetch.
     */
    where: WtbResponseWhereUniqueInput
  }

  /**
   * WtbResponse findUniqueOrThrow
   */
  export type WtbResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbResponse
     */
    select?: WtbResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbResponse
     */
    omit?: WtbResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbResponseInclude<ExtArgs> | null
    /**
     * Filter, which WtbResponse to fetch.
     */
    where: WtbResponseWhereUniqueInput
  }

  /**
   * WtbResponse findFirst
   */
  export type WtbResponseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbResponse
     */
    select?: WtbResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbResponse
     */
    omit?: WtbResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbResponseInclude<ExtArgs> | null
    /**
     * Filter, which WtbResponse to fetch.
     */
    where?: WtbResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WtbResponses to fetch.
     */
    orderBy?: WtbResponseOrderByWithRelationInput | WtbResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WtbResponses.
     */
    cursor?: WtbResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WtbResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WtbResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WtbResponses.
     */
    distinct?: WtbResponseScalarFieldEnum | WtbResponseScalarFieldEnum[]
  }

  /**
   * WtbResponse findFirstOrThrow
   */
  export type WtbResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbResponse
     */
    select?: WtbResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbResponse
     */
    omit?: WtbResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbResponseInclude<ExtArgs> | null
    /**
     * Filter, which WtbResponse to fetch.
     */
    where?: WtbResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WtbResponses to fetch.
     */
    orderBy?: WtbResponseOrderByWithRelationInput | WtbResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WtbResponses.
     */
    cursor?: WtbResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WtbResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WtbResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WtbResponses.
     */
    distinct?: WtbResponseScalarFieldEnum | WtbResponseScalarFieldEnum[]
  }

  /**
   * WtbResponse findMany
   */
  export type WtbResponseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbResponse
     */
    select?: WtbResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbResponse
     */
    omit?: WtbResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbResponseInclude<ExtArgs> | null
    /**
     * Filter, which WtbResponses to fetch.
     */
    where?: WtbResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WtbResponses to fetch.
     */
    orderBy?: WtbResponseOrderByWithRelationInput | WtbResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WtbResponses.
     */
    cursor?: WtbResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WtbResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WtbResponses.
     */
    skip?: number
    distinct?: WtbResponseScalarFieldEnum | WtbResponseScalarFieldEnum[]
  }

  /**
   * WtbResponse create
   */
  export type WtbResponseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbResponse
     */
    select?: WtbResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbResponse
     */
    omit?: WtbResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a WtbResponse.
     */
    data: XOR<WtbResponseCreateInput, WtbResponseUncheckedCreateInput>
  }

  /**
   * WtbResponse createMany
   */
  export type WtbResponseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WtbResponses.
     */
    data: WtbResponseCreateManyInput | WtbResponseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WtbResponse update
   */
  export type WtbResponseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbResponse
     */
    select?: WtbResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbResponse
     */
    omit?: WtbResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a WtbResponse.
     */
    data: XOR<WtbResponseUpdateInput, WtbResponseUncheckedUpdateInput>
    /**
     * Choose, which WtbResponse to update.
     */
    where: WtbResponseWhereUniqueInput
  }

  /**
   * WtbResponse updateMany
   */
  export type WtbResponseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WtbResponses.
     */
    data: XOR<WtbResponseUpdateManyMutationInput, WtbResponseUncheckedUpdateManyInput>
    /**
     * Filter which WtbResponses to update
     */
    where?: WtbResponseWhereInput
    /**
     * Limit how many WtbResponses to update.
     */
    limit?: number
  }

  /**
   * WtbResponse upsert
   */
  export type WtbResponseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbResponse
     */
    select?: WtbResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbResponse
     */
    omit?: WtbResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the WtbResponse to update in case it exists.
     */
    where: WtbResponseWhereUniqueInput
    /**
     * In case the WtbResponse found by the `where` argument doesn't exist, create a new WtbResponse with this data.
     */
    create: XOR<WtbResponseCreateInput, WtbResponseUncheckedCreateInput>
    /**
     * In case the WtbResponse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WtbResponseUpdateInput, WtbResponseUncheckedUpdateInput>
  }

  /**
   * WtbResponse delete
   */
  export type WtbResponseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbResponse
     */
    select?: WtbResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbResponse
     */
    omit?: WtbResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbResponseInclude<ExtArgs> | null
    /**
     * Filter which WtbResponse to delete.
     */
    where: WtbResponseWhereUniqueInput
  }

  /**
   * WtbResponse deleteMany
   */
  export type WtbResponseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WtbResponses to delete
     */
    where?: WtbResponseWhereInput
    /**
     * Limit how many WtbResponses to delete.
     */
    limit?: number
  }

  /**
   * WtbResponse without action
   */
  export type WtbResponseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WtbResponse
     */
    select?: WtbResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WtbResponse
     */
    omit?: WtbResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WtbResponseInclude<ExtArgs> | null
  }


  /**
   * Model Wishlist
   */

  export type AggregateWishlist = {
    _count: WishlistCountAggregateOutputType | null
    _avg: WishlistAvgAggregateOutputType | null
    _sum: WishlistSumAggregateOutputType | null
    _min: WishlistMinAggregateOutputType | null
    _max: WishlistMaxAggregateOutputType | null
  }

  export type WishlistAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
  }

  export type WishlistSumAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
  }

  export type WishlistMinAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
    createdAt: Date | null
  }

  export type WishlistMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
    createdAt: Date | null
  }

  export type WishlistCountAggregateOutputType = {
    id: number
    userId: number
    itemId: number
    createdAt: number
    _all: number
  }


  export type WishlistAvgAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
  }

  export type WishlistSumAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
  }

  export type WishlistMinAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    createdAt?: true
  }

  export type WishlistMaxAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    createdAt?: true
  }

  export type WishlistCountAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    createdAt?: true
    _all?: true
  }

  export type WishlistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wishlist to aggregate.
     */
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     */
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wishlists
    **/
    _count?: true | WishlistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WishlistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WishlistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WishlistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WishlistMaxAggregateInputType
  }

  export type GetWishlistAggregateType<T extends WishlistAggregateArgs> = {
        [P in keyof T & keyof AggregateWishlist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWishlist[P]>
      : GetScalarType<T[P], AggregateWishlist[P]>
  }




  export type WishlistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WishlistWhereInput
    orderBy?: WishlistOrderByWithAggregationInput | WishlistOrderByWithAggregationInput[]
    by: WishlistScalarFieldEnum[] | WishlistScalarFieldEnum
    having?: WishlistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WishlistCountAggregateInputType | true
    _avg?: WishlistAvgAggregateInputType
    _sum?: WishlistSumAggregateInputType
    _min?: WishlistMinAggregateInputType
    _max?: WishlistMaxAggregateInputType
  }

  export type WishlistGroupByOutputType = {
    id: number
    userId: number
    itemId: number
    createdAt: Date
    _count: WishlistCountAggregateOutputType | null
    _avg: WishlistAvgAggregateOutputType | null
    _sum: WishlistSumAggregateOutputType | null
    _min: WishlistMinAggregateOutputType | null
    _max: WishlistMaxAggregateOutputType | null
  }

  type GetWishlistGroupByPayload<T extends WishlistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WishlistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WishlistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WishlistGroupByOutputType[P]>
            : GetScalarType<T[P], WishlistGroupByOutputType[P]>
        }
      >
    >


  export type WishlistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    itemId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wishlist"]>



  export type WishlistSelectScalar = {
    id?: boolean
    userId?: boolean
    itemId?: boolean
    createdAt?: boolean
  }

  export type WishlistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "itemId" | "createdAt", ExtArgs["result"]["wishlist"]>
  export type WishlistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
  }

  export type $WishlistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wishlist"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      item: Prisma.$ItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      itemId: number
      createdAt: Date
    }, ExtArgs["result"]["wishlist"]>
    composites: {}
  }

  type WishlistGetPayload<S extends boolean | null | undefined | WishlistDefaultArgs> = $Result.GetResult<Prisma.$WishlistPayload, S>

  type WishlistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WishlistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WishlistCountAggregateInputType | true
    }

  export interface WishlistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wishlist'], meta: { name: 'Wishlist' } }
    /**
     * Find zero or one Wishlist that matches the filter.
     * @param {WishlistFindUniqueArgs} args - Arguments to find a Wishlist
     * @example
     * // Get one Wishlist
     * const wishlist = await prisma.wishlist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WishlistFindUniqueArgs>(args: SelectSubset<T, WishlistFindUniqueArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Wishlist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WishlistFindUniqueOrThrowArgs} args - Arguments to find a Wishlist
     * @example
     * // Get one Wishlist
     * const wishlist = await prisma.wishlist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WishlistFindUniqueOrThrowArgs>(args: SelectSubset<T, WishlistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wishlist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistFindFirstArgs} args - Arguments to find a Wishlist
     * @example
     * // Get one Wishlist
     * const wishlist = await prisma.wishlist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WishlistFindFirstArgs>(args?: SelectSubset<T, WishlistFindFirstArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wishlist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistFindFirstOrThrowArgs} args - Arguments to find a Wishlist
     * @example
     * // Get one Wishlist
     * const wishlist = await prisma.wishlist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WishlistFindFirstOrThrowArgs>(args?: SelectSubset<T, WishlistFindFirstOrThrowArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Wishlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wishlists
     * const wishlists = await prisma.wishlist.findMany()
     * 
     * // Get first 10 Wishlists
     * const wishlists = await prisma.wishlist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wishlistWithIdOnly = await prisma.wishlist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WishlistFindManyArgs>(args?: SelectSubset<T, WishlistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Wishlist.
     * @param {WishlistCreateArgs} args - Arguments to create a Wishlist.
     * @example
     * // Create one Wishlist
     * const Wishlist = await prisma.wishlist.create({
     *   data: {
     *     // ... data to create a Wishlist
     *   }
     * })
     * 
     */
    create<T extends WishlistCreateArgs>(args: SelectSubset<T, WishlistCreateArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Wishlists.
     * @param {WishlistCreateManyArgs} args - Arguments to create many Wishlists.
     * @example
     * // Create many Wishlists
     * const wishlist = await prisma.wishlist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WishlistCreateManyArgs>(args?: SelectSubset<T, WishlistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Wishlist.
     * @param {WishlistDeleteArgs} args - Arguments to delete one Wishlist.
     * @example
     * // Delete one Wishlist
     * const Wishlist = await prisma.wishlist.delete({
     *   where: {
     *     // ... filter to delete one Wishlist
     *   }
     * })
     * 
     */
    delete<T extends WishlistDeleteArgs>(args: SelectSubset<T, WishlistDeleteArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Wishlist.
     * @param {WishlistUpdateArgs} args - Arguments to update one Wishlist.
     * @example
     * // Update one Wishlist
     * const wishlist = await prisma.wishlist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WishlistUpdateArgs>(args: SelectSubset<T, WishlistUpdateArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Wishlists.
     * @param {WishlistDeleteManyArgs} args - Arguments to filter Wishlists to delete.
     * @example
     * // Delete a few Wishlists
     * const { count } = await prisma.wishlist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WishlistDeleteManyArgs>(args?: SelectSubset<T, WishlistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wishlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wishlists
     * const wishlist = await prisma.wishlist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WishlistUpdateManyArgs>(args: SelectSubset<T, WishlistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Wishlist.
     * @param {WishlistUpsertArgs} args - Arguments to update or create a Wishlist.
     * @example
     * // Update or create a Wishlist
     * const wishlist = await prisma.wishlist.upsert({
     *   create: {
     *     // ... data to create a Wishlist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wishlist we want to update
     *   }
     * })
     */
    upsert<T extends WishlistUpsertArgs>(args: SelectSubset<T, WishlistUpsertArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Wishlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistCountArgs} args - Arguments to filter Wishlists to count.
     * @example
     * // Count the number of Wishlists
     * const count = await prisma.wishlist.count({
     *   where: {
     *     // ... the filter for the Wishlists we want to count
     *   }
     * })
    **/
    count<T extends WishlistCountArgs>(
      args?: Subset<T, WishlistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WishlistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wishlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WishlistAggregateArgs>(args: Subset<T, WishlistAggregateArgs>): Prisma.PrismaPromise<GetWishlistAggregateType<T>>

    /**
     * Group by Wishlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WishlistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WishlistGroupByArgs['orderBy'] }
        : { orderBy?: WishlistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WishlistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWishlistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wishlist model
   */
  readonly fields: WishlistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wishlist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WishlistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    item<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Wishlist model
   */
  interface WishlistFieldRefs {
    readonly id: FieldRef<"Wishlist", 'Int'>
    readonly userId: FieldRef<"Wishlist", 'Int'>
    readonly itemId: FieldRef<"Wishlist", 'Int'>
    readonly createdAt: FieldRef<"Wishlist", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Wishlist findUnique
   */
  export type WishlistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlist to fetch.
     */
    where: WishlistWhereUniqueInput
  }

  /**
   * Wishlist findUniqueOrThrow
   */
  export type WishlistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlist to fetch.
     */
    where: WishlistWhereUniqueInput
  }

  /**
   * Wishlist findFirst
   */
  export type WishlistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlist to fetch.
     */
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     */
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wishlists.
     */
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wishlists.
     */
    distinct?: WishlistScalarFieldEnum | WishlistScalarFieldEnum[]
  }

  /**
   * Wishlist findFirstOrThrow
   */
  export type WishlistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlist to fetch.
     */
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     */
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wishlists.
     */
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wishlists.
     */
    distinct?: WishlistScalarFieldEnum | WishlistScalarFieldEnum[]
  }

  /**
   * Wishlist findMany
   */
  export type WishlistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlists to fetch.
     */
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     */
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wishlists.
     */
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     */
    skip?: number
    distinct?: WishlistScalarFieldEnum | WishlistScalarFieldEnum[]
  }

  /**
   * Wishlist create
   */
  export type WishlistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * The data needed to create a Wishlist.
     */
    data: XOR<WishlistCreateInput, WishlistUncheckedCreateInput>
  }

  /**
   * Wishlist createMany
   */
  export type WishlistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wishlists.
     */
    data: WishlistCreateManyInput | WishlistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Wishlist update
   */
  export type WishlistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * The data needed to update a Wishlist.
     */
    data: XOR<WishlistUpdateInput, WishlistUncheckedUpdateInput>
    /**
     * Choose, which Wishlist to update.
     */
    where: WishlistWhereUniqueInput
  }

  /**
   * Wishlist updateMany
   */
  export type WishlistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wishlists.
     */
    data: XOR<WishlistUpdateManyMutationInput, WishlistUncheckedUpdateManyInput>
    /**
     * Filter which Wishlists to update
     */
    where?: WishlistWhereInput
    /**
     * Limit how many Wishlists to update.
     */
    limit?: number
  }

  /**
   * Wishlist upsert
   */
  export type WishlistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * The filter to search for the Wishlist to update in case it exists.
     */
    where: WishlistWhereUniqueInput
    /**
     * In case the Wishlist found by the `where` argument doesn't exist, create a new Wishlist with this data.
     */
    create: XOR<WishlistCreateInput, WishlistUncheckedCreateInput>
    /**
     * In case the Wishlist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WishlistUpdateInput, WishlistUncheckedUpdateInput>
  }

  /**
   * Wishlist delete
   */
  export type WishlistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter which Wishlist to delete.
     */
    where: WishlistWhereUniqueInput
  }

  /**
   * Wishlist deleteMany
   */
  export type WishlistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wishlists to delete
     */
    where?: WishlistWhereInput
    /**
     * Limit how many Wishlists to delete.
     */
    limit?: number
  }

  /**
   * Wishlist without action
   */
  export type WishlistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
  }


  /**
   * Model Discussion
   */

  export type AggregateDiscussion = {
    _count: DiscussionCountAggregateOutputType | null
    _avg: DiscussionAvgAggregateOutputType | null
    _sum: DiscussionSumAggregateOutputType | null
    _min: DiscussionMinAggregateOutputType | null
    _max: DiscussionMaxAggregateOutputType | null
  }

  export type DiscussionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    academicDataId: number | null
    viewCount: number | null
    replyCount: number | null
  }

  export type DiscussionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    academicDataId: number | null
    viewCount: number | null
    replyCount: number | null
  }

  export type DiscussionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    academicDataId: number | null
    title: string | null
    content: string | null
    category: string | null
    tags: string | null
    isPinned: boolean | null
    isLocked: boolean | null
    viewCount: number | null
    replyCount: number | null
    lastReplyAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DiscussionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    academicDataId: number | null
    title: string | null
    content: string | null
    category: string | null
    tags: string | null
    isPinned: boolean | null
    isLocked: boolean | null
    viewCount: number | null
    replyCount: number | null
    lastReplyAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DiscussionCountAggregateOutputType = {
    id: number
    userId: number
    academicDataId: number
    title: number
    content: number
    category: number
    tags: number
    isPinned: number
    isLocked: number
    viewCount: number
    replyCount: number
    lastReplyAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DiscussionAvgAggregateInputType = {
    id?: true
    userId?: true
    academicDataId?: true
    viewCount?: true
    replyCount?: true
  }

  export type DiscussionSumAggregateInputType = {
    id?: true
    userId?: true
    academicDataId?: true
    viewCount?: true
    replyCount?: true
  }

  export type DiscussionMinAggregateInputType = {
    id?: true
    userId?: true
    academicDataId?: true
    title?: true
    content?: true
    category?: true
    tags?: true
    isPinned?: true
    isLocked?: true
    viewCount?: true
    replyCount?: true
    lastReplyAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DiscussionMaxAggregateInputType = {
    id?: true
    userId?: true
    academicDataId?: true
    title?: true
    content?: true
    category?: true
    tags?: true
    isPinned?: true
    isLocked?: true
    viewCount?: true
    replyCount?: true
    lastReplyAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DiscussionCountAggregateInputType = {
    id?: true
    userId?: true
    academicDataId?: true
    title?: true
    content?: true
    category?: true
    tags?: true
    isPinned?: true
    isLocked?: true
    viewCount?: true
    replyCount?: true
    lastReplyAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DiscussionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Discussion to aggregate.
     */
    where?: DiscussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discussions to fetch.
     */
    orderBy?: DiscussionOrderByWithRelationInput | DiscussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiscussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Discussions
    **/
    _count?: true | DiscussionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiscussionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiscussionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscussionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscussionMaxAggregateInputType
  }

  export type GetDiscussionAggregateType<T extends DiscussionAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscussion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscussion[P]>
      : GetScalarType<T[P], AggregateDiscussion[P]>
  }




  export type DiscussionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionWhereInput
    orderBy?: DiscussionOrderByWithAggregationInput | DiscussionOrderByWithAggregationInput[]
    by: DiscussionScalarFieldEnum[] | DiscussionScalarFieldEnum
    having?: DiscussionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscussionCountAggregateInputType | true
    _avg?: DiscussionAvgAggregateInputType
    _sum?: DiscussionSumAggregateInputType
    _min?: DiscussionMinAggregateInputType
    _max?: DiscussionMaxAggregateInputType
  }

  export type DiscussionGroupByOutputType = {
    id: number
    userId: number
    academicDataId: number | null
    title: string
    content: string
    category: string | null
    tags: string | null
    isPinned: boolean
    isLocked: boolean
    viewCount: number
    replyCount: number
    lastReplyAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: DiscussionCountAggregateOutputType | null
    _avg: DiscussionAvgAggregateOutputType | null
    _sum: DiscussionSumAggregateOutputType | null
    _min: DiscussionMinAggregateOutputType | null
    _max: DiscussionMaxAggregateOutputType | null
  }

  type GetDiscussionGroupByPayload<T extends DiscussionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiscussionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscussionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscussionGroupByOutputType[P]>
            : GetScalarType<T[P], DiscussionGroupByOutputType[P]>
        }
      >
    >


  export type DiscussionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    academicDataId?: boolean
    title?: boolean
    content?: boolean
    category?: boolean
    tags?: boolean
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: boolean
    replyCount?: boolean
    lastReplyAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    academicData?: boolean | Discussion$academicDataArgs<ExtArgs>
    comments?: boolean | Discussion$commentsArgs<ExtArgs>
    _count?: boolean | DiscussionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussion"]>



  export type DiscussionSelectScalar = {
    id?: boolean
    userId?: boolean
    academicDataId?: boolean
    title?: boolean
    content?: boolean
    category?: boolean
    tags?: boolean
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: boolean
    replyCount?: boolean
    lastReplyAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DiscussionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "academicDataId" | "title" | "content" | "category" | "tags" | "isPinned" | "isLocked" | "viewCount" | "replyCount" | "lastReplyAt" | "createdAt" | "updatedAt", ExtArgs["result"]["discussion"]>
  export type DiscussionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    academicData?: boolean | Discussion$academicDataArgs<ExtArgs>
    comments?: boolean | Discussion$commentsArgs<ExtArgs>
    _count?: boolean | DiscussionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DiscussionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Discussion"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      academicData: Prisma.$AcademicDataPayload<ExtArgs> | null
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      academicDataId: number | null
      title: string
      content: string
      category: string | null
      tags: string | null
      isPinned: boolean
      isLocked: boolean
      viewCount: number
      replyCount: number
      lastReplyAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["discussion"]>
    composites: {}
  }

  type DiscussionGetPayload<S extends boolean | null | undefined | DiscussionDefaultArgs> = $Result.GetResult<Prisma.$DiscussionPayload, S>

  type DiscussionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DiscussionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DiscussionCountAggregateInputType | true
    }

  export interface DiscussionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Discussion'], meta: { name: 'Discussion' } }
    /**
     * Find zero or one Discussion that matches the filter.
     * @param {DiscussionFindUniqueArgs} args - Arguments to find a Discussion
     * @example
     * // Get one Discussion
     * const discussion = await prisma.discussion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiscussionFindUniqueArgs>(args: SelectSubset<T, DiscussionFindUniqueArgs<ExtArgs>>): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Discussion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DiscussionFindUniqueOrThrowArgs} args - Arguments to find a Discussion
     * @example
     * // Get one Discussion
     * const discussion = await prisma.discussion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiscussionFindUniqueOrThrowArgs>(args: SelectSubset<T, DiscussionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Discussion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionFindFirstArgs} args - Arguments to find a Discussion
     * @example
     * // Get one Discussion
     * const discussion = await prisma.discussion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiscussionFindFirstArgs>(args?: SelectSubset<T, DiscussionFindFirstArgs<ExtArgs>>): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Discussion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionFindFirstOrThrowArgs} args - Arguments to find a Discussion
     * @example
     * // Get one Discussion
     * const discussion = await prisma.discussion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiscussionFindFirstOrThrowArgs>(args?: SelectSubset<T, DiscussionFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Discussions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Discussions
     * const discussions = await prisma.discussion.findMany()
     * 
     * // Get first 10 Discussions
     * const discussions = await prisma.discussion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const discussionWithIdOnly = await prisma.discussion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiscussionFindManyArgs>(args?: SelectSubset<T, DiscussionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Discussion.
     * @param {DiscussionCreateArgs} args - Arguments to create a Discussion.
     * @example
     * // Create one Discussion
     * const Discussion = await prisma.discussion.create({
     *   data: {
     *     // ... data to create a Discussion
     *   }
     * })
     * 
     */
    create<T extends DiscussionCreateArgs>(args: SelectSubset<T, DiscussionCreateArgs<ExtArgs>>): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Discussions.
     * @param {DiscussionCreateManyArgs} args - Arguments to create many Discussions.
     * @example
     * // Create many Discussions
     * const discussion = await prisma.discussion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiscussionCreateManyArgs>(args?: SelectSubset<T, DiscussionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Discussion.
     * @param {DiscussionDeleteArgs} args - Arguments to delete one Discussion.
     * @example
     * // Delete one Discussion
     * const Discussion = await prisma.discussion.delete({
     *   where: {
     *     // ... filter to delete one Discussion
     *   }
     * })
     * 
     */
    delete<T extends DiscussionDeleteArgs>(args: SelectSubset<T, DiscussionDeleteArgs<ExtArgs>>): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Discussion.
     * @param {DiscussionUpdateArgs} args - Arguments to update one Discussion.
     * @example
     * // Update one Discussion
     * const discussion = await prisma.discussion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiscussionUpdateArgs>(args: SelectSubset<T, DiscussionUpdateArgs<ExtArgs>>): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Discussions.
     * @param {DiscussionDeleteManyArgs} args - Arguments to filter Discussions to delete.
     * @example
     * // Delete a few Discussions
     * const { count } = await prisma.discussion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiscussionDeleteManyArgs>(args?: SelectSubset<T, DiscussionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Discussions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Discussions
     * const discussion = await prisma.discussion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiscussionUpdateManyArgs>(args: SelectSubset<T, DiscussionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Discussion.
     * @param {DiscussionUpsertArgs} args - Arguments to update or create a Discussion.
     * @example
     * // Update or create a Discussion
     * const discussion = await prisma.discussion.upsert({
     *   create: {
     *     // ... data to create a Discussion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discussion we want to update
     *   }
     * })
     */
    upsert<T extends DiscussionUpsertArgs>(args: SelectSubset<T, DiscussionUpsertArgs<ExtArgs>>): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Discussions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionCountArgs} args - Arguments to filter Discussions to count.
     * @example
     * // Count the number of Discussions
     * const count = await prisma.discussion.count({
     *   where: {
     *     // ... the filter for the Discussions we want to count
     *   }
     * })
    **/
    count<T extends DiscussionCountArgs>(
      args?: Subset<T, DiscussionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscussionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discussion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscussionAggregateArgs>(args: Subset<T, DiscussionAggregateArgs>): Prisma.PrismaPromise<GetDiscussionAggregateType<T>>

    /**
     * Group by Discussion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscussionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscussionGroupByArgs['orderBy'] }
        : { orderBy?: DiscussionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscussionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Discussion model
   */
  readonly fields: DiscussionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Discussion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiscussionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    academicData<T extends Discussion$academicDataArgs<ExtArgs> = {}>(args?: Subset<T, Discussion$academicDataArgs<ExtArgs>>): Prisma__AcademicDataClient<$Result.GetResult<Prisma.$AcademicDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    comments<T extends Discussion$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Discussion$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Discussion model
   */
  interface DiscussionFieldRefs {
    readonly id: FieldRef<"Discussion", 'Int'>
    readonly userId: FieldRef<"Discussion", 'Int'>
    readonly academicDataId: FieldRef<"Discussion", 'Int'>
    readonly title: FieldRef<"Discussion", 'String'>
    readonly content: FieldRef<"Discussion", 'String'>
    readonly category: FieldRef<"Discussion", 'String'>
    readonly tags: FieldRef<"Discussion", 'String'>
    readonly isPinned: FieldRef<"Discussion", 'Boolean'>
    readonly isLocked: FieldRef<"Discussion", 'Boolean'>
    readonly viewCount: FieldRef<"Discussion", 'Int'>
    readonly replyCount: FieldRef<"Discussion", 'Int'>
    readonly lastReplyAt: FieldRef<"Discussion", 'DateTime'>
    readonly createdAt: FieldRef<"Discussion", 'DateTime'>
    readonly updatedAt: FieldRef<"Discussion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Discussion findUnique
   */
  export type DiscussionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discussion
     */
    omit?: DiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * Filter, which Discussion to fetch.
     */
    where: DiscussionWhereUniqueInput
  }

  /**
   * Discussion findUniqueOrThrow
   */
  export type DiscussionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discussion
     */
    omit?: DiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * Filter, which Discussion to fetch.
     */
    where: DiscussionWhereUniqueInput
  }

  /**
   * Discussion findFirst
   */
  export type DiscussionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discussion
     */
    omit?: DiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * Filter, which Discussion to fetch.
     */
    where?: DiscussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discussions to fetch.
     */
    orderBy?: DiscussionOrderByWithRelationInput | DiscussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Discussions.
     */
    cursor?: DiscussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Discussions.
     */
    distinct?: DiscussionScalarFieldEnum | DiscussionScalarFieldEnum[]
  }

  /**
   * Discussion findFirstOrThrow
   */
  export type DiscussionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discussion
     */
    omit?: DiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * Filter, which Discussion to fetch.
     */
    where?: DiscussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discussions to fetch.
     */
    orderBy?: DiscussionOrderByWithRelationInput | DiscussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Discussions.
     */
    cursor?: DiscussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Discussions.
     */
    distinct?: DiscussionScalarFieldEnum | DiscussionScalarFieldEnum[]
  }

  /**
   * Discussion findMany
   */
  export type DiscussionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discussion
     */
    omit?: DiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * Filter, which Discussions to fetch.
     */
    where?: DiscussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discussions to fetch.
     */
    orderBy?: DiscussionOrderByWithRelationInput | DiscussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Discussions.
     */
    cursor?: DiscussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discussions.
     */
    skip?: number
    distinct?: DiscussionScalarFieldEnum | DiscussionScalarFieldEnum[]
  }

  /**
   * Discussion create
   */
  export type DiscussionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discussion
     */
    omit?: DiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * The data needed to create a Discussion.
     */
    data: XOR<DiscussionCreateInput, DiscussionUncheckedCreateInput>
  }

  /**
   * Discussion createMany
   */
  export type DiscussionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Discussions.
     */
    data: DiscussionCreateManyInput | DiscussionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Discussion update
   */
  export type DiscussionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discussion
     */
    omit?: DiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * The data needed to update a Discussion.
     */
    data: XOR<DiscussionUpdateInput, DiscussionUncheckedUpdateInput>
    /**
     * Choose, which Discussion to update.
     */
    where: DiscussionWhereUniqueInput
  }

  /**
   * Discussion updateMany
   */
  export type DiscussionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Discussions.
     */
    data: XOR<DiscussionUpdateManyMutationInput, DiscussionUncheckedUpdateManyInput>
    /**
     * Filter which Discussions to update
     */
    where?: DiscussionWhereInput
    /**
     * Limit how many Discussions to update.
     */
    limit?: number
  }

  /**
   * Discussion upsert
   */
  export type DiscussionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discussion
     */
    omit?: DiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * The filter to search for the Discussion to update in case it exists.
     */
    where: DiscussionWhereUniqueInput
    /**
     * In case the Discussion found by the `where` argument doesn't exist, create a new Discussion with this data.
     */
    create: XOR<DiscussionCreateInput, DiscussionUncheckedCreateInput>
    /**
     * In case the Discussion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiscussionUpdateInput, DiscussionUncheckedUpdateInput>
  }

  /**
   * Discussion delete
   */
  export type DiscussionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discussion
     */
    omit?: DiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionInclude<ExtArgs> | null
    /**
     * Filter which Discussion to delete.
     */
    where: DiscussionWhereUniqueInput
  }

  /**
   * Discussion deleteMany
   */
  export type DiscussionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Discussions to delete
     */
    where?: DiscussionWhereInput
    /**
     * Limit how many Discussions to delete.
     */
    limit?: number
  }

  /**
   * Discussion.academicData
   */
  export type Discussion$academicDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicData
     */
    select?: AcademicDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicData
     */
    omit?: AcademicDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicDataInclude<ExtArgs> | null
    where?: AcademicDataWhereInput
  }

  /**
   * Discussion.comments
   */
  export type Discussion$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Discussion without action
   */
  export type DiscussionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussion
     */
    select?: DiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discussion
     */
    omit?: DiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    discussionId: number | null
    userId: number | null
    parentId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    discussionId: number | null
    userId: number | null
    parentId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    discussionId: number | null
    userId: number | null
    parentId: number | null
    content: string | null
    isEdited: boolean | null
    editedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    discussionId: number | null
    userId: number | null
    parentId: number | null
    content: string | null
    isEdited: boolean | null
    editedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    discussionId: number
    userId: number
    parentId: number
    content: number
    isEdited: number
    editedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    discussionId?: true
    userId?: true
    parentId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    discussionId?: true
    userId?: true
    parentId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    discussionId?: true
    userId?: true
    parentId?: true
    content?: true
    isEdited?: true
    editedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    discussionId?: true
    userId?: true
    parentId?: true
    content?: true
    isEdited?: true
    editedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    discussionId?: true
    userId?: true
    parentId?: true
    content?: true
    isEdited?: true
    editedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: number
    discussionId: number
    userId: number
    parentId: number | null
    content: string
    isEdited: boolean
    editedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    discussionId?: boolean
    userId?: boolean
    parentId?: boolean
    content?: boolean
    isEdited?: boolean
    editedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    discussion?: boolean | DiscussionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
    replies?: boolean | Comment$repliesArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>



  export type CommentSelectScalar = {
    id?: boolean
    discussionId?: boolean
    userId?: boolean
    parentId?: boolean
    content?: boolean
    isEdited?: boolean
    editedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "discussionId" | "userId" | "parentId" | "content" | "isEdited" | "editedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discussion?: boolean | DiscussionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
    replies?: boolean | Comment$repliesArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      discussion: Prisma.$DiscussionPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      parent: Prisma.$CommentPayload<ExtArgs> | null
      replies: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      discussionId: number
      userId: number
      parentId: number | null
      content: string
      isEdited: boolean
      editedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    discussion<T extends DiscussionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DiscussionDefaultArgs<ExtArgs>>): Prisma__DiscussionClient<$Result.GetResult<Prisma.$DiscussionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parent<T extends Comment$parentArgs<ExtArgs> = {}>(args?: Subset<T, Comment$parentArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    replies<T extends Comment$repliesArgs<ExtArgs> = {}>(args?: Subset<T, Comment$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'Int'>
    readonly discussionId: FieldRef<"Comment", 'Int'>
    readonly userId: FieldRef<"Comment", 'Int'>
    readonly parentId: FieldRef<"Comment", 'Int'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly isEdited: FieldRef<"Comment", 'Boolean'>
    readonly editedAt: FieldRef<"Comment", 'DateTime'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment.parent
   */
  export type Comment$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
  }

  /**
   * Comment.replies
   */
  export type Comment$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    relatedId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
    relatedId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    relatedId: number | null
    relatedType: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    relatedId: number | null
    relatedType: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    message: number
    relatedId: number
    relatedType: number
    isRead: number
    createdAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
    relatedId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
    relatedId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    relatedId?: true
    relatedType?: true
    isRead?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    relatedId?: true
    relatedType?: true
    isRead?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    relatedId?: true
    relatedType?: true
    isRead?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    userId: number
    type: $Enums.NotificationType
    title: string
    message: string
    relatedId: number | null
    relatedType: string | null
    isRead: boolean
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    relatedId?: boolean
    relatedType?: boolean
    isRead?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>



  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    relatedId?: boolean
    relatedType?: boolean
    isRead?: boolean
    createdAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "title" | "message" | "relatedId" | "relatedType" | "isRead" | "createdAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      type: $Enums.NotificationType
      title: string
      message: string
      relatedId: number | null
      relatedType: string | null
      isRead: boolean
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly relatedId: FieldRef<"Notification", 'Int'>
    readonly relatedType: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model PriceHistory
   */

  export type AggregatePriceHistory = {
    _count: PriceHistoryCountAggregateOutputType | null
    _avg: PriceHistoryAvgAggregateOutputType | null
    _sum: PriceHistorySumAggregateOutputType | null
    _min: PriceHistoryMinAggregateOutputType | null
    _max: PriceHistoryMaxAggregateOutputType | null
  }

  export type PriceHistoryAvgAggregateOutputType = {
    id: number | null
    itemId: number | null
    price: Decimal | null
  }

  export type PriceHistorySumAggregateOutputType = {
    id: number | null
    itemId: number | null
    price: Decimal | null
  }

  export type PriceHistoryMinAggregateOutputType = {
    id: number | null
    itemId: number | null
    price: Decimal | null
    condition: $Enums.ItemCondition | null
    category: string | null
    recordedAt: Date | null
  }

  export type PriceHistoryMaxAggregateOutputType = {
    id: number | null
    itemId: number | null
    price: Decimal | null
    condition: $Enums.ItemCondition | null
    category: string | null
    recordedAt: Date | null
  }

  export type PriceHistoryCountAggregateOutputType = {
    id: number
    itemId: number
    price: number
    condition: number
    category: number
    recordedAt: number
    _all: number
  }


  export type PriceHistoryAvgAggregateInputType = {
    id?: true
    itemId?: true
    price?: true
  }

  export type PriceHistorySumAggregateInputType = {
    id?: true
    itemId?: true
    price?: true
  }

  export type PriceHistoryMinAggregateInputType = {
    id?: true
    itemId?: true
    price?: true
    condition?: true
    category?: true
    recordedAt?: true
  }

  export type PriceHistoryMaxAggregateInputType = {
    id?: true
    itemId?: true
    price?: true
    condition?: true
    category?: true
    recordedAt?: true
  }

  export type PriceHistoryCountAggregateInputType = {
    id?: true
    itemId?: true
    price?: true
    condition?: true
    category?: true
    recordedAt?: true
    _all?: true
  }

  export type PriceHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceHistory to aggregate.
     */
    where?: PriceHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceHistories to fetch.
     */
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PriceHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PriceHistories
    **/
    _count?: true | PriceHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PriceHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PriceHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PriceHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PriceHistoryMaxAggregateInputType
  }

  export type GetPriceHistoryAggregateType<T extends PriceHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregatePriceHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePriceHistory[P]>
      : GetScalarType<T[P], AggregatePriceHistory[P]>
  }




  export type PriceHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceHistoryWhereInput
    orderBy?: PriceHistoryOrderByWithAggregationInput | PriceHistoryOrderByWithAggregationInput[]
    by: PriceHistoryScalarFieldEnum[] | PriceHistoryScalarFieldEnum
    having?: PriceHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PriceHistoryCountAggregateInputType | true
    _avg?: PriceHistoryAvgAggregateInputType
    _sum?: PriceHistorySumAggregateInputType
    _min?: PriceHistoryMinAggregateInputType
    _max?: PriceHistoryMaxAggregateInputType
  }

  export type PriceHistoryGroupByOutputType = {
    id: number
    itemId: number
    price: Decimal
    condition: $Enums.ItemCondition
    category: string
    recordedAt: Date
    _count: PriceHistoryCountAggregateOutputType | null
    _avg: PriceHistoryAvgAggregateOutputType | null
    _sum: PriceHistorySumAggregateOutputType | null
    _min: PriceHistoryMinAggregateOutputType | null
    _max: PriceHistoryMaxAggregateOutputType | null
  }

  type GetPriceHistoryGroupByPayload<T extends PriceHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PriceHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PriceHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PriceHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], PriceHistoryGroupByOutputType[P]>
        }
      >
    >


  export type PriceHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    price?: boolean
    condition?: boolean
    category?: boolean
    recordedAt?: boolean
    item?: boolean | ItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priceHistory"]>



  export type PriceHistorySelectScalar = {
    id?: boolean
    itemId?: boolean
    price?: boolean
    condition?: boolean
    category?: boolean
    recordedAt?: boolean
  }

  export type PriceHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "itemId" | "price" | "condition" | "category" | "recordedAt", ExtArgs["result"]["priceHistory"]>
  export type PriceHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | ItemDefaultArgs<ExtArgs>
  }

  export type $PriceHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PriceHistory"
    objects: {
      item: Prisma.$ItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      itemId: number
      price: Prisma.Decimal
      condition: $Enums.ItemCondition
      category: string
      recordedAt: Date
    }, ExtArgs["result"]["priceHistory"]>
    composites: {}
  }

  type PriceHistoryGetPayload<S extends boolean | null | undefined | PriceHistoryDefaultArgs> = $Result.GetResult<Prisma.$PriceHistoryPayload, S>

  type PriceHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PriceHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PriceHistoryCountAggregateInputType | true
    }

  export interface PriceHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PriceHistory'], meta: { name: 'PriceHistory' } }
    /**
     * Find zero or one PriceHistory that matches the filter.
     * @param {PriceHistoryFindUniqueArgs} args - Arguments to find a PriceHistory
     * @example
     * // Get one PriceHistory
     * const priceHistory = await prisma.priceHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PriceHistoryFindUniqueArgs>(args: SelectSubset<T, PriceHistoryFindUniqueArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PriceHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PriceHistoryFindUniqueOrThrowArgs} args - Arguments to find a PriceHistory
     * @example
     * // Get one PriceHistory
     * const priceHistory = await prisma.priceHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PriceHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, PriceHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PriceHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryFindFirstArgs} args - Arguments to find a PriceHistory
     * @example
     * // Get one PriceHistory
     * const priceHistory = await prisma.priceHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PriceHistoryFindFirstArgs>(args?: SelectSubset<T, PriceHistoryFindFirstArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PriceHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryFindFirstOrThrowArgs} args - Arguments to find a PriceHistory
     * @example
     * // Get one PriceHistory
     * const priceHistory = await prisma.priceHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PriceHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, PriceHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PriceHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PriceHistories
     * const priceHistories = await prisma.priceHistory.findMany()
     * 
     * // Get first 10 PriceHistories
     * const priceHistories = await prisma.priceHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const priceHistoryWithIdOnly = await prisma.priceHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PriceHistoryFindManyArgs>(args?: SelectSubset<T, PriceHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PriceHistory.
     * @param {PriceHistoryCreateArgs} args - Arguments to create a PriceHistory.
     * @example
     * // Create one PriceHistory
     * const PriceHistory = await prisma.priceHistory.create({
     *   data: {
     *     // ... data to create a PriceHistory
     *   }
     * })
     * 
     */
    create<T extends PriceHistoryCreateArgs>(args: SelectSubset<T, PriceHistoryCreateArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PriceHistories.
     * @param {PriceHistoryCreateManyArgs} args - Arguments to create many PriceHistories.
     * @example
     * // Create many PriceHistories
     * const priceHistory = await prisma.priceHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PriceHistoryCreateManyArgs>(args?: SelectSubset<T, PriceHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PriceHistory.
     * @param {PriceHistoryDeleteArgs} args - Arguments to delete one PriceHistory.
     * @example
     * // Delete one PriceHistory
     * const PriceHistory = await prisma.priceHistory.delete({
     *   where: {
     *     // ... filter to delete one PriceHistory
     *   }
     * })
     * 
     */
    delete<T extends PriceHistoryDeleteArgs>(args: SelectSubset<T, PriceHistoryDeleteArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PriceHistory.
     * @param {PriceHistoryUpdateArgs} args - Arguments to update one PriceHistory.
     * @example
     * // Update one PriceHistory
     * const priceHistory = await prisma.priceHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PriceHistoryUpdateArgs>(args: SelectSubset<T, PriceHistoryUpdateArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PriceHistories.
     * @param {PriceHistoryDeleteManyArgs} args - Arguments to filter PriceHistories to delete.
     * @example
     * // Delete a few PriceHistories
     * const { count } = await prisma.priceHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PriceHistoryDeleteManyArgs>(args?: SelectSubset<T, PriceHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PriceHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PriceHistories
     * const priceHistory = await prisma.priceHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PriceHistoryUpdateManyArgs>(args: SelectSubset<T, PriceHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PriceHistory.
     * @param {PriceHistoryUpsertArgs} args - Arguments to update or create a PriceHistory.
     * @example
     * // Update or create a PriceHistory
     * const priceHistory = await prisma.priceHistory.upsert({
     *   create: {
     *     // ... data to create a PriceHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PriceHistory we want to update
     *   }
     * })
     */
    upsert<T extends PriceHistoryUpsertArgs>(args: SelectSubset<T, PriceHistoryUpsertArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PriceHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryCountArgs} args - Arguments to filter PriceHistories to count.
     * @example
     * // Count the number of PriceHistories
     * const count = await prisma.priceHistory.count({
     *   where: {
     *     // ... the filter for the PriceHistories we want to count
     *   }
     * })
    **/
    count<T extends PriceHistoryCountArgs>(
      args?: Subset<T, PriceHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PriceHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PriceHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PriceHistoryAggregateArgs>(args: Subset<T, PriceHistoryAggregateArgs>): Prisma.PrismaPromise<GetPriceHistoryAggregateType<T>>

    /**
     * Group by PriceHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PriceHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PriceHistoryGroupByArgs['orderBy'] }
        : { orderBy?: PriceHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PriceHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPriceHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PriceHistory model
   */
  readonly fields: PriceHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PriceHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PriceHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PriceHistory model
   */
  interface PriceHistoryFieldRefs {
    readonly id: FieldRef<"PriceHistory", 'Int'>
    readonly itemId: FieldRef<"PriceHistory", 'Int'>
    readonly price: FieldRef<"PriceHistory", 'Decimal'>
    readonly condition: FieldRef<"PriceHistory", 'ItemCondition'>
    readonly category: FieldRef<"PriceHistory", 'String'>
    readonly recordedAt: FieldRef<"PriceHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PriceHistory findUnique
   */
  export type PriceHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistory to fetch.
     */
    where: PriceHistoryWhereUniqueInput
  }

  /**
   * PriceHistory findUniqueOrThrow
   */
  export type PriceHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistory to fetch.
     */
    where: PriceHistoryWhereUniqueInput
  }

  /**
   * PriceHistory findFirst
   */
  export type PriceHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistory to fetch.
     */
    where?: PriceHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceHistories to fetch.
     */
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceHistories.
     */
    cursor?: PriceHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceHistories.
     */
    distinct?: PriceHistoryScalarFieldEnum | PriceHistoryScalarFieldEnum[]
  }

  /**
   * PriceHistory findFirstOrThrow
   */
  export type PriceHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistory to fetch.
     */
    where?: PriceHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceHistories to fetch.
     */
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceHistories.
     */
    cursor?: PriceHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceHistories.
     */
    distinct?: PriceHistoryScalarFieldEnum | PriceHistoryScalarFieldEnum[]
  }

  /**
   * PriceHistory findMany
   */
  export type PriceHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistories to fetch.
     */
    where?: PriceHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceHistories to fetch.
     */
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PriceHistories.
     */
    cursor?: PriceHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceHistories.
     */
    skip?: number
    distinct?: PriceHistoryScalarFieldEnum | PriceHistoryScalarFieldEnum[]
  }

  /**
   * PriceHistory create
   */
  export type PriceHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a PriceHistory.
     */
    data: XOR<PriceHistoryCreateInput, PriceHistoryUncheckedCreateInput>
  }

  /**
   * PriceHistory createMany
   */
  export type PriceHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PriceHistories.
     */
    data: PriceHistoryCreateManyInput | PriceHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PriceHistory update
   */
  export type PriceHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a PriceHistory.
     */
    data: XOR<PriceHistoryUpdateInput, PriceHistoryUncheckedUpdateInput>
    /**
     * Choose, which PriceHistory to update.
     */
    where: PriceHistoryWhereUniqueInput
  }

  /**
   * PriceHistory updateMany
   */
  export type PriceHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PriceHistories.
     */
    data: XOR<PriceHistoryUpdateManyMutationInput, PriceHistoryUncheckedUpdateManyInput>
    /**
     * Filter which PriceHistories to update
     */
    where?: PriceHistoryWhereInput
    /**
     * Limit how many PriceHistories to update.
     */
    limit?: number
  }

  /**
   * PriceHistory upsert
   */
  export type PriceHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the PriceHistory to update in case it exists.
     */
    where: PriceHistoryWhereUniqueInput
    /**
     * In case the PriceHistory found by the `where` argument doesn't exist, create a new PriceHistory with this data.
     */
    create: XOR<PriceHistoryCreateInput, PriceHistoryUncheckedCreateInput>
    /**
     * In case the PriceHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PriceHistoryUpdateInput, PriceHistoryUncheckedUpdateInput>
  }

  /**
   * PriceHistory delete
   */
  export type PriceHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter which PriceHistory to delete.
     */
    where: PriceHistoryWhereUniqueInput
  }

  /**
   * PriceHistory deleteMany
   */
  export type PriceHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceHistories to delete
     */
    where?: PriceHistoryWhereInput
    /**
     * Limit how many PriceHistories to delete.
     */
    limit?: number
  }

  /**
   * PriceHistory without action
   */
  export type PriceHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
  }


  /**
   * Model ItemImage
   */

  export type AggregateItemImage = {
    _count: ItemImageCountAggregateOutputType | null
    _avg: ItemImageAvgAggregateOutputType | null
    _sum: ItemImageSumAggregateOutputType | null
    _min: ItemImageMinAggregateOutputType | null
    _max: ItemImageMaxAggregateOutputType | null
  }

  export type ItemImageAvgAggregateOutputType = {
    id: number | null
    itemId: number | null
    sortOrder: number | null
  }

  export type ItemImageSumAggregateOutputType = {
    id: number | null
    itemId: number | null
    sortOrder: number | null
  }

  export type ItemImageMinAggregateOutputType = {
    id: number | null
    itemId: number | null
    imageUrl: string | null
    isPrimary: boolean | null
    caption: string | null
    sortOrder: number | null
    createdAt: Date | null
  }

  export type ItemImageMaxAggregateOutputType = {
    id: number | null
    itemId: number | null
    imageUrl: string | null
    isPrimary: boolean | null
    caption: string | null
    sortOrder: number | null
    createdAt: Date | null
  }

  export type ItemImageCountAggregateOutputType = {
    id: number
    itemId: number
    imageUrl: number
    isPrimary: number
    caption: number
    sortOrder: number
    createdAt: number
    _all: number
  }


  export type ItemImageAvgAggregateInputType = {
    id?: true
    itemId?: true
    sortOrder?: true
  }

  export type ItemImageSumAggregateInputType = {
    id?: true
    itemId?: true
    sortOrder?: true
  }

  export type ItemImageMinAggregateInputType = {
    id?: true
    itemId?: true
    imageUrl?: true
    isPrimary?: true
    caption?: true
    sortOrder?: true
    createdAt?: true
  }

  export type ItemImageMaxAggregateInputType = {
    id?: true
    itemId?: true
    imageUrl?: true
    isPrimary?: true
    caption?: true
    sortOrder?: true
    createdAt?: true
  }

  export type ItemImageCountAggregateInputType = {
    id?: true
    itemId?: true
    imageUrl?: true
    isPrimary?: true
    caption?: true
    sortOrder?: true
    createdAt?: true
    _all?: true
  }

  export type ItemImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ItemImage to aggregate.
     */
    where?: ItemImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemImages to fetch.
     */
    orderBy?: ItemImageOrderByWithRelationInput | ItemImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ItemImages
    **/
    _count?: true | ItemImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemImageMaxAggregateInputType
  }

  export type GetItemImageAggregateType<T extends ItemImageAggregateArgs> = {
        [P in keyof T & keyof AggregateItemImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItemImage[P]>
      : GetScalarType<T[P], AggregateItemImage[P]>
  }




  export type ItemImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemImageWhereInput
    orderBy?: ItemImageOrderByWithAggregationInput | ItemImageOrderByWithAggregationInput[]
    by: ItemImageScalarFieldEnum[] | ItemImageScalarFieldEnum
    having?: ItemImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemImageCountAggregateInputType | true
    _avg?: ItemImageAvgAggregateInputType
    _sum?: ItemImageSumAggregateInputType
    _min?: ItemImageMinAggregateInputType
    _max?: ItemImageMaxAggregateInputType
  }

  export type ItemImageGroupByOutputType = {
    id: number
    itemId: number
    imageUrl: string
    isPrimary: boolean
    caption: string | null
    sortOrder: number
    createdAt: Date
    _count: ItemImageCountAggregateOutputType | null
    _avg: ItemImageAvgAggregateOutputType | null
    _sum: ItemImageSumAggregateOutputType | null
    _min: ItemImageMinAggregateOutputType | null
    _max: ItemImageMaxAggregateOutputType | null
  }

  type GetItemImageGroupByPayload<T extends ItemImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemImageGroupByOutputType[P]>
            : GetScalarType<T[P], ItemImageGroupByOutputType[P]>
        }
      >
    >


  export type ItemImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    imageUrl?: boolean
    isPrimary?: boolean
    caption?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    item?: boolean | ItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["itemImage"]>



  export type ItemImageSelectScalar = {
    id?: boolean
    itemId?: boolean
    imageUrl?: boolean
    isPrimary?: boolean
    caption?: boolean
    sortOrder?: boolean
    createdAt?: boolean
  }

  export type ItemImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "itemId" | "imageUrl" | "isPrimary" | "caption" | "sortOrder" | "createdAt", ExtArgs["result"]["itemImage"]>
  export type ItemImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | ItemDefaultArgs<ExtArgs>
  }

  export type $ItemImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ItemImage"
    objects: {
      item: Prisma.$ItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      itemId: number
      imageUrl: string
      isPrimary: boolean
      caption: string | null
      sortOrder: number
      createdAt: Date
    }, ExtArgs["result"]["itemImage"]>
    composites: {}
  }

  type ItemImageGetPayload<S extends boolean | null | undefined | ItemImageDefaultArgs> = $Result.GetResult<Prisma.$ItemImagePayload, S>

  type ItemImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ItemImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ItemImageCountAggregateInputType | true
    }

  export interface ItemImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ItemImage'], meta: { name: 'ItemImage' } }
    /**
     * Find zero or one ItemImage that matches the filter.
     * @param {ItemImageFindUniqueArgs} args - Arguments to find a ItemImage
     * @example
     * // Get one ItemImage
     * const itemImage = await prisma.itemImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemImageFindUniqueArgs>(args: SelectSubset<T, ItemImageFindUniqueArgs<ExtArgs>>): Prisma__ItemImageClient<$Result.GetResult<Prisma.$ItemImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ItemImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ItemImageFindUniqueOrThrowArgs} args - Arguments to find a ItemImage
     * @example
     * // Get one ItemImage
     * const itemImage = await prisma.itemImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemImageClient<$Result.GetResult<Prisma.$ItemImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ItemImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemImageFindFirstArgs} args - Arguments to find a ItemImage
     * @example
     * // Get one ItemImage
     * const itemImage = await prisma.itemImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemImageFindFirstArgs>(args?: SelectSubset<T, ItemImageFindFirstArgs<ExtArgs>>): Prisma__ItemImageClient<$Result.GetResult<Prisma.$ItemImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ItemImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemImageFindFirstOrThrowArgs} args - Arguments to find a ItemImage
     * @example
     * // Get one ItemImage
     * const itemImage = await prisma.itemImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemImageClient<$Result.GetResult<Prisma.$ItemImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ItemImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ItemImages
     * const itemImages = await prisma.itemImage.findMany()
     * 
     * // Get first 10 ItemImages
     * const itemImages = await prisma.itemImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemImageWithIdOnly = await prisma.itemImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemImageFindManyArgs>(args?: SelectSubset<T, ItemImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ItemImage.
     * @param {ItemImageCreateArgs} args - Arguments to create a ItemImage.
     * @example
     * // Create one ItemImage
     * const ItemImage = await prisma.itemImage.create({
     *   data: {
     *     // ... data to create a ItemImage
     *   }
     * })
     * 
     */
    create<T extends ItemImageCreateArgs>(args: SelectSubset<T, ItemImageCreateArgs<ExtArgs>>): Prisma__ItemImageClient<$Result.GetResult<Prisma.$ItemImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ItemImages.
     * @param {ItemImageCreateManyArgs} args - Arguments to create many ItemImages.
     * @example
     * // Create many ItemImages
     * const itemImage = await prisma.itemImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemImageCreateManyArgs>(args?: SelectSubset<T, ItemImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ItemImage.
     * @param {ItemImageDeleteArgs} args - Arguments to delete one ItemImage.
     * @example
     * // Delete one ItemImage
     * const ItemImage = await prisma.itemImage.delete({
     *   where: {
     *     // ... filter to delete one ItemImage
     *   }
     * })
     * 
     */
    delete<T extends ItemImageDeleteArgs>(args: SelectSubset<T, ItemImageDeleteArgs<ExtArgs>>): Prisma__ItemImageClient<$Result.GetResult<Prisma.$ItemImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ItemImage.
     * @param {ItemImageUpdateArgs} args - Arguments to update one ItemImage.
     * @example
     * // Update one ItemImage
     * const itemImage = await prisma.itemImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemImageUpdateArgs>(args: SelectSubset<T, ItemImageUpdateArgs<ExtArgs>>): Prisma__ItemImageClient<$Result.GetResult<Prisma.$ItemImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ItemImages.
     * @param {ItemImageDeleteManyArgs} args - Arguments to filter ItemImages to delete.
     * @example
     * // Delete a few ItemImages
     * const { count } = await prisma.itemImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemImageDeleteManyArgs>(args?: SelectSubset<T, ItemImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ItemImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ItemImages
     * const itemImage = await prisma.itemImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemImageUpdateManyArgs>(args: SelectSubset<T, ItemImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ItemImage.
     * @param {ItemImageUpsertArgs} args - Arguments to update or create a ItemImage.
     * @example
     * // Update or create a ItemImage
     * const itemImage = await prisma.itemImage.upsert({
     *   create: {
     *     // ... data to create a ItemImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ItemImage we want to update
     *   }
     * })
     */
    upsert<T extends ItemImageUpsertArgs>(args: SelectSubset<T, ItemImageUpsertArgs<ExtArgs>>): Prisma__ItemImageClient<$Result.GetResult<Prisma.$ItemImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ItemImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemImageCountArgs} args - Arguments to filter ItemImages to count.
     * @example
     * // Count the number of ItemImages
     * const count = await prisma.itemImage.count({
     *   where: {
     *     // ... the filter for the ItemImages we want to count
     *   }
     * })
    **/
    count<T extends ItemImageCountArgs>(
      args?: Subset<T, ItemImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ItemImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemImageAggregateArgs>(args: Subset<T, ItemImageAggregateArgs>): Prisma.PrismaPromise<GetItemImageAggregateType<T>>

    /**
     * Group by ItemImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemImageGroupByArgs['orderBy'] }
        : { orderBy?: ItemImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ItemImage model
   */
  readonly fields: ItemImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ItemImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ItemImage model
   */
  interface ItemImageFieldRefs {
    readonly id: FieldRef<"ItemImage", 'Int'>
    readonly itemId: FieldRef<"ItemImage", 'Int'>
    readonly imageUrl: FieldRef<"ItemImage", 'String'>
    readonly isPrimary: FieldRef<"ItemImage", 'Boolean'>
    readonly caption: FieldRef<"ItemImage", 'String'>
    readonly sortOrder: FieldRef<"ItemImage", 'Int'>
    readonly createdAt: FieldRef<"ItemImage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ItemImage findUnique
   */
  export type ItemImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemImage
     */
    select?: ItemImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemImage
     */
    omit?: ItemImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemImageInclude<ExtArgs> | null
    /**
     * Filter, which ItemImage to fetch.
     */
    where: ItemImageWhereUniqueInput
  }

  /**
   * ItemImage findUniqueOrThrow
   */
  export type ItemImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemImage
     */
    select?: ItemImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemImage
     */
    omit?: ItemImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemImageInclude<ExtArgs> | null
    /**
     * Filter, which ItemImage to fetch.
     */
    where: ItemImageWhereUniqueInput
  }

  /**
   * ItemImage findFirst
   */
  export type ItemImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemImage
     */
    select?: ItemImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemImage
     */
    omit?: ItemImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemImageInclude<ExtArgs> | null
    /**
     * Filter, which ItemImage to fetch.
     */
    where?: ItemImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemImages to fetch.
     */
    orderBy?: ItemImageOrderByWithRelationInput | ItemImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ItemImages.
     */
    cursor?: ItemImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ItemImages.
     */
    distinct?: ItemImageScalarFieldEnum | ItemImageScalarFieldEnum[]
  }

  /**
   * ItemImage findFirstOrThrow
   */
  export type ItemImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemImage
     */
    select?: ItemImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemImage
     */
    omit?: ItemImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemImageInclude<ExtArgs> | null
    /**
     * Filter, which ItemImage to fetch.
     */
    where?: ItemImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemImages to fetch.
     */
    orderBy?: ItemImageOrderByWithRelationInput | ItemImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ItemImages.
     */
    cursor?: ItemImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ItemImages.
     */
    distinct?: ItemImageScalarFieldEnum | ItemImageScalarFieldEnum[]
  }

  /**
   * ItemImage findMany
   */
  export type ItemImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemImage
     */
    select?: ItemImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemImage
     */
    omit?: ItemImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemImageInclude<ExtArgs> | null
    /**
     * Filter, which ItemImages to fetch.
     */
    where?: ItemImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItemImages to fetch.
     */
    orderBy?: ItemImageOrderByWithRelationInput | ItemImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ItemImages.
     */
    cursor?: ItemImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItemImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItemImages.
     */
    skip?: number
    distinct?: ItemImageScalarFieldEnum | ItemImageScalarFieldEnum[]
  }

  /**
   * ItemImage create
   */
  export type ItemImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemImage
     */
    select?: ItemImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemImage
     */
    omit?: ItemImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemImageInclude<ExtArgs> | null
    /**
     * The data needed to create a ItemImage.
     */
    data: XOR<ItemImageCreateInput, ItemImageUncheckedCreateInput>
  }

  /**
   * ItemImage createMany
   */
  export type ItemImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ItemImages.
     */
    data: ItemImageCreateManyInput | ItemImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ItemImage update
   */
  export type ItemImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemImage
     */
    select?: ItemImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemImage
     */
    omit?: ItemImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemImageInclude<ExtArgs> | null
    /**
     * The data needed to update a ItemImage.
     */
    data: XOR<ItemImageUpdateInput, ItemImageUncheckedUpdateInput>
    /**
     * Choose, which ItemImage to update.
     */
    where: ItemImageWhereUniqueInput
  }

  /**
   * ItemImage updateMany
   */
  export type ItemImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ItemImages.
     */
    data: XOR<ItemImageUpdateManyMutationInput, ItemImageUncheckedUpdateManyInput>
    /**
     * Filter which ItemImages to update
     */
    where?: ItemImageWhereInput
    /**
     * Limit how many ItemImages to update.
     */
    limit?: number
  }

  /**
   * ItemImage upsert
   */
  export type ItemImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemImage
     */
    select?: ItemImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemImage
     */
    omit?: ItemImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemImageInclude<ExtArgs> | null
    /**
     * The filter to search for the ItemImage to update in case it exists.
     */
    where: ItemImageWhereUniqueInput
    /**
     * In case the ItemImage found by the `where` argument doesn't exist, create a new ItemImage with this data.
     */
    create: XOR<ItemImageCreateInput, ItemImageUncheckedCreateInput>
    /**
     * In case the ItemImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemImageUpdateInput, ItemImageUncheckedUpdateInput>
  }

  /**
   * ItemImage delete
   */
  export type ItemImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemImage
     */
    select?: ItemImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemImage
     */
    omit?: ItemImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemImageInclude<ExtArgs> | null
    /**
     * Filter which ItemImage to delete.
     */
    where: ItemImageWhereUniqueInput
  }

  /**
   * ItemImage deleteMany
   */
  export type ItemImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ItemImages to delete
     */
    where?: ItemImageWhereInput
    /**
     * Limit how many ItemImages to delete.
     */
    limit?: number
  }

  /**
   * ItemImage without action
   */
  export type ItemImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemImage
     */
    select?: ItemImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ItemImage
     */
    omit?: ItemImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemImageInclude<ExtArgs> | null
  }


  /**
   * Model CodLocation
   */

  export type AggregateCodLocation = {
    _count: CodLocationCountAggregateOutputType | null
    _avg: CodLocationAvgAggregateOutputType | null
    _sum: CodLocationSumAggregateOutputType | null
    _min: CodLocationMinAggregateOutputType | null
    _max: CodLocationMaxAggregateOutputType | null
  }

  export type CodLocationAvgAggregateOutputType = {
    id: number | null
    safetyRating: number | null
    accessibilityRating: number | null
    popularityCount: number | null
  }

  export type CodLocationSumAggregateOutputType = {
    id: number | null
    safetyRating: number | null
    accessibilityRating: number | null
    popularityCount: number | null
  }

  export type CodLocationMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    faculty: string | null
    building: string | null
    floor: string | null
    coordinates: string | null
    imageUrl: string | null
    safetyRating: number | null
    accessibilityRating: number | null
    popularityCount: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CodLocationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    faculty: string | null
    building: string | null
    floor: string | null
    coordinates: string | null
    imageUrl: string | null
    safetyRating: number | null
    accessibilityRating: number | null
    popularityCount: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CodLocationCountAggregateOutputType = {
    id: number
    name: number
    description: number
    faculty: number
    building: number
    floor: number
    coordinates: number
    imageUrl: number
    safetyRating: number
    accessibilityRating: number
    popularityCount: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CodLocationAvgAggregateInputType = {
    id?: true
    safetyRating?: true
    accessibilityRating?: true
    popularityCount?: true
  }

  export type CodLocationSumAggregateInputType = {
    id?: true
    safetyRating?: true
    accessibilityRating?: true
    popularityCount?: true
  }

  export type CodLocationMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    faculty?: true
    building?: true
    floor?: true
    coordinates?: true
    imageUrl?: true
    safetyRating?: true
    accessibilityRating?: true
    popularityCount?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CodLocationMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    faculty?: true
    building?: true
    floor?: true
    coordinates?: true
    imageUrl?: true
    safetyRating?: true
    accessibilityRating?: true
    popularityCount?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CodLocationCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    faculty?: true
    building?: true
    floor?: true
    coordinates?: true
    imageUrl?: true
    safetyRating?: true
    accessibilityRating?: true
    popularityCount?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CodLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CodLocation to aggregate.
     */
    where?: CodLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodLocations to fetch.
     */
    orderBy?: CodLocationOrderByWithRelationInput | CodLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CodLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CodLocations
    **/
    _count?: true | CodLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CodLocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CodLocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CodLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CodLocationMaxAggregateInputType
  }

  export type GetCodLocationAggregateType<T extends CodLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateCodLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCodLocation[P]>
      : GetScalarType<T[P], AggregateCodLocation[P]>
  }




  export type CodLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CodLocationWhereInput
    orderBy?: CodLocationOrderByWithAggregationInput | CodLocationOrderByWithAggregationInput[]
    by: CodLocationScalarFieldEnum[] | CodLocationScalarFieldEnum
    having?: CodLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CodLocationCountAggregateInputType | true
    _avg?: CodLocationAvgAggregateInputType
    _sum?: CodLocationSumAggregateInputType
    _min?: CodLocationMinAggregateInputType
    _max?: CodLocationMaxAggregateInputType
  }

  export type CodLocationGroupByOutputType = {
    id: number
    name: string
    description: string | null
    faculty: string | null
    building: string | null
    floor: string | null
    coordinates: string | null
    imageUrl: string | null
    safetyRating: number | null
    accessibilityRating: number | null
    popularityCount: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: CodLocationCountAggregateOutputType | null
    _avg: CodLocationAvgAggregateOutputType | null
    _sum: CodLocationSumAggregateOutputType | null
    _min: CodLocationMinAggregateOutputType | null
    _max: CodLocationMaxAggregateOutputType | null
  }

  type GetCodLocationGroupByPayload<T extends CodLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CodLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CodLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CodLocationGroupByOutputType[P]>
            : GetScalarType<T[P], CodLocationGroupByOutputType[P]>
        }
      >
    >


  export type CodLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    faculty?: boolean
    building?: boolean
    floor?: boolean
    coordinates?: boolean
    imageUrl?: boolean
    safetyRating?: boolean
    accessibilityRating?: boolean
    popularityCount?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["codLocation"]>



  export type CodLocationSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    faculty?: boolean
    building?: boolean
    floor?: boolean
    coordinates?: boolean
    imageUrl?: boolean
    safetyRating?: boolean
    accessibilityRating?: boolean
    popularityCount?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CodLocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "faculty" | "building" | "floor" | "coordinates" | "imageUrl" | "safetyRating" | "accessibilityRating" | "popularityCount" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["codLocation"]>

  export type $CodLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CodLocation"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      faculty: string | null
      building: string | null
      floor: string | null
      coordinates: string | null
      imageUrl: string | null
      safetyRating: number | null
      accessibilityRating: number | null
      popularityCount: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["codLocation"]>
    composites: {}
  }

  type CodLocationGetPayload<S extends boolean | null | undefined | CodLocationDefaultArgs> = $Result.GetResult<Prisma.$CodLocationPayload, S>

  type CodLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CodLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CodLocationCountAggregateInputType | true
    }

  export interface CodLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CodLocation'], meta: { name: 'CodLocation' } }
    /**
     * Find zero or one CodLocation that matches the filter.
     * @param {CodLocationFindUniqueArgs} args - Arguments to find a CodLocation
     * @example
     * // Get one CodLocation
     * const codLocation = await prisma.codLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CodLocationFindUniqueArgs>(args: SelectSubset<T, CodLocationFindUniqueArgs<ExtArgs>>): Prisma__CodLocationClient<$Result.GetResult<Prisma.$CodLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CodLocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CodLocationFindUniqueOrThrowArgs} args - Arguments to find a CodLocation
     * @example
     * // Get one CodLocation
     * const codLocation = await prisma.codLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CodLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, CodLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CodLocationClient<$Result.GetResult<Prisma.$CodLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CodLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodLocationFindFirstArgs} args - Arguments to find a CodLocation
     * @example
     * // Get one CodLocation
     * const codLocation = await prisma.codLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CodLocationFindFirstArgs>(args?: SelectSubset<T, CodLocationFindFirstArgs<ExtArgs>>): Prisma__CodLocationClient<$Result.GetResult<Prisma.$CodLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CodLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodLocationFindFirstOrThrowArgs} args - Arguments to find a CodLocation
     * @example
     * // Get one CodLocation
     * const codLocation = await prisma.codLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CodLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, CodLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__CodLocationClient<$Result.GetResult<Prisma.$CodLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CodLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CodLocations
     * const codLocations = await prisma.codLocation.findMany()
     * 
     * // Get first 10 CodLocations
     * const codLocations = await prisma.codLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const codLocationWithIdOnly = await prisma.codLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CodLocationFindManyArgs>(args?: SelectSubset<T, CodLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CodLocation.
     * @param {CodLocationCreateArgs} args - Arguments to create a CodLocation.
     * @example
     * // Create one CodLocation
     * const CodLocation = await prisma.codLocation.create({
     *   data: {
     *     // ... data to create a CodLocation
     *   }
     * })
     * 
     */
    create<T extends CodLocationCreateArgs>(args: SelectSubset<T, CodLocationCreateArgs<ExtArgs>>): Prisma__CodLocationClient<$Result.GetResult<Prisma.$CodLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CodLocations.
     * @param {CodLocationCreateManyArgs} args - Arguments to create many CodLocations.
     * @example
     * // Create many CodLocations
     * const codLocation = await prisma.codLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CodLocationCreateManyArgs>(args?: SelectSubset<T, CodLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CodLocation.
     * @param {CodLocationDeleteArgs} args - Arguments to delete one CodLocation.
     * @example
     * // Delete one CodLocation
     * const CodLocation = await prisma.codLocation.delete({
     *   where: {
     *     // ... filter to delete one CodLocation
     *   }
     * })
     * 
     */
    delete<T extends CodLocationDeleteArgs>(args: SelectSubset<T, CodLocationDeleteArgs<ExtArgs>>): Prisma__CodLocationClient<$Result.GetResult<Prisma.$CodLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CodLocation.
     * @param {CodLocationUpdateArgs} args - Arguments to update one CodLocation.
     * @example
     * // Update one CodLocation
     * const codLocation = await prisma.codLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CodLocationUpdateArgs>(args: SelectSubset<T, CodLocationUpdateArgs<ExtArgs>>): Prisma__CodLocationClient<$Result.GetResult<Prisma.$CodLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CodLocations.
     * @param {CodLocationDeleteManyArgs} args - Arguments to filter CodLocations to delete.
     * @example
     * // Delete a few CodLocations
     * const { count } = await prisma.codLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CodLocationDeleteManyArgs>(args?: SelectSubset<T, CodLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CodLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CodLocations
     * const codLocation = await prisma.codLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CodLocationUpdateManyArgs>(args: SelectSubset<T, CodLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CodLocation.
     * @param {CodLocationUpsertArgs} args - Arguments to update or create a CodLocation.
     * @example
     * // Update or create a CodLocation
     * const codLocation = await prisma.codLocation.upsert({
     *   create: {
     *     // ... data to create a CodLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CodLocation we want to update
     *   }
     * })
     */
    upsert<T extends CodLocationUpsertArgs>(args: SelectSubset<T, CodLocationUpsertArgs<ExtArgs>>): Prisma__CodLocationClient<$Result.GetResult<Prisma.$CodLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CodLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodLocationCountArgs} args - Arguments to filter CodLocations to count.
     * @example
     * // Count the number of CodLocations
     * const count = await prisma.codLocation.count({
     *   where: {
     *     // ... the filter for the CodLocations we want to count
     *   }
     * })
    **/
    count<T extends CodLocationCountArgs>(
      args?: Subset<T, CodLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CodLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CodLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CodLocationAggregateArgs>(args: Subset<T, CodLocationAggregateArgs>): Prisma.PrismaPromise<GetCodLocationAggregateType<T>>

    /**
     * Group by CodLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CodLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CodLocationGroupByArgs['orderBy'] }
        : { orderBy?: CodLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CodLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCodLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CodLocation model
   */
  readonly fields: CodLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CodLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CodLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CodLocation model
   */
  interface CodLocationFieldRefs {
    readonly id: FieldRef<"CodLocation", 'Int'>
    readonly name: FieldRef<"CodLocation", 'String'>
    readonly description: FieldRef<"CodLocation", 'String'>
    readonly faculty: FieldRef<"CodLocation", 'String'>
    readonly building: FieldRef<"CodLocation", 'String'>
    readonly floor: FieldRef<"CodLocation", 'String'>
    readonly coordinates: FieldRef<"CodLocation", 'String'>
    readonly imageUrl: FieldRef<"CodLocation", 'String'>
    readonly safetyRating: FieldRef<"CodLocation", 'Float'>
    readonly accessibilityRating: FieldRef<"CodLocation", 'Float'>
    readonly popularityCount: FieldRef<"CodLocation", 'Int'>
    readonly isActive: FieldRef<"CodLocation", 'Boolean'>
    readonly createdAt: FieldRef<"CodLocation", 'DateTime'>
    readonly updatedAt: FieldRef<"CodLocation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CodLocation findUnique
   */
  export type CodLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodLocation
     */
    select?: CodLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CodLocation
     */
    omit?: CodLocationOmit<ExtArgs> | null
    /**
     * Filter, which CodLocation to fetch.
     */
    where: CodLocationWhereUniqueInput
  }

  /**
   * CodLocation findUniqueOrThrow
   */
  export type CodLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodLocation
     */
    select?: CodLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CodLocation
     */
    omit?: CodLocationOmit<ExtArgs> | null
    /**
     * Filter, which CodLocation to fetch.
     */
    where: CodLocationWhereUniqueInput
  }

  /**
   * CodLocation findFirst
   */
  export type CodLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodLocation
     */
    select?: CodLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CodLocation
     */
    omit?: CodLocationOmit<ExtArgs> | null
    /**
     * Filter, which CodLocation to fetch.
     */
    where?: CodLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodLocations to fetch.
     */
    orderBy?: CodLocationOrderByWithRelationInput | CodLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CodLocations.
     */
    cursor?: CodLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CodLocations.
     */
    distinct?: CodLocationScalarFieldEnum | CodLocationScalarFieldEnum[]
  }

  /**
   * CodLocation findFirstOrThrow
   */
  export type CodLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodLocation
     */
    select?: CodLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CodLocation
     */
    omit?: CodLocationOmit<ExtArgs> | null
    /**
     * Filter, which CodLocation to fetch.
     */
    where?: CodLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodLocations to fetch.
     */
    orderBy?: CodLocationOrderByWithRelationInput | CodLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CodLocations.
     */
    cursor?: CodLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CodLocations.
     */
    distinct?: CodLocationScalarFieldEnum | CodLocationScalarFieldEnum[]
  }

  /**
   * CodLocation findMany
   */
  export type CodLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodLocation
     */
    select?: CodLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CodLocation
     */
    omit?: CodLocationOmit<ExtArgs> | null
    /**
     * Filter, which CodLocations to fetch.
     */
    where?: CodLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodLocations to fetch.
     */
    orderBy?: CodLocationOrderByWithRelationInput | CodLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CodLocations.
     */
    cursor?: CodLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodLocations.
     */
    skip?: number
    distinct?: CodLocationScalarFieldEnum | CodLocationScalarFieldEnum[]
  }

  /**
   * CodLocation create
   */
  export type CodLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodLocation
     */
    select?: CodLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CodLocation
     */
    omit?: CodLocationOmit<ExtArgs> | null
    /**
     * The data needed to create a CodLocation.
     */
    data: XOR<CodLocationCreateInput, CodLocationUncheckedCreateInput>
  }

  /**
   * CodLocation createMany
   */
  export type CodLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CodLocations.
     */
    data: CodLocationCreateManyInput | CodLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CodLocation update
   */
  export type CodLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodLocation
     */
    select?: CodLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CodLocation
     */
    omit?: CodLocationOmit<ExtArgs> | null
    /**
     * The data needed to update a CodLocation.
     */
    data: XOR<CodLocationUpdateInput, CodLocationUncheckedUpdateInput>
    /**
     * Choose, which CodLocation to update.
     */
    where: CodLocationWhereUniqueInput
  }

  /**
   * CodLocation updateMany
   */
  export type CodLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CodLocations.
     */
    data: XOR<CodLocationUpdateManyMutationInput, CodLocationUncheckedUpdateManyInput>
    /**
     * Filter which CodLocations to update
     */
    where?: CodLocationWhereInput
    /**
     * Limit how many CodLocations to update.
     */
    limit?: number
  }

  /**
   * CodLocation upsert
   */
  export type CodLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodLocation
     */
    select?: CodLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CodLocation
     */
    omit?: CodLocationOmit<ExtArgs> | null
    /**
     * The filter to search for the CodLocation to update in case it exists.
     */
    where: CodLocationWhereUniqueInput
    /**
     * In case the CodLocation found by the `where` argument doesn't exist, create a new CodLocation with this data.
     */
    create: XOR<CodLocationCreateInput, CodLocationUncheckedCreateInput>
    /**
     * In case the CodLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CodLocationUpdateInput, CodLocationUncheckedUpdateInput>
  }

  /**
   * CodLocation delete
   */
  export type CodLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodLocation
     */
    select?: CodLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CodLocation
     */
    omit?: CodLocationOmit<ExtArgs> | null
    /**
     * Filter which CodLocation to delete.
     */
    where: CodLocationWhereUniqueInput
  }

  /**
   * CodLocation deleteMany
   */
  export type CodLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CodLocations to delete
     */
    where?: CodLocationWhereInput
    /**
     * Limit how many CodLocations to delete.
     */
    limit?: number
  }

  /**
   * CodLocation without action
   */
  export type CodLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodLocation
     */
    select?: CodLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CodLocation
     */
    omit?: CodLocationOmit<ExtArgs> | null
  }


  /**
   * Model UserBadge
   */

  export type AggregateUserBadge = {
    _count: UserBadgeCountAggregateOutputType | null
    _avg: UserBadgeAvgAggregateOutputType | null
    _sum: UserBadgeSumAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  export type UserBadgeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserBadgeSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserBadgeMinAggregateOutputType = {
    id: number | null
    userId: number | null
    badgeType: $Enums.BadgeType | null
    title: string | null
    description: string | null
    iconUrl: string | null
    earnedAt: Date | null
  }

  export type UserBadgeMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    badgeType: $Enums.BadgeType | null
    title: string | null
    description: string | null
    iconUrl: string | null
    earnedAt: Date | null
  }

  export type UserBadgeCountAggregateOutputType = {
    id: number
    userId: number
    badgeType: number
    title: number
    description: number
    iconUrl: number
    earnedAt: number
    _all: number
  }


  export type UserBadgeAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserBadgeSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserBadgeMinAggregateInputType = {
    id?: true
    userId?: true
    badgeType?: true
    title?: true
    description?: true
    iconUrl?: true
    earnedAt?: true
  }

  export type UserBadgeMaxAggregateInputType = {
    id?: true
    userId?: true
    badgeType?: true
    title?: true
    description?: true
    iconUrl?: true
    earnedAt?: true
  }

  export type UserBadgeCountAggregateInputType = {
    id?: true
    userId?: true
    badgeType?: true
    title?: true
    description?: true
    iconUrl?: true
    earnedAt?: true
    _all?: true
  }

  export type UserBadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadge to aggregate.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBadges
    **/
    _count?: true | UserBadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserBadgeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserBadgeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBadgeMaxAggregateInputType
  }

  export type GetUserBadgeAggregateType<T extends UserBadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBadge[P]>
      : GetScalarType<T[P], AggregateUserBadge[P]>
  }




  export type UserBadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithAggregationInput | UserBadgeOrderByWithAggregationInput[]
    by: UserBadgeScalarFieldEnum[] | UserBadgeScalarFieldEnum
    having?: UserBadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBadgeCountAggregateInputType | true
    _avg?: UserBadgeAvgAggregateInputType
    _sum?: UserBadgeSumAggregateInputType
    _min?: UserBadgeMinAggregateInputType
    _max?: UserBadgeMaxAggregateInputType
  }

  export type UserBadgeGroupByOutputType = {
    id: number
    userId: number
    badgeType: $Enums.BadgeType
    title: string
    description: string | null
    iconUrl: string | null
    earnedAt: Date
    _count: UserBadgeCountAggregateOutputType | null
    _avg: UserBadgeAvgAggregateOutputType | null
    _sum: UserBadgeSumAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  type GetUserBadgeGroupByPayload<T extends UserBadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserBadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserBadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
            : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
        }
      >
    >


  export type UserBadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    badgeType?: boolean
    title?: boolean
    description?: boolean
    iconUrl?: boolean
    earnedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>



  export type UserBadgeSelectScalar = {
    id?: boolean
    userId?: boolean
    badgeType?: boolean
    title?: boolean
    description?: boolean
    iconUrl?: boolean
    earnedAt?: boolean
  }

  export type UserBadgeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "badgeType" | "title" | "description" | "iconUrl" | "earnedAt", ExtArgs["result"]["userBadge"]>
  export type UserBadgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserBadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserBadge"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      badgeType: $Enums.BadgeType
      title: string
      description: string | null
      iconUrl: string | null
      earnedAt: Date
    }, ExtArgs["result"]["userBadge"]>
    composites: {}
  }

  type UserBadgeGetPayload<S extends boolean | null | undefined | UserBadgeDefaultArgs> = $Result.GetResult<Prisma.$UserBadgePayload, S>

  type UserBadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserBadgeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserBadgeCountAggregateInputType | true
    }

  export interface UserBadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserBadge'], meta: { name: 'UserBadge' } }
    /**
     * Find zero or one UserBadge that matches the filter.
     * @param {UserBadgeFindUniqueArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserBadgeFindUniqueArgs>(args: SelectSubset<T, UserBadgeFindUniqueArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserBadge that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserBadgeFindUniqueOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserBadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserBadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserBadge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserBadgeFindFirstArgs>(args?: SelectSubset<T, UserBadgeFindFirstArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserBadge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserBadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserBadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserBadges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBadges
     * const userBadges = await prisma.userBadge.findMany()
     * 
     * // Get first 10 UserBadges
     * const userBadges = await prisma.userBadge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserBadgeFindManyArgs>(args?: SelectSubset<T, UserBadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserBadge.
     * @param {UserBadgeCreateArgs} args - Arguments to create a UserBadge.
     * @example
     * // Create one UserBadge
     * const UserBadge = await prisma.userBadge.create({
     *   data: {
     *     // ... data to create a UserBadge
     *   }
     * })
     * 
     */
    create<T extends UserBadgeCreateArgs>(args: SelectSubset<T, UserBadgeCreateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserBadges.
     * @param {UserBadgeCreateManyArgs} args - Arguments to create many UserBadges.
     * @example
     * // Create many UserBadges
     * const userBadge = await prisma.userBadge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserBadgeCreateManyArgs>(args?: SelectSubset<T, UserBadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserBadge.
     * @param {UserBadgeDeleteArgs} args - Arguments to delete one UserBadge.
     * @example
     * // Delete one UserBadge
     * const UserBadge = await prisma.userBadge.delete({
     *   where: {
     *     // ... filter to delete one UserBadge
     *   }
     * })
     * 
     */
    delete<T extends UserBadgeDeleteArgs>(args: SelectSubset<T, UserBadgeDeleteArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserBadge.
     * @param {UserBadgeUpdateArgs} args - Arguments to update one UserBadge.
     * @example
     * // Update one UserBadge
     * const userBadge = await prisma.userBadge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserBadgeUpdateArgs>(args: SelectSubset<T, UserBadgeUpdateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserBadges.
     * @param {UserBadgeDeleteManyArgs} args - Arguments to filter UserBadges to delete.
     * @example
     * // Delete a few UserBadges
     * const { count } = await prisma.userBadge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserBadgeDeleteManyArgs>(args?: SelectSubset<T, UserBadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBadges
     * const userBadge = await prisma.userBadge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserBadgeUpdateManyArgs>(args: SelectSubset<T, UserBadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserBadge.
     * @param {UserBadgeUpsertArgs} args - Arguments to update or create a UserBadge.
     * @example
     * // Update or create a UserBadge
     * const userBadge = await prisma.userBadge.upsert({
     *   create: {
     *     // ... data to create a UserBadge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBadge we want to update
     *   }
     * })
     */
    upsert<T extends UserBadgeUpsertArgs>(args: SelectSubset<T, UserBadgeUpsertArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeCountArgs} args - Arguments to filter UserBadges to count.
     * @example
     * // Count the number of UserBadges
     * const count = await prisma.userBadge.count({
     *   where: {
     *     // ... the filter for the UserBadges we want to count
     *   }
     * })
    **/
    count<T extends UserBadgeCountArgs>(
      args?: Subset<T, UserBadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBadgeAggregateArgs>(args: Subset<T, UserBadgeAggregateArgs>): Prisma.PrismaPromise<GetUserBadgeAggregateType<T>>

    /**
     * Group by UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBadgeGroupByArgs['orderBy'] }
        : { orderBy?: UserBadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserBadge model
   */
  readonly fields: UserBadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBadge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserBadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserBadge model
   */
  interface UserBadgeFieldRefs {
    readonly id: FieldRef<"UserBadge", 'Int'>
    readonly userId: FieldRef<"UserBadge", 'Int'>
    readonly badgeType: FieldRef<"UserBadge", 'BadgeType'>
    readonly title: FieldRef<"UserBadge", 'String'>
    readonly description: FieldRef<"UserBadge", 'String'>
    readonly iconUrl: FieldRef<"UserBadge", 'String'>
    readonly earnedAt: FieldRef<"UserBadge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserBadge findUnique
   */
  export type UserBadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findUniqueOrThrow
   */
  export type UserBadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findFirst
   */
  export type UserBadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findFirstOrThrow
   */
  export type UserBadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findMany
   */
  export type UserBadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadges to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge create
   */
  export type UserBadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The data needed to create a UserBadge.
     */
    data: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
  }

  /**
   * UserBadge createMany
   */
  export type UserBadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserBadges.
     */
    data: UserBadgeCreateManyInput | UserBadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserBadge update
   */
  export type UserBadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The data needed to update a UserBadge.
     */
    data: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
    /**
     * Choose, which UserBadge to update.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge updateMany
   */
  export type UserBadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserBadges.
     */
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyInput>
    /**
     * Filter which UserBadges to update
     */
    where?: UserBadgeWhereInput
    /**
     * Limit how many UserBadges to update.
     */
    limit?: number
  }

  /**
   * UserBadge upsert
   */
  export type UserBadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The filter to search for the UserBadge to update in case it exists.
     */
    where: UserBadgeWhereUniqueInput
    /**
     * In case the UserBadge found by the `where` argument doesn't exist, create a new UserBadge with this data.
     */
    create: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
    /**
     * In case the UserBadge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
  }

  /**
   * UserBadge delete
   */
  export type UserBadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter which UserBadge to delete.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge deleteMany
   */
  export type UserBadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadges to delete
     */
    where?: UserBadgeWhereInput
    /**
     * Limit how many UserBadges to delete.
     */
    limit?: number
  }

  /**
   * UserBadge without action
   */
  export type UserBadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
  }


  /**
   * Model DonationRequest
   */

  export type AggregateDonationRequest = {
    _count: DonationRequestCountAggregateOutputType | null
    _avg: DonationRequestAvgAggregateOutputType | null
    _sum: DonationRequestSumAggregateOutputType | null
    _min: DonationRequestMinAggregateOutputType | null
    _max: DonationRequestMaxAggregateOutputType | null
  }

  export type DonationRequestAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    maxQuantity: number | null
    receivedCount: number | null
  }

  export type DonationRequestSumAggregateOutputType = {
    id: number | null
    userId: number | null
    maxQuantity: number | null
    receivedCount: number | null
  }

  export type DonationRequestMinAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    description: string | null
    category: string | null
    urgency: $Enums.DonationUrgency | null
    status: $Enums.DonationRequestStatus | null
    maxQuantity: number | null
    receivedCount: number | null
    location: string | null
    contactInfo: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DonationRequestMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    description: string | null
    category: string | null
    urgency: $Enums.DonationUrgency | null
    status: $Enums.DonationRequestStatus | null
    maxQuantity: number | null
    receivedCount: number | null
    location: string | null
    contactInfo: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DonationRequestCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    description: number
    category: number
    urgency: number
    status: number
    maxQuantity: number
    receivedCount: number
    location: number
    contactInfo: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DonationRequestAvgAggregateInputType = {
    id?: true
    userId?: true
    maxQuantity?: true
    receivedCount?: true
  }

  export type DonationRequestSumAggregateInputType = {
    id?: true
    userId?: true
    maxQuantity?: true
    receivedCount?: true
  }

  export type DonationRequestMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    category?: true
    urgency?: true
    status?: true
    maxQuantity?: true
    receivedCount?: true
    location?: true
    contactInfo?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DonationRequestMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    category?: true
    urgency?: true
    status?: true
    maxQuantity?: true
    receivedCount?: true
    location?: true
    contactInfo?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DonationRequestCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    description?: true
    category?: true
    urgency?: true
    status?: true
    maxQuantity?: true
    receivedCount?: true
    location?: true
    contactInfo?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DonationRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DonationRequest to aggregate.
     */
    where?: DonationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationRequests to fetch.
     */
    orderBy?: DonationRequestOrderByWithRelationInput | DonationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DonationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DonationRequests
    **/
    _count?: true | DonationRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DonationRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DonationRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DonationRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DonationRequestMaxAggregateInputType
  }

  export type GetDonationRequestAggregateType<T extends DonationRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateDonationRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDonationRequest[P]>
      : GetScalarType<T[P], AggregateDonationRequest[P]>
  }




  export type DonationRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DonationRequestWhereInput
    orderBy?: DonationRequestOrderByWithAggregationInput | DonationRequestOrderByWithAggregationInput[]
    by: DonationRequestScalarFieldEnum[] | DonationRequestScalarFieldEnum
    having?: DonationRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DonationRequestCountAggregateInputType | true
    _avg?: DonationRequestAvgAggregateInputType
    _sum?: DonationRequestSumAggregateInputType
    _min?: DonationRequestMinAggregateInputType
    _max?: DonationRequestMaxAggregateInputType
  }

  export type DonationRequestGroupByOutputType = {
    id: number
    userId: number
    title: string
    description: string
    category: string | null
    urgency: $Enums.DonationUrgency
    status: $Enums.DonationRequestStatus
    maxQuantity: number | null
    receivedCount: number
    location: string | null
    contactInfo: string | null
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: DonationRequestCountAggregateOutputType | null
    _avg: DonationRequestAvgAggregateOutputType | null
    _sum: DonationRequestSumAggregateOutputType | null
    _min: DonationRequestMinAggregateOutputType | null
    _max: DonationRequestMaxAggregateOutputType | null
  }

  type GetDonationRequestGroupByPayload<T extends DonationRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DonationRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DonationRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DonationRequestGroupByOutputType[P]>
            : GetScalarType<T[P], DonationRequestGroupByOutputType[P]>
        }
      >
    >


  export type DonationRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    urgency?: boolean
    status?: boolean
    maxQuantity?: boolean
    receivedCount?: boolean
    location?: boolean
    contactInfo?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    donationDistributions?: boolean | DonationRequest$donationDistributionsArgs<ExtArgs>
    _count?: boolean | DonationRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["donationRequest"]>



  export type DonationRequestSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    urgency?: boolean
    status?: boolean
    maxQuantity?: boolean
    receivedCount?: boolean
    location?: boolean
    contactInfo?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DonationRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "description" | "category" | "urgency" | "status" | "maxQuantity" | "receivedCount" | "location" | "contactInfo" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["donationRequest"]>
  export type DonationRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    donationDistributions?: boolean | DonationRequest$donationDistributionsArgs<ExtArgs>
    _count?: boolean | DonationRequestCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DonationRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DonationRequest"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      donationDistributions: Prisma.$DonationDistributionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      title: string
      description: string
      category: string | null
      urgency: $Enums.DonationUrgency
      status: $Enums.DonationRequestStatus
      maxQuantity: number | null
      receivedCount: number
      location: string | null
      contactInfo: string | null
      expiresAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["donationRequest"]>
    composites: {}
  }

  type DonationRequestGetPayload<S extends boolean | null | undefined | DonationRequestDefaultArgs> = $Result.GetResult<Prisma.$DonationRequestPayload, S>

  type DonationRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DonationRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DonationRequestCountAggregateInputType | true
    }

  export interface DonationRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DonationRequest'], meta: { name: 'DonationRequest' } }
    /**
     * Find zero or one DonationRequest that matches the filter.
     * @param {DonationRequestFindUniqueArgs} args - Arguments to find a DonationRequest
     * @example
     * // Get one DonationRequest
     * const donationRequest = await prisma.donationRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DonationRequestFindUniqueArgs>(args: SelectSubset<T, DonationRequestFindUniqueArgs<ExtArgs>>): Prisma__DonationRequestClient<$Result.GetResult<Prisma.$DonationRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DonationRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DonationRequestFindUniqueOrThrowArgs} args - Arguments to find a DonationRequest
     * @example
     * // Get one DonationRequest
     * const donationRequest = await prisma.donationRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DonationRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, DonationRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DonationRequestClient<$Result.GetResult<Prisma.$DonationRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DonationRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationRequestFindFirstArgs} args - Arguments to find a DonationRequest
     * @example
     * // Get one DonationRequest
     * const donationRequest = await prisma.donationRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DonationRequestFindFirstArgs>(args?: SelectSubset<T, DonationRequestFindFirstArgs<ExtArgs>>): Prisma__DonationRequestClient<$Result.GetResult<Prisma.$DonationRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DonationRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationRequestFindFirstOrThrowArgs} args - Arguments to find a DonationRequest
     * @example
     * // Get one DonationRequest
     * const donationRequest = await prisma.donationRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DonationRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, DonationRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__DonationRequestClient<$Result.GetResult<Prisma.$DonationRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DonationRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DonationRequests
     * const donationRequests = await prisma.donationRequest.findMany()
     * 
     * // Get first 10 DonationRequests
     * const donationRequests = await prisma.donationRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const donationRequestWithIdOnly = await prisma.donationRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DonationRequestFindManyArgs>(args?: SelectSubset<T, DonationRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DonationRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DonationRequest.
     * @param {DonationRequestCreateArgs} args - Arguments to create a DonationRequest.
     * @example
     * // Create one DonationRequest
     * const DonationRequest = await prisma.donationRequest.create({
     *   data: {
     *     // ... data to create a DonationRequest
     *   }
     * })
     * 
     */
    create<T extends DonationRequestCreateArgs>(args: SelectSubset<T, DonationRequestCreateArgs<ExtArgs>>): Prisma__DonationRequestClient<$Result.GetResult<Prisma.$DonationRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DonationRequests.
     * @param {DonationRequestCreateManyArgs} args - Arguments to create many DonationRequests.
     * @example
     * // Create many DonationRequests
     * const donationRequest = await prisma.donationRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DonationRequestCreateManyArgs>(args?: SelectSubset<T, DonationRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DonationRequest.
     * @param {DonationRequestDeleteArgs} args - Arguments to delete one DonationRequest.
     * @example
     * // Delete one DonationRequest
     * const DonationRequest = await prisma.donationRequest.delete({
     *   where: {
     *     // ... filter to delete one DonationRequest
     *   }
     * })
     * 
     */
    delete<T extends DonationRequestDeleteArgs>(args: SelectSubset<T, DonationRequestDeleteArgs<ExtArgs>>): Prisma__DonationRequestClient<$Result.GetResult<Prisma.$DonationRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DonationRequest.
     * @param {DonationRequestUpdateArgs} args - Arguments to update one DonationRequest.
     * @example
     * // Update one DonationRequest
     * const donationRequest = await prisma.donationRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DonationRequestUpdateArgs>(args: SelectSubset<T, DonationRequestUpdateArgs<ExtArgs>>): Prisma__DonationRequestClient<$Result.GetResult<Prisma.$DonationRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DonationRequests.
     * @param {DonationRequestDeleteManyArgs} args - Arguments to filter DonationRequests to delete.
     * @example
     * // Delete a few DonationRequests
     * const { count } = await prisma.donationRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DonationRequestDeleteManyArgs>(args?: SelectSubset<T, DonationRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DonationRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DonationRequests
     * const donationRequest = await prisma.donationRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DonationRequestUpdateManyArgs>(args: SelectSubset<T, DonationRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DonationRequest.
     * @param {DonationRequestUpsertArgs} args - Arguments to update or create a DonationRequest.
     * @example
     * // Update or create a DonationRequest
     * const donationRequest = await prisma.donationRequest.upsert({
     *   create: {
     *     // ... data to create a DonationRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DonationRequest we want to update
     *   }
     * })
     */
    upsert<T extends DonationRequestUpsertArgs>(args: SelectSubset<T, DonationRequestUpsertArgs<ExtArgs>>): Prisma__DonationRequestClient<$Result.GetResult<Prisma.$DonationRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DonationRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationRequestCountArgs} args - Arguments to filter DonationRequests to count.
     * @example
     * // Count the number of DonationRequests
     * const count = await prisma.donationRequest.count({
     *   where: {
     *     // ... the filter for the DonationRequests we want to count
     *   }
     * })
    **/
    count<T extends DonationRequestCountArgs>(
      args?: Subset<T, DonationRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DonationRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DonationRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DonationRequestAggregateArgs>(args: Subset<T, DonationRequestAggregateArgs>): Prisma.PrismaPromise<GetDonationRequestAggregateType<T>>

    /**
     * Group by DonationRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DonationRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DonationRequestGroupByArgs['orderBy'] }
        : { orderBy?: DonationRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DonationRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonationRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DonationRequest model
   */
  readonly fields: DonationRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DonationRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DonationRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    donationDistributions<T extends DonationRequest$donationDistributionsArgs<ExtArgs> = {}>(args?: Subset<T, DonationRequest$donationDistributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DonationDistributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DonationRequest model
   */
  interface DonationRequestFieldRefs {
    readonly id: FieldRef<"DonationRequest", 'Int'>
    readonly userId: FieldRef<"DonationRequest", 'Int'>
    readonly title: FieldRef<"DonationRequest", 'String'>
    readonly description: FieldRef<"DonationRequest", 'String'>
    readonly category: FieldRef<"DonationRequest", 'String'>
    readonly urgency: FieldRef<"DonationRequest", 'DonationUrgency'>
    readonly status: FieldRef<"DonationRequest", 'DonationRequestStatus'>
    readonly maxQuantity: FieldRef<"DonationRequest", 'Int'>
    readonly receivedCount: FieldRef<"DonationRequest", 'Int'>
    readonly location: FieldRef<"DonationRequest", 'String'>
    readonly contactInfo: FieldRef<"DonationRequest", 'String'>
    readonly expiresAt: FieldRef<"DonationRequest", 'DateTime'>
    readonly createdAt: FieldRef<"DonationRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"DonationRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DonationRequest findUnique
   */
  export type DonationRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationRequest
     */
    select?: DonationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationRequest
     */
    omit?: DonationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationRequestInclude<ExtArgs> | null
    /**
     * Filter, which DonationRequest to fetch.
     */
    where: DonationRequestWhereUniqueInput
  }

  /**
   * DonationRequest findUniqueOrThrow
   */
  export type DonationRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationRequest
     */
    select?: DonationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationRequest
     */
    omit?: DonationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationRequestInclude<ExtArgs> | null
    /**
     * Filter, which DonationRequest to fetch.
     */
    where: DonationRequestWhereUniqueInput
  }

  /**
   * DonationRequest findFirst
   */
  export type DonationRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationRequest
     */
    select?: DonationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationRequest
     */
    omit?: DonationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationRequestInclude<ExtArgs> | null
    /**
     * Filter, which DonationRequest to fetch.
     */
    where?: DonationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationRequests to fetch.
     */
    orderBy?: DonationRequestOrderByWithRelationInput | DonationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DonationRequests.
     */
    cursor?: DonationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DonationRequests.
     */
    distinct?: DonationRequestScalarFieldEnum | DonationRequestScalarFieldEnum[]
  }

  /**
   * DonationRequest findFirstOrThrow
   */
  export type DonationRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationRequest
     */
    select?: DonationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationRequest
     */
    omit?: DonationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationRequestInclude<ExtArgs> | null
    /**
     * Filter, which DonationRequest to fetch.
     */
    where?: DonationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationRequests to fetch.
     */
    orderBy?: DonationRequestOrderByWithRelationInput | DonationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DonationRequests.
     */
    cursor?: DonationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DonationRequests.
     */
    distinct?: DonationRequestScalarFieldEnum | DonationRequestScalarFieldEnum[]
  }

  /**
   * DonationRequest findMany
   */
  export type DonationRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationRequest
     */
    select?: DonationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationRequest
     */
    omit?: DonationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationRequestInclude<ExtArgs> | null
    /**
     * Filter, which DonationRequests to fetch.
     */
    where?: DonationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationRequests to fetch.
     */
    orderBy?: DonationRequestOrderByWithRelationInput | DonationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DonationRequests.
     */
    cursor?: DonationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationRequests.
     */
    skip?: number
    distinct?: DonationRequestScalarFieldEnum | DonationRequestScalarFieldEnum[]
  }

  /**
   * DonationRequest create
   */
  export type DonationRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationRequest
     */
    select?: DonationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationRequest
     */
    omit?: DonationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a DonationRequest.
     */
    data: XOR<DonationRequestCreateInput, DonationRequestUncheckedCreateInput>
  }

  /**
   * DonationRequest createMany
   */
  export type DonationRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DonationRequests.
     */
    data: DonationRequestCreateManyInput | DonationRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DonationRequest update
   */
  export type DonationRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationRequest
     */
    select?: DonationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationRequest
     */
    omit?: DonationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a DonationRequest.
     */
    data: XOR<DonationRequestUpdateInput, DonationRequestUncheckedUpdateInput>
    /**
     * Choose, which DonationRequest to update.
     */
    where: DonationRequestWhereUniqueInput
  }

  /**
   * DonationRequest updateMany
   */
  export type DonationRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DonationRequests.
     */
    data: XOR<DonationRequestUpdateManyMutationInput, DonationRequestUncheckedUpdateManyInput>
    /**
     * Filter which DonationRequests to update
     */
    where?: DonationRequestWhereInput
    /**
     * Limit how many DonationRequests to update.
     */
    limit?: number
  }

  /**
   * DonationRequest upsert
   */
  export type DonationRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationRequest
     */
    select?: DonationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationRequest
     */
    omit?: DonationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the DonationRequest to update in case it exists.
     */
    where: DonationRequestWhereUniqueInput
    /**
     * In case the DonationRequest found by the `where` argument doesn't exist, create a new DonationRequest with this data.
     */
    create: XOR<DonationRequestCreateInput, DonationRequestUncheckedCreateInput>
    /**
     * In case the DonationRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DonationRequestUpdateInput, DonationRequestUncheckedUpdateInput>
  }

  /**
   * DonationRequest delete
   */
  export type DonationRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationRequest
     */
    select?: DonationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationRequest
     */
    omit?: DonationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationRequestInclude<ExtArgs> | null
    /**
     * Filter which DonationRequest to delete.
     */
    where: DonationRequestWhereUniqueInput
  }

  /**
   * DonationRequest deleteMany
   */
  export type DonationRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DonationRequests to delete
     */
    where?: DonationRequestWhereInput
    /**
     * Limit how many DonationRequests to delete.
     */
    limit?: number
  }

  /**
   * DonationRequest.donationDistributions
   */
  export type DonationRequest$donationDistributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationDistribution
     */
    select?: DonationDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationDistribution
     */
    omit?: DonationDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationDistributionInclude<ExtArgs> | null
    where?: DonationDistributionWhereInput
    orderBy?: DonationDistributionOrderByWithRelationInput | DonationDistributionOrderByWithRelationInput[]
    cursor?: DonationDistributionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DonationDistributionScalarFieldEnum | DonationDistributionScalarFieldEnum[]
  }

  /**
   * DonationRequest without action
   */
  export type DonationRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationRequest
     */
    select?: DonationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationRequest
     */
    omit?: DonationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationRequestInclude<ExtArgs> | null
  }


  /**
   * Model DonationDistribution
   */

  export type AggregateDonationDistribution = {
    _count: DonationDistributionCountAggregateOutputType | null
    _avg: DonationDistributionAvgAggregateOutputType | null
    _sum: DonationDistributionSumAggregateOutputType | null
    _min: DonationDistributionMinAggregateOutputType | null
    _max: DonationDistributionMaxAggregateOutputType | null
  }

  export type DonationDistributionAvgAggregateOutputType = {
    id: number | null
    donationRequestId: number | null
    donorId: number | null
    recipientId: number | null
    quantity: number | null
  }

  export type DonationDistributionSumAggregateOutputType = {
    id: number | null
    donationRequestId: number | null
    donorId: number | null
    recipientId: number | null
    quantity: number | null
  }

  export type DonationDistributionMinAggregateOutputType = {
    id: number | null
    donationRequestId: number | null
    donorId: number | null
    recipientId: number | null
    itemTitle: string | null
    itemDescription: string | null
    quantity: number | null
    status: $Enums.DistributionStatus | null
    distributedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DonationDistributionMaxAggregateOutputType = {
    id: number | null
    donationRequestId: number | null
    donorId: number | null
    recipientId: number | null
    itemTitle: string | null
    itemDescription: string | null
    quantity: number | null
    status: $Enums.DistributionStatus | null
    distributedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DonationDistributionCountAggregateOutputType = {
    id: number
    donationRequestId: number
    donorId: number
    recipientId: number
    itemTitle: number
    itemDescription: number
    quantity: number
    status: number
    distributedAt: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DonationDistributionAvgAggregateInputType = {
    id?: true
    donationRequestId?: true
    donorId?: true
    recipientId?: true
    quantity?: true
  }

  export type DonationDistributionSumAggregateInputType = {
    id?: true
    donationRequestId?: true
    donorId?: true
    recipientId?: true
    quantity?: true
  }

  export type DonationDistributionMinAggregateInputType = {
    id?: true
    donationRequestId?: true
    donorId?: true
    recipientId?: true
    itemTitle?: true
    itemDescription?: true
    quantity?: true
    status?: true
    distributedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DonationDistributionMaxAggregateInputType = {
    id?: true
    donationRequestId?: true
    donorId?: true
    recipientId?: true
    itemTitle?: true
    itemDescription?: true
    quantity?: true
    status?: true
    distributedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DonationDistributionCountAggregateInputType = {
    id?: true
    donationRequestId?: true
    donorId?: true
    recipientId?: true
    itemTitle?: true
    itemDescription?: true
    quantity?: true
    status?: true
    distributedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DonationDistributionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DonationDistribution to aggregate.
     */
    where?: DonationDistributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationDistributions to fetch.
     */
    orderBy?: DonationDistributionOrderByWithRelationInput | DonationDistributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DonationDistributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationDistributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DonationDistributions
    **/
    _count?: true | DonationDistributionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DonationDistributionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DonationDistributionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DonationDistributionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DonationDistributionMaxAggregateInputType
  }

  export type GetDonationDistributionAggregateType<T extends DonationDistributionAggregateArgs> = {
        [P in keyof T & keyof AggregateDonationDistribution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDonationDistribution[P]>
      : GetScalarType<T[P], AggregateDonationDistribution[P]>
  }




  export type DonationDistributionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DonationDistributionWhereInput
    orderBy?: DonationDistributionOrderByWithAggregationInput | DonationDistributionOrderByWithAggregationInput[]
    by: DonationDistributionScalarFieldEnum[] | DonationDistributionScalarFieldEnum
    having?: DonationDistributionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DonationDistributionCountAggregateInputType | true
    _avg?: DonationDistributionAvgAggregateInputType
    _sum?: DonationDistributionSumAggregateInputType
    _min?: DonationDistributionMinAggregateInputType
    _max?: DonationDistributionMaxAggregateInputType
  }

  export type DonationDistributionGroupByOutputType = {
    id: number
    donationRequestId: number | null
    donorId: number
    recipientId: number
    itemTitle: string
    itemDescription: string | null
    quantity: number
    status: $Enums.DistributionStatus
    distributedAt: Date | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: DonationDistributionCountAggregateOutputType | null
    _avg: DonationDistributionAvgAggregateOutputType | null
    _sum: DonationDistributionSumAggregateOutputType | null
    _min: DonationDistributionMinAggregateOutputType | null
    _max: DonationDistributionMaxAggregateOutputType | null
  }

  type GetDonationDistributionGroupByPayload<T extends DonationDistributionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DonationDistributionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DonationDistributionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DonationDistributionGroupByOutputType[P]>
            : GetScalarType<T[P], DonationDistributionGroupByOutputType[P]>
        }
      >
    >


  export type DonationDistributionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    donationRequestId?: boolean
    donorId?: boolean
    recipientId?: boolean
    itemTitle?: boolean
    itemDescription?: boolean
    quantity?: boolean
    status?: boolean
    distributedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    donationRequest?: boolean | DonationDistribution$donationRequestArgs<ExtArgs>
    donor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["donationDistribution"]>



  export type DonationDistributionSelectScalar = {
    id?: boolean
    donationRequestId?: boolean
    donorId?: boolean
    recipientId?: boolean
    itemTitle?: boolean
    itemDescription?: boolean
    quantity?: boolean
    status?: boolean
    distributedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DonationDistributionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "donationRequestId" | "donorId" | "recipientId" | "itemTitle" | "itemDescription" | "quantity" | "status" | "distributedAt" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["donationDistribution"]>
  export type DonationDistributionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    donationRequest?: boolean | DonationDistribution$donationRequestArgs<ExtArgs>
    donor?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DonationDistributionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DonationDistribution"
    objects: {
      donationRequest: Prisma.$DonationRequestPayload<ExtArgs> | null
      donor: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      donationRequestId: number | null
      donorId: number
      recipientId: number
      itemTitle: string
      itemDescription: string | null
      quantity: number
      status: $Enums.DistributionStatus
      distributedAt: Date | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["donationDistribution"]>
    composites: {}
  }

  type DonationDistributionGetPayload<S extends boolean | null | undefined | DonationDistributionDefaultArgs> = $Result.GetResult<Prisma.$DonationDistributionPayload, S>

  type DonationDistributionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DonationDistributionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DonationDistributionCountAggregateInputType | true
    }

  export interface DonationDistributionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DonationDistribution'], meta: { name: 'DonationDistribution' } }
    /**
     * Find zero or one DonationDistribution that matches the filter.
     * @param {DonationDistributionFindUniqueArgs} args - Arguments to find a DonationDistribution
     * @example
     * // Get one DonationDistribution
     * const donationDistribution = await prisma.donationDistribution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DonationDistributionFindUniqueArgs>(args: SelectSubset<T, DonationDistributionFindUniqueArgs<ExtArgs>>): Prisma__DonationDistributionClient<$Result.GetResult<Prisma.$DonationDistributionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DonationDistribution that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DonationDistributionFindUniqueOrThrowArgs} args - Arguments to find a DonationDistribution
     * @example
     * // Get one DonationDistribution
     * const donationDistribution = await prisma.donationDistribution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DonationDistributionFindUniqueOrThrowArgs>(args: SelectSubset<T, DonationDistributionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DonationDistributionClient<$Result.GetResult<Prisma.$DonationDistributionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DonationDistribution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationDistributionFindFirstArgs} args - Arguments to find a DonationDistribution
     * @example
     * // Get one DonationDistribution
     * const donationDistribution = await prisma.donationDistribution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DonationDistributionFindFirstArgs>(args?: SelectSubset<T, DonationDistributionFindFirstArgs<ExtArgs>>): Prisma__DonationDistributionClient<$Result.GetResult<Prisma.$DonationDistributionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DonationDistribution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationDistributionFindFirstOrThrowArgs} args - Arguments to find a DonationDistribution
     * @example
     * // Get one DonationDistribution
     * const donationDistribution = await prisma.donationDistribution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DonationDistributionFindFirstOrThrowArgs>(args?: SelectSubset<T, DonationDistributionFindFirstOrThrowArgs<ExtArgs>>): Prisma__DonationDistributionClient<$Result.GetResult<Prisma.$DonationDistributionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DonationDistributions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationDistributionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DonationDistributions
     * const donationDistributions = await prisma.donationDistribution.findMany()
     * 
     * // Get first 10 DonationDistributions
     * const donationDistributions = await prisma.donationDistribution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const donationDistributionWithIdOnly = await prisma.donationDistribution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DonationDistributionFindManyArgs>(args?: SelectSubset<T, DonationDistributionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DonationDistributionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DonationDistribution.
     * @param {DonationDistributionCreateArgs} args - Arguments to create a DonationDistribution.
     * @example
     * // Create one DonationDistribution
     * const DonationDistribution = await prisma.donationDistribution.create({
     *   data: {
     *     // ... data to create a DonationDistribution
     *   }
     * })
     * 
     */
    create<T extends DonationDistributionCreateArgs>(args: SelectSubset<T, DonationDistributionCreateArgs<ExtArgs>>): Prisma__DonationDistributionClient<$Result.GetResult<Prisma.$DonationDistributionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DonationDistributions.
     * @param {DonationDistributionCreateManyArgs} args - Arguments to create many DonationDistributions.
     * @example
     * // Create many DonationDistributions
     * const donationDistribution = await prisma.donationDistribution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DonationDistributionCreateManyArgs>(args?: SelectSubset<T, DonationDistributionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DonationDistribution.
     * @param {DonationDistributionDeleteArgs} args - Arguments to delete one DonationDistribution.
     * @example
     * // Delete one DonationDistribution
     * const DonationDistribution = await prisma.donationDistribution.delete({
     *   where: {
     *     // ... filter to delete one DonationDistribution
     *   }
     * })
     * 
     */
    delete<T extends DonationDistributionDeleteArgs>(args: SelectSubset<T, DonationDistributionDeleteArgs<ExtArgs>>): Prisma__DonationDistributionClient<$Result.GetResult<Prisma.$DonationDistributionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DonationDistribution.
     * @param {DonationDistributionUpdateArgs} args - Arguments to update one DonationDistribution.
     * @example
     * // Update one DonationDistribution
     * const donationDistribution = await prisma.donationDistribution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DonationDistributionUpdateArgs>(args: SelectSubset<T, DonationDistributionUpdateArgs<ExtArgs>>): Prisma__DonationDistributionClient<$Result.GetResult<Prisma.$DonationDistributionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DonationDistributions.
     * @param {DonationDistributionDeleteManyArgs} args - Arguments to filter DonationDistributions to delete.
     * @example
     * // Delete a few DonationDistributions
     * const { count } = await prisma.donationDistribution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DonationDistributionDeleteManyArgs>(args?: SelectSubset<T, DonationDistributionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DonationDistributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationDistributionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DonationDistributions
     * const donationDistribution = await prisma.donationDistribution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DonationDistributionUpdateManyArgs>(args: SelectSubset<T, DonationDistributionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DonationDistribution.
     * @param {DonationDistributionUpsertArgs} args - Arguments to update or create a DonationDistribution.
     * @example
     * // Update or create a DonationDistribution
     * const donationDistribution = await prisma.donationDistribution.upsert({
     *   create: {
     *     // ... data to create a DonationDistribution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DonationDistribution we want to update
     *   }
     * })
     */
    upsert<T extends DonationDistributionUpsertArgs>(args: SelectSubset<T, DonationDistributionUpsertArgs<ExtArgs>>): Prisma__DonationDistributionClient<$Result.GetResult<Prisma.$DonationDistributionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DonationDistributions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationDistributionCountArgs} args - Arguments to filter DonationDistributions to count.
     * @example
     * // Count the number of DonationDistributions
     * const count = await prisma.donationDistribution.count({
     *   where: {
     *     // ... the filter for the DonationDistributions we want to count
     *   }
     * })
    **/
    count<T extends DonationDistributionCountArgs>(
      args?: Subset<T, DonationDistributionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DonationDistributionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DonationDistribution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationDistributionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DonationDistributionAggregateArgs>(args: Subset<T, DonationDistributionAggregateArgs>): Prisma.PrismaPromise<GetDonationDistributionAggregateType<T>>

    /**
     * Group by DonationDistribution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationDistributionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DonationDistributionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DonationDistributionGroupByArgs['orderBy'] }
        : { orderBy?: DonationDistributionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DonationDistributionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonationDistributionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DonationDistribution model
   */
  readonly fields: DonationDistributionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DonationDistribution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DonationDistributionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    donationRequest<T extends DonationDistribution$donationRequestArgs<ExtArgs> = {}>(args?: Subset<T, DonationDistribution$donationRequestArgs<ExtArgs>>): Prisma__DonationRequestClient<$Result.GetResult<Prisma.$DonationRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    donor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DonationDistribution model
   */
  interface DonationDistributionFieldRefs {
    readonly id: FieldRef<"DonationDistribution", 'Int'>
    readonly donationRequestId: FieldRef<"DonationDistribution", 'Int'>
    readonly donorId: FieldRef<"DonationDistribution", 'Int'>
    readonly recipientId: FieldRef<"DonationDistribution", 'Int'>
    readonly itemTitle: FieldRef<"DonationDistribution", 'String'>
    readonly itemDescription: FieldRef<"DonationDistribution", 'String'>
    readonly quantity: FieldRef<"DonationDistribution", 'Int'>
    readonly status: FieldRef<"DonationDistribution", 'DistributionStatus'>
    readonly distributedAt: FieldRef<"DonationDistribution", 'DateTime'>
    readonly notes: FieldRef<"DonationDistribution", 'String'>
    readonly createdAt: FieldRef<"DonationDistribution", 'DateTime'>
    readonly updatedAt: FieldRef<"DonationDistribution", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DonationDistribution findUnique
   */
  export type DonationDistributionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationDistribution
     */
    select?: DonationDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationDistribution
     */
    omit?: DonationDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationDistributionInclude<ExtArgs> | null
    /**
     * Filter, which DonationDistribution to fetch.
     */
    where: DonationDistributionWhereUniqueInput
  }

  /**
   * DonationDistribution findUniqueOrThrow
   */
  export type DonationDistributionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationDistribution
     */
    select?: DonationDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationDistribution
     */
    omit?: DonationDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationDistributionInclude<ExtArgs> | null
    /**
     * Filter, which DonationDistribution to fetch.
     */
    where: DonationDistributionWhereUniqueInput
  }

  /**
   * DonationDistribution findFirst
   */
  export type DonationDistributionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationDistribution
     */
    select?: DonationDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationDistribution
     */
    omit?: DonationDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationDistributionInclude<ExtArgs> | null
    /**
     * Filter, which DonationDistribution to fetch.
     */
    where?: DonationDistributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationDistributions to fetch.
     */
    orderBy?: DonationDistributionOrderByWithRelationInput | DonationDistributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DonationDistributions.
     */
    cursor?: DonationDistributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationDistributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DonationDistributions.
     */
    distinct?: DonationDistributionScalarFieldEnum | DonationDistributionScalarFieldEnum[]
  }

  /**
   * DonationDistribution findFirstOrThrow
   */
  export type DonationDistributionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationDistribution
     */
    select?: DonationDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationDistribution
     */
    omit?: DonationDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationDistributionInclude<ExtArgs> | null
    /**
     * Filter, which DonationDistribution to fetch.
     */
    where?: DonationDistributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationDistributions to fetch.
     */
    orderBy?: DonationDistributionOrderByWithRelationInput | DonationDistributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DonationDistributions.
     */
    cursor?: DonationDistributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationDistributions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DonationDistributions.
     */
    distinct?: DonationDistributionScalarFieldEnum | DonationDistributionScalarFieldEnum[]
  }

  /**
   * DonationDistribution findMany
   */
  export type DonationDistributionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationDistribution
     */
    select?: DonationDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationDistribution
     */
    omit?: DonationDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationDistributionInclude<ExtArgs> | null
    /**
     * Filter, which DonationDistributions to fetch.
     */
    where?: DonationDistributionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationDistributions to fetch.
     */
    orderBy?: DonationDistributionOrderByWithRelationInput | DonationDistributionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DonationDistributions.
     */
    cursor?: DonationDistributionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationDistributions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationDistributions.
     */
    skip?: number
    distinct?: DonationDistributionScalarFieldEnum | DonationDistributionScalarFieldEnum[]
  }

  /**
   * DonationDistribution create
   */
  export type DonationDistributionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationDistribution
     */
    select?: DonationDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationDistribution
     */
    omit?: DonationDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationDistributionInclude<ExtArgs> | null
    /**
     * The data needed to create a DonationDistribution.
     */
    data: XOR<DonationDistributionCreateInput, DonationDistributionUncheckedCreateInput>
  }

  /**
   * DonationDistribution createMany
   */
  export type DonationDistributionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DonationDistributions.
     */
    data: DonationDistributionCreateManyInput | DonationDistributionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DonationDistribution update
   */
  export type DonationDistributionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationDistribution
     */
    select?: DonationDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationDistribution
     */
    omit?: DonationDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationDistributionInclude<ExtArgs> | null
    /**
     * The data needed to update a DonationDistribution.
     */
    data: XOR<DonationDistributionUpdateInput, DonationDistributionUncheckedUpdateInput>
    /**
     * Choose, which DonationDistribution to update.
     */
    where: DonationDistributionWhereUniqueInput
  }

  /**
   * DonationDistribution updateMany
   */
  export type DonationDistributionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DonationDistributions.
     */
    data: XOR<DonationDistributionUpdateManyMutationInput, DonationDistributionUncheckedUpdateManyInput>
    /**
     * Filter which DonationDistributions to update
     */
    where?: DonationDistributionWhereInput
    /**
     * Limit how many DonationDistributions to update.
     */
    limit?: number
  }

  /**
   * DonationDistribution upsert
   */
  export type DonationDistributionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationDistribution
     */
    select?: DonationDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationDistribution
     */
    omit?: DonationDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationDistributionInclude<ExtArgs> | null
    /**
     * The filter to search for the DonationDistribution to update in case it exists.
     */
    where: DonationDistributionWhereUniqueInput
    /**
     * In case the DonationDistribution found by the `where` argument doesn't exist, create a new DonationDistribution with this data.
     */
    create: XOR<DonationDistributionCreateInput, DonationDistributionUncheckedCreateInput>
    /**
     * In case the DonationDistribution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DonationDistributionUpdateInput, DonationDistributionUncheckedUpdateInput>
  }

  /**
   * DonationDistribution delete
   */
  export type DonationDistributionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationDistribution
     */
    select?: DonationDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationDistribution
     */
    omit?: DonationDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationDistributionInclude<ExtArgs> | null
    /**
     * Filter which DonationDistribution to delete.
     */
    where: DonationDistributionWhereUniqueInput
  }

  /**
   * DonationDistribution deleteMany
   */
  export type DonationDistributionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DonationDistributions to delete
     */
    where?: DonationDistributionWhereInput
    /**
     * Limit how many DonationDistributions to delete.
     */
    limit?: number
  }

  /**
   * DonationDistribution.donationRequest
   */
  export type DonationDistribution$donationRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationRequest
     */
    select?: DonationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationRequest
     */
    omit?: DonationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationRequestInclude<ExtArgs> | null
    where?: DonationRequestWhereInput
  }

  /**
   * DonationDistribution without action
   */
  export type DonationDistributionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationDistribution
     */
    select?: DonationDistributionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationDistribution
     */
    omit?: DonationDistributionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationDistributionInclude<ExtArgs> | null
  }


  /**
   * Model Recommendation
   */

  export type AggregateRecommendation = {
    _count: RecommendationCountAggregateOutputType | null
    _avg: RecommendationAvgAggregateOutputType | null
    _sum: RecommendationSumAggregateOutputType | null
    _min: RecommendationMinAggregateOutputType | null
    _max: RecommendationMaxAggregateOutputType | null
  }

  export type RecommendationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
    score: number | null
  }

  export type RecommendationSumAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
    score: number | null
  }

  export type RecommendationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
    score: number | null
    reason: $Enums.RecommendationReason | null
    createdAt: Date | null
  }

  export type RecommendationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    itemId: number | null
    score: number | null
    reason: $Enums.RecommendationReason | null
    createdAt: Date | null
  }

  export type RecommendationCountAggregateOutputType = {
    id: number
    userId: number
    itemId: number
    score: number
    reason: number
    createdAt: number
    _all: number
  }


  export type RecommendationAvgAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    score?: true
  }

  export type RecommendationSumAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    score?: true
  }

  export type RecommendationMinAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    score?: true
    reason?: true
    createdAt?: true
  }

  export type RecommendationMaxAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    score?: true
    reason?: true
    createdAt?: true
  }

  export type RecommendationCountAggregateInputType = {
    id?: true
    userId?: true
    itemId?: true
    score?: true
    reason?: true
    createdAt?: true
    _all?: true
  }

  export type RecommendationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recommendation to aggregate.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recommendations
    **/
    _count?: true | RecommendationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecommendationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecommendationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecommendationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecommendationMaxAggregateInputType
  }

  export type GetRecommendationAggregateType<T extends RecommendationAggregateArgs> = {
        [P in keyof T & keyof AggregateRecommendation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecommendation[P]>
      : GetScalarType<T[P], AggregateRecommendation[P]>
  }




  export type RecommendationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationWhereInput
    orderBy?: RecommendationOrderByWithAggregationInput | RecommendationOrderByWithAggregationInput[]
    by: RecommendationScalarFieldEnum[] | RecommendationScalarFieldEnum
    having?: RecommendationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecommendationCountAggregateInputType | true
    _avg?: RecommendationAvgAggregateInputType
    _sum?: RecommendationSumAggregateInputType
    _min?: RecommendationMinAggregateInputType
    _max?: RecommendationMaxAggregateInputType
  }

  export type RecommendationGroupByOutputType = {
    id: number
    userId: number
    itemId: number
    score: number
    reason: $Enums.RecommendationReason
    createdAt: Date
    _count: RecommendationCountAggregateOutputType | null
    _avg: RecommendationAvgAggregateOutputType | null
    _sum: RecommendationSumAggregateOutputType | null
    _min: RecommendationMinAggregateOutputType | null
    _max: RecommendationMaxAggregateOutputType | null
  }

  type GetRecommendationGroupByPayload<T extends RecommendationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecommendationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecommendationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecommendationGroupByOutputType[P]>
            : GetScalarType<T[P], RecommendationGroupByOutputType[P]>
        }
      >
    >


  export type RecommendationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    itemId?: boolean
    score?: boolean
    reason?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recommendation"]>



  export type RecommendationSelectScalar = {
    id?: boolean
    userId?: boolean
    itemId?: boolean
    score?: boolean
    reason?: boolean
    createdAt?: boolean
  }

  export type RecommendationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "itemId" | "score" | "reason" | "createdAt", ExtArgs["result"]["recommendation"]>
  export type RecommendationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
  }

  export type $RecommendationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recommendation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      item: Prisma.$ItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      itemId: number
      score: number
      reason: $Enums.RecommendationReason
      createdAt: Date
    }, ExtArgs["result"]["recommendation"]>
    composites: {}
  }

  type RecommendationGetPayload<S extends boolean | null | undefined | RecommendationDefaultArgs> = $Result.GetResult<Prisma.$RecommendationPayload, S>

  type RecommendationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecommendationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecommendationCountAggregateInputType | true
    }

  export interface RecommendationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recommendation'], meta: { name: 'Recommendation' } }
    /**
     * Find zero or one Recommendation that matches the filter.
     * @param {RecommendationFindUniqueArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecommendationFindUniqueArgs>(args: SelectSubset<T, RecommendationFindUniqueArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Recommendation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecommendationFindUniqueOrThrowArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecommendationFindUniqueOrThrowArgs>(args: SelectSubset<T, RecommendationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recommendation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindFirstArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecommendationFindFirstArgs>(args?: SelectSubset<T, RecommendationFindFirstArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recommendation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindFirstOrThrowArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecommendationFindFirstOrThrowArgs>(args?: SelectSubset<T, RecommendationFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Recommendations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recommendations
     * const recommendations = await prisma.recommendation.findMany()
     * 
     * // Get first 10 Recommendations
     * const recommendations = await prisma.recommendation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recommendationWithIdOnly = await prisma.recommendation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecommendationFindManyArgs>(args?: SelectSubset<T, RecommendationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Recommendation.
     * @param {RecommendationCreateArgs} args - Arguments to create a Recommendation.
     * @example
     * // Create one Recommendation
     * const Recommendation = await prisma.recommendation.create({
     *   data: {
     *     // ... data to create a Recommendation
     *   }
     * })
     * 
     */
    create<T extends RecommendationCreateArgs>(args: SelectSubset<T, RecommendationCreateArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Recommendations.
     * @param {RecommendationCreateManyArgs} args - Arguments to create many Recommendations.
     * @example
     * // Create many Recommendations
     * const recommendation = await prisma.recommendation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecommendationCreateManyArgs>(args?: SelectSubset<T, RecommendationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recommendation.
     * @param {RecommendationDeleteArgs} args - Arguments to delete one Recommendation.
     * @example
     * // Delete one Recommendation
     * const Recommendation = await prisma.recommendation.delete({
     *   where: {
     *     // ... filter to delete one Recommendation
     *   }
     * })
     * 
     */
    delete<T extends RecommendationDeleteArgs>(args: SelectSubset<T, RecommendationDeleteArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Recommendation.
     * @param {RecommendationUpdateArgs} args - Arguments to update one Recommendation.
     * @example
     * // Update one Recommendation
     * const recommendation = await prisma.recommendation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecommendationUpdateArgs>(args: SelectSubset<T, RecommendationUpdateArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Recommendations.
     * @param {RecommendationDeleteManyArgs} args - Arguments to filter Recommendations to delete.
     * @example
     * // Delete a few Recommendations
     * const { count } = await prisma.recommendation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecommendationDeleteManyArgs>(args?: SelectSubset<T, RecommendationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recommendations
     * const recommendation = await prisma.recommendation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecommendationUpdateManyArgs>(args: SelectSubset<T, RecommendationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recommendation.
     * @param {RecommendationUpsertArgs} args - Arguments to update or create a Recommendation.
     * @example
     * // Update or create a Recommendation
     * const recommendation = await prisma.recommendation.upsert({
     *   create: {
     *     // ... data to create a Recommendation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recommendation we want to update
     *   }
     * })
     */
    upsert<T extends RecommendationUpsertArgs>(args: SelectSubset<T, RecommendationUpsertArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationCountArgs} args - Arguments to filter Recommendations to count.
     * @example
     * // Count the number of Recommendations
     * const count = await prisma.recommendation.count({
     *   where: {
     *     // ... the filter for the Recommendations we want to count
     *   }
     * })
    **/
    count<T extends RecommendationCountArgs>(
      args?: Subset<T, RecommendationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecommendationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecommendationAggregateArgs>(args: Subset<T, RecommendationAggregateArgs>): Prisma.PrismaPromise<GetRecommendationAggregateType<T>>

    /**
     * Group by Recommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecommendationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecommendationGroupByArgs['orderBy'] }
        : { orderBy?: RecommendationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecommendationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecommendationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recommendation model
   */
  readonly fields: RecommendationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recommendation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecommendationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    item<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recommendation model
   */
  interface RecommendationFieldRefs {
    readonly id: FieldRef<"Recommendation", 'Int'>
    readonly userId: FieldRef<"Recommendation", 'Int'>
    readonly itemId: FieldRef<"Recommendation", 'Int'>
    readonly score: FieldRef<"Recommendation", 'Float'>
    readonly reason: FieldRef<"Recommendation", 'RecommendationReason'>
    readonly createdAt: FieldRef<"Recommendation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Recommendation findUnique
   */
  export type RecommendationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation findUniqueOrThrow
   */
  export type RecommendationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation findFirst
   */
  export type RecommendationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recommendations.
     */
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation findFirstOrThrow
   */
  export type RecommendationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recommendations.
     */
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation findMany
   */
  export type RecommendationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendations to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation create
   */
  export type RecommendationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The data needed to create a Recommendation.
     */
    data: XOR<RecommendationCreateInput, RecommendationUncheckedCreateInput>
  }

  /**
   * Recommendation createMany
   */
  export type RecommendationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recommendations.
     */
    data: RecommendationCreateManyInput | RecommendationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recommendation update
   */
  export type RecommendationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The data needed to update a Recommendation.
     */
    data: XOR<RecommendationUpdateInput, RecommendationUncheckedUpdateInput>
    /**
     * Choose, which Recommendation to update.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation updateMany
   */
  export type RecommendationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recommendations.
     */
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyInput>
    /**
     * Filter which Recommendations to update
     */
    where?: RecommendationWhereInput
    /**
     * Limit how many Recommendations to update.
     */
    limit?: number
  }

  /**
   * Recommendation upsert
   */
  export type RecommendationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The filter to search for the Recommendation to update in case it exists.
     */
    where: RecommendationWhereUniqueInput
    /**
     * In case the Recommendation found by the `where` argument doesn't exist, create a new Recommendation with this data.
     */
    create: XOR<RecommendationCreateInput, RecommendationUncheckedCreateInput>
    /**
     * In case the Recommendation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecommendationUpdateInput, RecommendationUncheckedUpdateInput>
  }

  /**
   * Recommendation delete
   */
  export type RecommendationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter which Recommendation to delete.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation deleteMany
   */
  export type RecommendationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recommendations to delete
     */
    where?: RecommendationWhereInput
    /**
     * Limit how many Recommendations to delete.
     */
    limit?: number
  }

  /**
   * Recommendation without action
   */
  export type RecommendationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
  }


  /**
   * Model AcademicPreference
   */

  export type AggregateAcademicPreference = {
    _count: AcademicPreferenceCountAggregateOutputType | null
    _avg: AcademicPreferenceAvgAggregateOutputType | null
    _sum: AcademicPreferenceSumAggregateOutputType | null
    _min: AcademicPreferenceMinAggregateOutputType | null
    _max: AcademicPreferenceMaxAggregateOutputType | null
  }

  export type AcademicPreferenceAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    academicDataId: number | null
    priority: number | null
  }

  export type AcademicPreferenceSumAggregateOutputType = {
    id: number | null
    userId: number | null
    academicDataId: number | null
    priority: number | null
  }

  export type AcademicPreferenceMinAggregateOutputType = {
    id: number | null
    userId: number | null
    academicDataId: number | null
    priority: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AcademicPreferenceMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    academicDataId: number | null
    priority: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AcademicPreferenceCountAggregateOutputType = {
    id: number
    userId: number
    academicDataId: number
    priority: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AcademicPreferenceAvgAggregateInputType = {
    id?: true
    userId?: true
    academicDataId?: true
    priority?: true
  }

  export type AcademicPreferenceSumAggregateInputType = {
    id?: true
    userId?: true
    academicDataId?: true
    priority?: true
  }

  export type AcademicPreferenceMinAggregateInputType = {
    id?: true
    userId?: true
    academicDataId?: true
    priority?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AcademicPreferenceMaxAggregateInputType = {
    id?: true
    userId?: true
    academicDataId?: true
    priority?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AcademicPreferenceCountAggregateInputType = {
    id?: true
    userId?: true
    academicDataId?: true
    priority?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AcademicPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicPreference to aggregate.
     */
    where?: AcademicPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicPreferences to fetch.
     */
    orderBy?: AcademicPreferenceOrderByWithRelationInput | AcademicPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AcademicPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AcademicPreferences
    **/
    _count?: true | AcademicPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AcademicPreferenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AcademicPreferenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AcademicPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AcademicPreferenceMaxAggregateInputType
  }

  export type GetAcademicPreferenceAggregateType<T extends AcademicPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateAcademicPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAcademicPreference[P]>
      : GetScalarType<T[P], AggregateAcademicPreference[P]>
  }




  export type AcademicPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicPreferenceWhereInput
    orderBy?: AcademicPreferenceOrderByWithAggregationInput | AcademicPreferenceOrderByWithAggregationInput[]
    by: AcademicPreferenceScalarFieldEnum[] | AcademicPreferenceScalarFieldEnum
    having?: AcademicPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AcademicPreferenceCountAggregateInputType | true
    _avg?: AcademicPreferenceAvgAggregateInputType
    _sum?: AcademicPreferenceSumAggregateInputType
    _min?: AcademicPreferenceMinAggregateInputType
    _max?: AcademicPreferenceMaxAggregateInputType
  }

  export type AcademicPreferenceGroupByOutputType = {
    id: number
    userId: number
    academicDataId: number
    priority: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: AcademicPreferenceCountAggregateOutputType | null
    _avg: AcademicPreferenceAvgAggregateOutputType | null
    _sum: AcademicPreferenceSumAggregateOutputType | null
    _min: AcademicPreferenceMinAggregateOutputType | null
    _max: AcademicPreferenceMaxAggregateOutputType | null
  }

  type GetAcademicPreferenceGroupByPayload<T extends AcademicPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AcademicPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AcademicPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AcademicPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], AcademicPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type AcademicPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    academicDataId?: boolean
    priority?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    academicData?: boolean | AcademicDataDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["academicPreference"]>



  export type AcademicPreferenceSelectScalar = {
    id?: boolean
    userId?: boolean
    academicDataId?: boolean
    priority?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AcademicPreferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "academicDataId" | "priority" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["academicPreference"]>
  export type AcademicPreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    academicData?: boolean | AcademicDataDefaultArgs<ExtArgs>
  }

  export type $AcademicPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AcademicPreference"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      academicData: Prisma.$AcademicDataPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      academicDataId: number
      priority: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["academicPreference"]>
    composites: {}
  }

  type AcademicPreferenceGetPayload<S extends boolean | null | undefined | AcademicPreferenceDefaultArgs> = $Result.GetResult<Prisma.$AcademicPreferencePayload, S>

  type AcademicPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AcademicPreferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AcademicPreferenceCountAggregateInputType | true
    }

  export interface AcademicPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AcademicPreference'], meta: { name: 'AcademicPreference' } }
    /**
     * Find zero or one AcademicPreference that matches the filter.
     * @param {AcademicPreferenceFindUniqueArgs} args - Arguments to find a AcademicPreference
     * @example
     * // Get one AcademicPreference
     * const academicPreference = await prisma.academicPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AcademicPreferenceFindUniqueArgs>(args: SelectSubset<T, AcademicPreferenceFindUniqueArgs<ExtArgs>>): Prisma__AcademicPreferenceClient<$Result.GetResult<Prisma.$AcademicPreferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AcademicPreference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AcademicPreferenceFindUniqueOrThrowArgs} args - Arguments to find a AcademicPreference
     * @example
     * // Get one AcademicPreference
     * const academicPreference = await prisma.academicPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AcademicPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, AcademicPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AcademicPreferenceClient<$Result.GetResult<Prisma.$AcademicPreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AcademicPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicPreferenceFindFirstArgs} args - Arguments to find a AcademicPreference
     * @example
     * // Get one AcademicPreference
     * const academicPreference = await prisma.academicPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AcademicPreferenceFindFirstArgs>(args?: SelectSubset<T, AcademicPreferenceFindFirstArgs<ExtArgs>>): Prisma__AcademicPreferenceClient<$Result.GetResult<Prisma.$AcademicPreferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AcademicPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicPreferenceFindFirstOrThrowArgs} args - Arguments to find a AcademicPreference
     * @example
     * // Get one AcademicPreference
     * const academicPreference = await prisma.academicPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AcademicPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, AcademicPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AcademicPreferenceClient<$Result.GetResult<Prisma.$AcademicPreferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AcademicPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AcademicPreferences
     * const academicPreferences = await prisma.academicPreference.findMany()
     * 
     * // Get first 10 AcademicPreferences
     * const academicPreferences = await prisma.academicPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const academicPreferenceWithIdOnly = await prisma.academicPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AcademicPreferenceFindManyArgs>(args?: SelectSubset<T, AcademicPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AcademicPreference.
     * @param {AcademicPreferenceCreateArgs} args - Arguments to create a AcademicPreference.
     * @example
     * // Create one AcademicPreference
     * const AcademicPreference = await prisma.academicPreference.create({
     *   data: {
     *     // ... data to create a AcademicPreference
     *   }
     * })
     * 
     */
    create<T extends AcademicPreferenceCreateArgs>(args: SelectSubset<T, AcademicPreferenceCreateArgs<ExtArgs>>): Prisma__AcademicPreferenceClient<$Result.GetResult<Prisma.$AcademicPreferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AcademicPreferences.
     * @param {AcademicPreferenceCreateManyArgs} args - Arguments to create many AcademicPreferences.
     * @example
     * // Create many AcademicPreferences
     * const academicPreference = await prisma.academicPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AcademicPreferenceCreateManyArgs>(args?: SelectSubset<T, AcademicPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AcademicPreference.
     * @param {AcademicPreferenceDeleteArgs} args - Arguments to delete one AcademicPreference.
     * @example
     * // Delete one AcademicPreference
     * const AcademicPreference = await prisma.academicPreference.delete({
     *   where: {
     *     // ... filter to delete one AcademicPreference
     *   }
     * })
     * 
     */
    delete<T extends AcademicPreferenceDeleteArgs>(args: SelectSubset<T, AcademicPreferenceDeleteArgs<ExtArgs>>): Prisma__AcademicPreferenceClient<$Result.GetResult<Prisma.$AcademicPreferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AcademicPreference.
     * @param {AcademicPreferenceUpdateArgs} args - Arguments to update one AcademicPreference.
     * @example
     * // Update one AcademicPreference
     * const academicPreference = await prisma.academicPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AcademicPreferenceUpdateArgs>(args: SelectSubset<T, AcademicPreferenceUpdateArgs<ExtArgs>>): Prisma__AcademicPreferenceClient<$Result.GetResult<Prisma.$AcademicPreferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AcademicPreferences.
     * @param {AcademicPreferenceDeleteManyArgs} args - Arguments to filter AcademicPreferences to delete.
     * @example
     * // Delete a few AcademicPreferences
     * const { count } = await prisma.academicPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AcademicPreferenceDeleteManyArgs>(args?: SelectSubset<T, AcademicPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AcademicPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AcademicPreferences
     * const academicPreference = await prisma.academicPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AcademicPreferenceUpdateManyArgs>(args: SelectSubset<T, AcademicPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AcademicPreference.
     * @param {AcademicPreferenceUpsertArgs} args - Arguments to update or create a AcademicPreference.
     * @example
     * // Update or create a AcademicPreference
     * const academicPreference = await prisma.academicPreference.upsert({
     *   create: {
     *     // ... data to create a AcademicPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AcademicPreference we want to update
     *   }
     * })
     */
    upsert<T extends AcademicPreferenceUpsertArgs>(args: SelectSubset<T, AcademicPreferenceUpsertArgs<ExtArgs>>): Prisma__AcademicPreferenceClient<$Result.GetResult<Prisma.$AcademicPreferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AcademicPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicPreferenceCountArgs} args - Arguments to filter AcademicPreferences to count.
     * @example
     * // Count the number of AcademicPreferences
     * const count = await prisma.academicPreference.count({
     *   where: {
     *     // ... the filter for the AcademicPreferences we want to count
     *   }
     * })
    **/
    count<T extends AcademicPreferenceCountArgs>(
      args?: Subset<T, AcademicPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AcademicPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AcademicPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AcademicPreferenceAggregateArgs>(args: Subset<T, AcademicPreferenceAggregateArgs>): Prisma.PrismaPromise<GetAcademicPreferenceAggregateType<T>>

    /**
     * Group by AcademicPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AcademicPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AcademicPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: AcademicPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AcademicPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAcademicPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AcademicPreference model
   */
  readonly fields: AcademicPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AcademicPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AcademicPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    academicData<T extends AcademicDataDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AcademicDataDefaultArgs<ExtArgs>>): Prisma__AcademicDataClient<$Result.GetResult<Prisma.$AcademicDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AcademicPreference model
   */
  interface AcademicPreferenceFieldRefs {
    readonly id: FieldRef<"AcademicPreference", 'Int'>
    readonly userId: FieldRef<"AcademicPreference", 'Int'>
    readonly academicDataId: FieldRef<"AcademicPreference", 'Int'>
    readonly priority: FieldRef<"AcademicPreference", 'Int'>
    readonly isActive: FieldRef<"AcademicPreference", 'Boolean'>
    readonly createdAt: FieldRef<"AcademicPreference", 'DateTime'>
    readonly updatedAt: FieldRef<"AcademicPreference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AcademicPreference findUnique
   */
  export type AcademicPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicPreference
     */
    select?: AcademicPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicPreference
     */
    omit?: AcademicPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which AcademicPreference to fetch.
     */
    where: AcademicPreferenceWhereUniqueInput
  }

  /**
   * AcademicPreference findUniqueOrThrow
   */
  export type AcademicPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicPreference
     */
    select?: AcademicPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicPreference
     */
    omit?: AcademicPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which AcademicPreference to fetch.
     */
    where: AcademicPreferenceWhereUniqueInput
  }

  /**
   * AcademicPreference findFirst
   */
  export type AcademicPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicPreference
     */
    select?: AcademicPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicPreference
     */
    omit?: AcademicPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which AcademicPreference to fetch.
     */
    where?: AcademicPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicPreferences to fetch.
     */
    orderBy?: AcademicPreferenceOrderByWithRelationInput | AcademicPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicPreferences.
     */
    cursor?: AcademicPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicPreferences.
     */
    distinct?: AcademicPreferenceScalarFieldEnum | AcademicPreferenceScalarFieldEnum[]
  }

  /**
   * AcademicPreference findFirstOrThrow
   */
  export type AcademicPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicPreference
     */
    select?: AcademicPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicPreference
     */
    omit?: AcademicPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which AcademicPreference to fetch.
     */
    where?: AcademicPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicPreferences to fetch.
     */
    orderBy?: AcademicPreferenceOrderByWithRelationInput | AcademicPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicPreferences.
     */
    cursor?: AcademicPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicPreferences.
     */
    distinct?: AcademicPreferenceScalarFieldEnum | AcademicPreferenceScalarFieldEnum[]
  }

  /**
   * AcademicPreference findMany
   */
  export type AcademicPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicPreference
     */
    select?: AcademicPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicPreference
     */
    omit?: AcademicPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which AcademicPreferences to fetch.
     */
    where?: AcademicPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicPreferences to fetch.
     */
    orderBy?: AcademicPreferenceOrderByWithRelationInput | AcademicPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AcademicPreferences.
     */
    cursor?: AcademicPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicPreferences.
     */
    skip?: number
    distinct?: AcademicPreferenceScalarFieldEnum | AcademicPreferenceScalarFieldEnum[]
  }

  /**
   * AcademicPreference create
   */
  export type AcademicPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicPreference
     */
    select?: AcademicPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicPreference
     */
    omit?: AcademicPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a AcademicPreference.
     */
    data: XOR<AcademicPreferenceCreateInput, AcademicPreferenceUncheckedCreateInput>
  }

  /**
   * AcademicPreference createMany
   */
  export type AcademicPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AcademicPreferences.
     */
    data: AcademicPreferenceCreateManyInput | AcademicPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AcademicPreference update
   */
  export type AcademicPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicPreference
     */
    select?: AcademicPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicPreference
     */
    omit?: AcademicPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a AcademicPreference.
     */
    data: XOR<AcademicPreferenceUpdateInput, AcademicPreferenceUncheckedUpdateInput>
    /**
     * Choose, which AcademicPreference to update.
     */
    where: AcademicPreferenceWhereUniqueInput
  }

  /**
   * AcademicPreference updateMany
   */
  export type AcademicPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AcademicPreferences.
     */
    data: XOR<AcademicPreferenceUpdateManyMutationInput, AcademicPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which AcademicPreferences to update
     */
    where?: AcademicPreferenceWhereInput
    /**
     * Limit how many AcademicPreferences to update.
     */
    limit?: number
  }

  /**
   * AcademicPreference upsert
   */
  export type AcademicPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicPreference
     */
    select?: AcademicPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicPreference
     */
    omit?: AcademicPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicPreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the AcademicPreference to update in case it exists.
     */
    where: AcademicPreferenceWhereUniqueInput
    /**
     * In case the AcademicPreference found by the `where` argument doesn't exist, create a new AcademicPreference with this data.
     */
    create: XOR<AcademicPreferenceCreateInput, AcademicPreferenceUncheckedCreateInput>
    /**
     * In case the AcademicPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AcademicPreferenceUpdateInput, AcademicPreferenceUncheckedUpdateInput>
  }

  /**
   * AcademicPreference delete
   */
  export type AcademicPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicPreference
     */
    select?: AcademicPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicPreference
     */
    omit?: AcademicPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicPreferenceInclude<ExtArgs> | null
    /**
     * Filter which AcademicPreference to delete.
     */
    where: AcademicPreferenceWhereUniqueInput
  }

  /**
   * AcademicPreference deleteMany
   */
  export type AcademicPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicPreferences to delete
     */
    where?: AcademicPreferenceWhereInput
    /**
     * Limit how many AcademicPreferences to delete.
     */
    limit?: number
  }

  /**
   * AcademicPreference without action
   */
  export type AcademicPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicPreference
     */
    select?: AcademicPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicPreference
     */
    omit?: AcademicPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicPreferenceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CartScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    itemId: 'itemId',
    quantity: 'quantity'
  };

  export type CartScalarFieldEnum = (typeof CartScalarFieldEnum)[keyof typeof CartScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    fullName: 'fullName',
    studentId: 'studentId',
    university: 'university',
    faculty: 'faculty',
    major: 'major',
    phoneNumber: 'phoneNumber',
    profileImage: 'profileImage',
    isVerified: 'isVerified',
    verificationToken: 'verificationToken',
    resetPasswordToken: 'resetPasswordToken',
    reputation: 'reputation',
    isActive: 'isActive',
    lastLoginAt: 'lastLoginAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    description: 'description',
    price: 'price',
    category: 'category',
    condition: 'condition',
    conditionDetail: 'conditionDetail',
    isDonation: 'isDonation',
    isBundle: 'isBundle',
    bundleItems: 'bundleItems',
    location: 'location',
    isAvailable: 'isAvailable',
    viewCount: 'viewCount',
    favoriteCount: 'favoriteCount',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const AcademicDataScalarFieldEnum: {
    id: 'id',
    courseCode: 'courseCode',
    courseName: 'courseName',
    lecturerName: 'lecturerName',
    faculty: 'faculty',
    semester: 'semester',
    credits: 'credits',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AcademicDataScalarFieldEnum = (typeof AcademicDataScalarFieldEnum)[keyof typeof AcademicDataScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    buyerId: 'buyerId',
    sellerId: 'sellerId',
    itemId: 'itemId',
    amount: 'amount',
    status: 'status',
    paymentMethod: 'paymentMethod',
    paymentStatus: 'paymentStatus',
    codLocation: 'codLocation',
    notes: 'notes',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const BarterRequestScalarFieldEnum: {
    id: 'id',
    requesterId: 'requesterId',
    itemOwnerId: 'itemOwnerId',
    requestedItemId: 'requestedItemId',
    offeredItemIds: 'offeredItemIds',
    message: 'message',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BarterRequestScalarFieldEnum = (typeof BarterRequestScalarFieldEnum)[keyof typeof BarterRequestScalarFieldEnum]


  export const BarterNegotiationScalarFieldEnum: {
    id: 'id',
    barterRequestId: 'barterRequestId',
    senderId: 'senderId',
    message: 'message',
    isRead: 'isRead',
    createdAt: 'createdAt'
  };

  export type BarterNegotiationScalarFieldEnum = (typeof BarterNegotiationScalarFieldEnum)[keyof typeof BarterNegotiationScalarFieldEnum]


  export const WtbRequestScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    description: 'description',
    maxPrice: 'maxPrice',
    category: 'category',
    preferredCondition: 'preferredCondition',
    location: 'location',
    urgency: 'urgency',
    isActive: 'isActive',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WtbRequestScalarFieldEnum = (typeof WtbRequestScalarFieldEnum)[keyof typeof WtbRequestScalarFieldEnum]


  export const WtbResponseScalarFieldEnum: {
    id: 'id',
    wtbRequestId: 'wtbRequestId',
    responderId: 'responderId',
    message: 'message',
    offeredPrice: 'offeredPrice',
    itemImages: 'itemImages',
    contactInfo: 'contactInfo',
    isRead: 'isRead',
    createdAt: 'createdAt'
  };

  export type WtbResponseScalarFieldEnum = (typeof WtbResponseScalarFieldEnum)[keyof typeof WtbResponseScalarFieldEnum]


  export const WishlistScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    itemId: 'itemId',
    createdAt: 'createdAt'
  };

  export type WishlistScalarFieldEnum = (typeof WishlistScalarFieldEnum)[keyof typeof WishlistScalarFieldEnum]


  export const DiscussionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    academicDataId: 'academicDataId',
    title: 'title',
    content: 'content',
    category: 'category',
    tags: 'tags',
    isPinned: 'isPinned',
    isLocked: 'isLocked',
    viewCount: 'viewCount',
    replyCount: 'replyCount',
    lastReplyAt: 'lastReplyAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DiscussionScalarFieldEnum = (typeof DiscussionScalarFieldEnum)[keyof typeof DiscussionScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    discussionId: 'discussionId',
    userId: 'userId',
    parentId: 'parentId',
    content: 'content',
    isEdited: 'isEdited',
    editedAt: 'editedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    message: 'message',
    relatedId: 'relatedId',
    relatedType: 'relatedType',
    isRead: 'isRead',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const PriceHistoryScalarFieldEnum: {
    id: 'id',
    itemId: 'itemId',
    price: 'price',
    condition: 'condition',
    category: 'category',
    recordedAt: 'recordedAt'
  };

  export type PriceHistoryScalarFieldEnum = (typeof PriceHistoryScalarFieldEnum)[keyof typeof PriceHistoryScalarFieldEnum]


  export const ItemImageScalarFieldEnum: {
    id: 'id',
    itemId: 'itemId',
    imageUrl: 'imageUrl',
    isPrimary: 'isPrimary',
    caption: 'caption',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt'
  };

  export type ItemImageScalarFieldEnum = (typeof ItemImageScalarFieldEnum)[keyof typeof ItemImageScalarFieldEnum]


  export const CodLocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    faculty: 'faculty',
    building: 'building',
    floor: 'floor',
    coordinates: 'coordinates',
    imageUrl: 'imageUrl',
    safetyRating: 'safetyRating',
    accessibilityRating: 'accessibilityRating',
    popularityCount: 'popularityCount',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CodLocationScalarFieldEnum = (typeof CodLocationScalarFieldEnum)[keyof typeof CodLocationScalarFieldEnum]


  export const UserBadgeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    badgeType: 'badgeType',
    title: 'title',
    description: 'description',
    iconUrl: 'iconUrl',
    earnedAt: 'earnedAt'
  };

  export type UserBadgeScalarFieldEnum = (typeof UserBadgeScalarFieldEnum)[keyof typeof UserBadgeScalarFieldEnum]


  export const DonationRequestScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    description: 'description',
    category: 'category',
    urgency: 'urgency',
    status: 'status',
    maxQuantity: 'maxQuantity',
    receivedCount: 'receivedCount',
    location: 'location',
    contactInfo: 'contactInfo',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DonationRequestScalarFieldEnum = (typeof DonationRequestScalarFieldEnum)[keyof typeof DonationRequestScalarFieldEnum]


  export const DonationDistributionScalarFieldEnum: {
    id: 'id',
    donationRequestId: 'donationRequestId',
    donorId: 'donorId',
    recipientId: 'recipientId',
    itemTitle: 'itemTitle',
    itemDescription: 'itemDescription',
    quantity: 'quantity',
    status: 'status',
    distributedAt: 'distributedAt',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DonationDistributionScalarFieldEnum = (typeof DonationDistributionScalarFieldEnum)[keyof typeof DonationDistributionScalarFieldEnum]


  export const RecommendationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    itemId: 'itemId',
    score: 'score',
    reason: 'reason',
    createdAt: 'createdAt'
  };

  export type RecommendationScalarFieldEnum = (typeof RecommendationScalarFieldEnum)[keyof typeof RecommendationScalarFieldEnum]


  export const AcademicPreferenceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    academicDataId: 'academicDataId',
    priority: 'priority',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AcademicPreferenceScalarFieldEnum = (typeof AcademicPreferenceScalarFieldEnum)[keyof typeof AcademicPreferenceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    email: 'email',
    username: 'username',
    password: 'password',
    fullName: 'fullName',
    studentId: 'studentId',
    university: 'university',
    faculty: 'faculty',
    major: 'major',
    phoneNumber: 'phoneNumber',
    profileImage: 'profileImage',
    verificationToken: 'verificationToken',
    resetPasswordToken: 'resetPasswordToken'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const ItemOrderByRelevanceFieldEnum: {
    title: 'title',
    description: 'description',
    category: 'category',
    conditionDetail: 'conditionDetail',
    bundleItems: 'bundleItems',
    location: 'location'
  };

  export type ItemOrderByRelevanceFieldEnum = (typeof ItemOrderByRelevanceFieldEnum)[keyof typeof ItemOrderByRelevanceFieldEnum]


  export const AcademicDataOrderByRelevanceFieldEnum: {
    courseCode: 'courseCode',
    courseName: 'courseName',
    lecturerName: 'lecturerName',
    faculty: 'faculty',
    description: 'description'
  };

  export type AcademicDataOrderByRelevanceFieldEnum = (typeof AcademicDataOrderByRelevanceFieldEnum)[keyof typeof AcademicDataOrderByRelevanceFieldEnum]


  export const TransactionOrderByRelevanceFieldEnum: {
    paymentMethod: 'paymentMethod',
    codLocation: 'codLocation',
    notes: 'notes'
  };

  export type TransactionOrderByRelevanceFieldEnum = (typeof TransactionOrderByRelevanceFieldEnum)[keyof typeof TransactionOrderByRelevanceFieldEnum]


  export const BarterRequestOrderByRelevanceFieldEnum: {
    offeredItemIds: 'offeredItemIds',
    message: 'message'
  };

  export type BarterRequestOrderByRelevanceFieldEnum = (typeof BarterRequestOrderByRelevanceFieldEnum)[keyof typeof BarterRequestOrderByRelevanceFieldEnum]


  export const BarterNegotiationOrderByRelevanceFieldEnum: {
    message: 'message'
  };

  export type BarterNegotiationOrderByRelevanceFieldEnum = (typeof BarterNegotiationOrderByRelevanceFieldEnum)[keyof typeof BarterNegotiationOrderByRelevanceFieldEnum]


  export const WtbRequestOrderByRelevanceFieldEnum: {
    title: 'title',
    description: 'description',
    category: 'category',
    preferredCondition: 'preferredCondition',
    location: 'location'
  };

  export type WtbRequestOrderByRelevanceFieldEnum = (typeof WtbRequestOrderByRelevanceFieldEnum)[keyof typeof WtbRequestOrderByRelevanceFieldEnum]


  export const WtbResponseOrderByRelevanceFieldEnum: {
    message: 'message',
    itemImages: 'itemImages',
    contactInfo: 'contactInfo'
  };

  export type WtbResponseOrderByRelevanceFieldEnum = (typeof WtbResponseOrderByRelevanceFieldEnum)[keyof typeof WtbResponseOrderByRelevanceFieldEnum]


  export const DiscussionOrderByRelevanceFieldEnum: {
    title: 'title',
    content: 'content',
    category: 'category',
    tags: 'tags'
  };

  export type DiscussionOrderByRelevanceFieldEnum = (typeof DiscussionOrderByRelevanceFieldEnum)[keyof typeof DiscussionOrderByRelevanceFieldEnum]


  export const CommentOrderByRelevanceFieldEnum: {
    content: 'content'
  };

  export type CommentOrderByRelevanceFieldEnum = (typeof CommentOrderByRelevanceFieldEnum)[keyof typeof CommentOrderByRelevanceFieldEnum]


  export const NotificationOrderByRelevanceFieldEnum: {
    title: 'title',
    message: 'message',
    relatedType: 'relatedType'
  };

  export type NotificationOrderByRelevanceFieldEnum = (typeof NotificationOrderByRelevanceFieldEnum)[keyof typeof NotificationOrderByRelevanceFieldEnum]


  export const PriceHistoryOrderByRelevanceFieldEnum: {
    category: 'category'
  };

  export type PriceHistoryOrderByRelevanceFieldEnum = (typeof PriceHistoryOrderByRelevanceFieldEnum)[keyof typeof PriceHistoryOrderByRelevanceFieldEnum]


  export const ItemImageOrderByRelevanceFieldEnum: {
    imageUrl: 'imageUrl',
    caption: 'caption'
  };

  export type ItemImageOrderByRelevanceFieldEnum = (typeof ItemImageOrderByRelevanceFieldEnum)[keyof typeof ItemImageOrderByRelevanceFieldEnum]


  export const CodLocationOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description',
    faculty: 'faculty',
    building: 'building',
    floor: 'floor',
    coordinates: 'coordinates',
    imageUrl: 'imageUrl'
  };

  export type CodLocationOrderByRelevanceFieldEnum = (typeof CodLocationOrderByRelevanceFieldEnum)[keyof typeof CodLocationOrderByRelevanceFieldEnum]


  export const UserBadgeOrderByRelevanceFieldEnum: {
    title: 'title',
    description: 'description',
    iconUrl: 'iconUrl'
  };

  export type UserBadgeOrderByRelevanceFieldEnum = (typeof UserBadgeOrderByRelevanceFieldEnum)[keyof typeof UserBadgeOrderByRelevanceFieldEnum]


  export const DonationRequestOrderByRelevanceFieldEnum: {
    title: 'title',
    description: 'description',
    category: 'category',
    location: 'location',
    contactInfo: 'contactInfo'
  };

  export type DonationRequestOrderByRelevanceFieldEnum = (typeof DonationRequestOrderByRelevanceFieldEnum)[keyof typeof DonationRequestOrderByRelevanceFieldEnum]


  export const DonationDistributionOrderByRelevanceFieldEnum: {
    itemTitle: 'itemTitle',
    itemDescription: 'itemDescription',
    notes: 'notes'
  };

  export type DonationDistributionOrderByRelevanceFieldEnum = (typeof DonationDistributionOrderByRelevanceFieldEnum)[keyof typeof DonationDistributionOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'ItemCondition'
   */
  export type EnumItemConditionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ItemCondition'>
    


  /**
   * Reference to a field of type 'TransactionStatus'
   */
  export type EnumTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'BarterStatus'
   */
  export type EnumBarterStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BarterStatus'>
    


  /**
   * Reference to a field of type 'WtbUrgency'
   */
  export type EnumWtbUrgencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WtbUrgency'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'BadgeType'
   */
  export type EnumBadgeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BadgeType'>
    


  /**
   * Reference to a field of type 'DonationUrgency'
   */
  export type EnumDonationUrgencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DonationUrgency'>
    


  /**
   * Reference to a field of type 'DonationRequestStatus'
   */
  export type EnumDonationRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DonationRequestStatus'>
    


  /**
   * Reference to a field of type 'DistributionStatus'
   */
  export type EnumDistributionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DistributionStatus'>
    


  /**
   * Reference to a field of type 'RecommendationReason'
   */
  export type EnumRecommendationReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RecommendationReason'>
    
  /**
   * Deep Input Types
   */


  export type CartWhereInput = {
    AND?: CartWhereInput | CartWhereInput[]
    OR?: CartWhereInput[]
    NOT?: CartWhereInput | CartWhereInput[]
    id?: IntFilter<"Cart"> | number
    userId?: IntFilter<"Cart"> | number
    itemId?: IntFilter<"Cart"> | number
    quantity?: IntFilter<"Cart"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    item?: XOR<ItemScalarRelationFilter, ItemWhereInput>
  }

  export type CartOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
    user?: UserOrderByWithRelationInput
    item?: ItemOrderByWithRelationInput
  }

  export type CartWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CartWhereInput | CartWhereInput[]
    OR?: CartWhereInput[]
    NOT?: CartWhereInput | CartWhereInput[]
    userId?: IntFilter<"Cart"> | number
    itemId?: IntFilter<"Cart"> | number
    quantity?: IntFilter<"Cart"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    item?: XOR<ItemScalarRelationFilter, ItemWhereInput>
  }, "id">

  export type CartOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
    _count?: CartCountOrderByAggregateInput
    _avg?: CartAvgOrderByAggregateInput
    _max?: CartMaxOrderByAggregateInput
    _min?: CartMinOrderByAggregateInput
    _sum?: CartSumOrderByAggregateInput
  }

  export type CartScalarWhereWithAggregatesInput = {
    AND?: CartScalarWhereWithAggregatesInput | CartScalarWhereWithAggregatesInput[]
    OR?: CartScalarWhereWithAggregatesInput[]
    NOT?: CartScalarWhereWithAggregatesInput | CartScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cart"> | number
    userId?: IntWithAggregatesFilter<"Cart"> | number
    itemId?: IntWithAggregatesFilter<"Cart"> | number
    quantity?: IntWithAggregatesFilter<"Cart"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    studentId?: StringNullableFilter<"User"> | string | null
    university?: StringNullableFilter<"User"> | string | null
    faculty?: StringNullableFilter<"User"> | string | null
    major?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    profileImage?: StringNullableFilter<"User"> | string | null
    isVerified?: BoolFilter<"User"> | boolean
    verificationToken?: StringNullableFilter<"User"> | string | null
    resetPasswordToken?: StringNullableFilter<"User"> | string | null
    reputation?: IntFilter<"User"> | number
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    items?: ItemListRelationFilter
    barterRequests?: BarterRequestListRelationFilter
    barterNegotiations?: BarterNegotiationListRelationFilter
    wishlists?: WishlistListRelationFilter
    wtbRequests?: WtbRequestListRelationFilter
    wtbResponses?: WtbResponseListRelationFilter
    buyerTransactions?: TransactionListRelationFilter
    sellerTransactions?: TransactionListRelationFilter
    discussions?: DiscussionListRelationFilter
    comments?: CommentListRelationFilter
    notifications?: NotificationListRelationFilter
    userBadges?: UserBadgeListRelationFilter
    donationRequests?: DonationRequestListRelationFilter
    donationDistributions?: DonationDistributionListRelationFilter
    recommendations?: RecommendationListRelationFilter
    academicPreferences?: AcademicPreferenceListRelationFilter
    carts?: CartListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    studentId?: SortOrderInput | SortOrder
    university?: SortOrderInput | SortOrder
    faculty?: SortOrderInput | SortOrder
    major?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    profileImage?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    resetPasswordToken?: SortOrderInput | SortOrder
    reputation?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    items?: ItemOrderByRelationAggregateInput
    barterRequests?: BarterRequestOrderByRelationAggregateInput
    barterNegotiations?: BarterNegotiationOrderByRelationAggregateInput
    wishlists?: WishlistOrderByRelationAggregateInput
    wtbRequests?: WtbRequestOrderByRelationAggregateInput
    wtbResponses?: WtbResponseOrderByRelationAggregateInput
    buyerTransactions?: TransactionOrderByRelationAggregateInput
    sellerTransactions?: TransactionOrderByRelationAggregateInput
    discussions?: DiscussionOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    userBadges?: UserBadgeOrderByRelationAggregateInput
    donationRequests?: DonationRequestOrderByRelationAggregateInput
    donationDistributions?: DonationDistributionOrderByRelationAggregateInput
    recommendations?: RecommendationOrderByRelationAggregateInput
    academicPreferences?: AcademicPreferenceOrderByRelationAggregateInput
    carts?: CartOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    username?: string
    studentId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    university?: StringNullableFilter<"User"> | string | null
    faculty?: StringNullableFilter<"User"> | string | null
    major?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    profileImage?: StringNullableFilter<"User"> | string | null
    isVerified?: BoolFilter<"User"> | boolean
    verificationToken?: StringNullableFilter<"User"> | string | null
    resetPasswordToken?: StringNullableFilter<"User"> | string | null
    reputation?: IntFilter<"User"> | number
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    items?: ItemListRelationFilter
    barterRequests?: BarterRequestListRelationFilter
    barterNegotiations?: BarterNegotiationListRelationFilter
    wishlists?: WishlistListRelationFilter
    wtbRequests?: WtbRequestListRelationFilter
    wtbResponses?: WtbResponseListRelationFilter
    buyerTransactions?: TransactionListRelationFilter
    sellerTransactions?: TransactionListRelationFilter
    discussions?: DiscussionListRelationFilter
    comments?: CommentListRelationFilter
    notifications?: NotificationListRelationFilter
    userBadges?: UserBadgeListRelationFilter
    donationRequests?: DonationRequestListRelationFilter
    donationDistributions?: DonationDistributionListRelationFilter
    recommendations?: RecommendationListRelationFilter
    academicPreferences?: AcademicPreferenceListRelationFilter
    carts?: CartListRelationFilter
  }, "id" | "email" | "username" | "studentId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    studentId?: SortOrderInput | SortOrder
    university?: SortOrderInput | SortOrder
    faculty?: SortOrderInput | SortOrder
    major?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    profileImage?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    resetPasswordToken?: SortOrderInput | SortOrder
    reputation?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    fullName?: StringWithAggregatesFilter<"User"> | string
    studentId?: StringNullableWithAggregatesFilter<"User"> | string | null
    university?: StringNullableWithAggregatesFilter<"User"> | string | null
    faculty?: StringNullableWithAggregatesFilter<"User"> | string | null
    major?: StringNullableWithAggregatesFilter<"User"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    profileImage?: StringNullableWithAggregatesFilter<"User"> | string | null
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    verificationToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetPasswordToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    reputation?: IntWithAggregatesFilter<"User"> | number
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ItemWhereInput = {
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    id?: IntFilter<"Item"> | number
    userId?: IntFilter<"Item"> | number
    title?: StringFilter<"Item"> | string
    description?: StringFilter<"Item"> | string
    price?: DecimalFilter<"Item"> | Decimal | DecimalJsLike | number | string
    category?: StringFilter<"Item"> | string
    condition?: EnumItemConditionFilter<"Item"> | $Enums.ItemCondition
    conditionDetail?: StringNullableFilter<"Item"> | string | null
    isDonation?: BoolFilter<"Item"> | boolean
    isBundle?: BoolFilter<"Item"> | boolean
    bundleItems?: StringNullableFilter<"Item"> | string | null
    location?: StringNullableFilter<"Item"> | string | null
    isAvailable?: BoolFilter<"Item"> | boolean
    viewCount?: IntFilter<"Item"> | number
    favoriteCount?: IntFilter<"Item"> | number
    isActive?: BoolFilter<"Item"> | boolean
    createdAt?: DateTimeFilter<"Item"> | Date | string
    updatedAt?: DateTimeFilter<"Item"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    itemImages?: ItemImageListRelationFilter
    barterRequests?: BarterRequestListRelationFilter
    wishlists?: WishlistListRelationFilter
    transactions?: TransactionListRelationFilter
    priceHistories?: PriceHistoryListRelationFilter
    recommendations?: RecommendationListRelationFilter
    carts?: CartListRelationFilter
  }

  export type ItemOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    category?: SortOrder
    condition?: SortOrder
    conditionDetail?: SortOrderInput | SortOrder
    isDonation?: SortOrder
    isBundle?: SortOrder
    bundleItems?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    isAvailable?: SortOrder
    viewCount?: SortOrder
    favoriteCount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    itemImages?: ItemImageOrderByRelationAggregateInput
    barterRequests?: BarterRequestOrderByRelationAggregateInput
    wishlists?: WishlistOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
    priceHistories?: PriceHistoryOrderByRelationAggregateInput
    recommendations?: RecommendationOrderByRelationAggregateInput
    carts?: CartOrderByRelationAggregateInput
    _relevance?: ItemOrderByRelevanceInput
  }

  export type ItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    userId?: IntFilter<"Item"> | number
    title?: StringFilter<"Item"> | string
    description?: StringFilter<"Item"> | string
    price?: DecimalFilter<"Item"> | Decimal | DecimalJsLike | number | string
    category?: StringFilter<"Item"> | string
    condition?: EnumItemConditionFilter<"Item"> | $Enums.ItemCondition
    conditionDetail?: StringNullableFilter<"Item"> | string | null
    isDonation?: BoolFilter<"Item"> | boolean
    isBundle?: BoolFilter<"Item"> | boolean
    bundleItems?: StringNullableFilter<"Item"> | string | null
    location?: StringNullableFilter<"Item"> | string | null
    isAvailable?: BoolFilter<"Item"> | boolean
    viewCount?: IntFilter<"Item"> | number
    favoriteCount?: IntFilter<"Item"> | number
    isActive?: BoolFilter<"Item"> | boolean
    createdAt?: DateTimeFilter<"Item"> | Date | string
    updatedAt?: DateTimeFilter<"Item"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    itemImages?: ItemImageListRelationFilter
    barterRequests?: BarterRequestListRelationFilter
    wishlists?: WishlistListRelationFilter
    transactions?: TransactionListRelationFilter
    priceHistories?: PriceHistoryListRelationFilter
    recommendations?: RecommendationListRelationFilter
    carts?: CartListRelationFilter
  }, "id">

  export type ItemOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    category?: SortOrder
    condition?: SortOrder
    conditionDetail?: SortOrderInput | SortOrder
    isDonation?: SortOrder
    isBundle?: SortOrder
    bundleItems?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    isAvailable?: SortOrder
    viewCount?: SortOrder
    favoriteCount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ItemCountOrderByAggregateInput
    _avg?: ItemAvgOrderByAggregateInput
    _max?: ItemMaxOrderByAggregateInput
    _min?: ItemMinOrderByAggregateInput
    _sum?: ItemSumOrderByAggregateInput
  }

  export type ItemScalarWhereWithAggregatesInput = {
    AND?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    OR?: ItemScalarWhereWithAggregatesInput[]
    NOT?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Item"> | number
    userId?: IntWithAggregatesFilter<"Item"> | number
    title?: StringWithAggregatesFilter<"Item"> | string
    description?: StringWithAggregatesFilter<"Item"> | string
    price?: DecimalWithAggregatesFilter<"Item"> | Decimal | DecimalJsLike | number | string
    category?: StringWithAggregatesFilter<"Item"> | string
    condition?: EnumItemConditionWithAggregatesFilter<"Item"> | $Enums.ItemCondition
    conditionDetail?: StringNullableWithAggregatesFilter<"Item"> | string | null
    isDonation?: BoolWithAggregatesFilter<"Item"> | boolean
    isBundle?: BoolWithAggregatesFilter<"Item"> | boolean
    bundleItems?: StringNullableWithAggregatesFilter<"Item"> | string | null
    location?: StringNullableWithAggregatesFilter<"Item"> | string | null
    isAvailable?: BoolWithAggregatesFilter<"Item"> | boolean
    viewCount?: IntWithAggregatesFilter<"Item"> | number
    favoriteCount?: IntWithAggregatesFilter<"Item"> | number
    isActive?: BoolWithAggregatesFilter<"Item"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Item"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Item"> | Date | string
  }

  export type AcademicDataWhereInput = {
    AND?: AcademicDataWhereInput | AcademicDataWhereInput[]
    OR?: AcademicDataWhereInput[]
    NOT?: AcademicDataWhereInput | AcademicDataWhereInput[]
    id?: IntFilter<"AcademicData"> | number
    courseCode?: StringFilter<"AcademicData"> | string
    courseName?: StringFilter<"AcademicData"> | string
    lecturerName?: StringNullableFilter<"AcademicData"> | string | null
    faculty?: StringFilter<"AcademicData"> | string
    semester?: IntNullableFilter<"AcademicData"> | number | null
    credits?: IntNullableFilter<"AcademicData"> | number | null
    description?: StringNullableFilter<"AcademicData"> | string | null
    isActive?: BoolFilter<"AcademicData"> | boolean
    createdAt?: DateTimeFilter<"AcademicData"> | Date | string
    updatedAt?: DateTimeFilter<"AcademicData"> | Date | string
    discussions?: DiscussionListRelationFilter
    academicPreferences?: AcademicPreferenceListRelationFilter
  }

  export type AcademicDataOrderByWithRelationInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseName?: SortOrder
    lecturerName?: SortOrderInput | SortOrder
    faculty?: SortOrder
    semester?: SortOrderInput | SortOrder
    credits?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    discussions?: DiscussionOrderByRelationAggregateInput
    academicPreferences?: AcademicPreferenceOrderByRelationAggregateInput
    _relevance?: AcademicDataOrderByRelevanceInput
  }

  export type AcademicDataWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    courseCode?: string
    AND?: AcademicDataWhereInput | AcademicDataWhereInput[]
    OR?: AcademicDataWhereInput[]
    NOT?: AcademicDataWhereInput | AcademicDataWhereInput[]
    courseName?: StringFilter<"AcademicData"> | string
    lecturerName?: StringNullableFilter<"AcademicData"> | string | null
    faculty?: StringFilter<"AcademicData"> | string
    semester?: IntNullableFilter<"AcademicData"> | number | null
    credits?: IntNullableFilter<"AcademicData"> | number | null
    description?: StringNullableFilter<"AcademicData"> | string | null
    isActive?: BoolFilter<"AcademicData"> | boolean
    createdAt?: DateTimeFilter<"AcademicData"> | Date | string
    updatedAt?: DateTimeFilter<"AcademicData"> | Date | string
    discussions?: DiscussionListRelationFilter
    academicPreferences?: AcademicPreferenceListRelationFilter
  }, "id" | "courseCode">

  export type AcademicDataOrderByWithAggregationInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseName?: SortOrder
    lecturerName?: SortOrderInput | SortOrder
    faculty?: SortOrder
    semester?: SortOrderInput | SortOrder
    credits?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AcademicDataCountOrderByAggregateInput
    _avg?: AcademicDataAvgOrderByAggregateInput
    _max?: AcademicDataMaxOrderByAggregateInput
    _min?: AcademicDataMinOrderByAggregateInput
    _sum?: AcademicDataSumOrderByAggregateInput
  }

  export type AcademicDataScalarWhereWithAggregatesInput = {
    AND?: AcademicDataScalarWhereWithAggregatesInput | AcademicDataScalarWhereWithAggregatesInput[]
    OR?: AcademicDataScalarWhereWithAggregatesInput[]
    NOT?: AcademicDataScalarWhereWithAggregatesInput | AcademicDataScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AcademicData"> | number
    courseCode?: StringWithAggregatesFilter<"AcademicData"> | string
    courseName?: StringWithAggregatesFilter<"AcademicData"> | string
    lecturerName?: StringNullableWithAggregatesFilter<"AcademicData"> | string | null
    faculty?: StringWithAggregatesFilter<"AcademicData"> | string
    semester?: IntNullableWithAggregatesFilter<"AcademicData"> | number | null
    credits?: IntNullableWithAggregatesFilter<"AcademicData"> | number | null
    description?: StringNullableWithAggregatesFilter<"AcademicData"> | string | null
    isActive?: BoolWithAggregatesFilter<"AcademicData"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"AcademicData"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AcademicData"> | Date | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: IntFilter<"Transaction"> | number
    buyerId?: IntFilter<"Transaction"> | number
    sellerId?: IntFilter<"Transaction"> | number
    itemId?: IntFilter<"Transaction"> | number
    amount?: DecimalFilter<"Transaction"> | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFilter<"Transaction"> | $Enums.TransactionStatus
    paymentMethod?: StringNullableFilter<"Transaction"> | string | null
    paymentStatus?: EnumPaymentStatusFilter<"Transaction"> | $Enums.PaymentStatus
    codLocation?: StringNullableFilter<"Transaction"> | string | null
    notes?: StringNullableFilter<"Transaction"> | string | null
    completedAt?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    buyer?: XOR<UserScalarRelationFilter, UserWhereInput>
    seller?: XOR<UserScalarRelationFilter, UserWhereInput>
    item?: XOR<ItemScalarRelationFilter, ItemWhereInput>
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    buyerId?: SortOrder
    sellerId?: SortOrder
    itemId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    paymentStatus?: SortOrder
    codLocation?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    buyer?: UserOrderByWithRelationInput
    seller?: UserOrderByWithRelationInput
    item?: ItemOrderByWithRelationInput
    _relevance?: TransactionOrderByRelevanceInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    buyerId?: IntFilter<"Transaction"> | number
    sellerId?: IntFilter<"Transaction"> | number
    itemId?: IntFilter<"Transaction"> | number
    amount?: DecimalFilter<"Transaction"> | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFilter<"Transaction"> | $Enums.TransactionStatus
    paymentMethod?: StringNullableFilter<"Transaction"> | string | null
    paymentStatus?: EnumPaymentStatusFilter<"Transaction"> | $Enums.PaymentStatus
    codLocation?: StringNullableFilter<"Transaction"> | string | null
    notes?: StringNullableFilter<"Transaction"> | string | null
    completedAt?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    buyer?: XOR<UserScalarRelationFilter, UserWhereInput>
    seller?: XOR<UserScalarRelationFilter, UserWhereInput>
    item?: XOR<ItemScalarRelationFilter, ItemWhereInput>
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    buyerId?: SortOrder
    sellerId?: SortOrder
    itemId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    paymentStatus?: SortOrder
    codLocation?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transaction"> | number
    buyerId?: IntWithAggregatesFilter<"Transaction"> | number
    sellerId?: IntWithAggregatesFilter<"Transaction"> | number
    itemId?: IntWithAggregatesFilter<"Transaction"> | number
    amount?: DecimalWithAggregatesFilter<"Transaction"> | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusWithAggregatesFilter<"Transaction"> | $Enums.TransactionStatus
    paymentMethod?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    paymentStatus?: EnumPaymentStatusWithAggregatesFilter<"Transaction"> | $Enums.PaymentStatus
    codLocation?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"Transaction"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type BarterRequestWhereInput = {
    AND?: BarterRequestWhereInput | BarterRequestWhereInput[]
    OR?: BarterRequestWhereInput[]
    NOT?: BarterRequestWhereInput | BarterRequestWhereInput[]
    id?: IntFilter<"BarterRequest"> | number
    requesterId?: IntFilter<"BarterRequest"> | number
    itemOwnerId?: IntFilter<"BarterRequest"> | number
    requestedItemId?: IntFilter<"BarterRequest"> | number
    offeredItemIds?: StringFilter<"BarterRequest"> | string
    message?: StringNullableFilter<"BarterRequest"> | string | null
    status?: EnumBarterStatusFilter<"BarterRequest"> | $Enums.BarterStatus
    createdAt?: DateTimeFilter<"BarterRequest"> | Date | string
    updatedAt?: DateTimeFilter<"BarterRequest"> | Date | string
    requester?: XOR<UserScalarRelationFilter, UserWhereInput>
    requestedItem?: XOR<ItemScalarRelationFilter, ItemWhereInput>
    barterNegotiations?: BarterNegotiationListRelationFilter
  }

  export type BarterRequestOrderByWithRelationInput = {
    id?: SortOrder
    requesterId?: SortOrder
    itemOwnerId?: SortOrder
    requestedItemId?: SortOrder
    offeredItemIds?: SortOrder
    message?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requester?: UserOrderByWithRelationInput
    requestedItem?: ItemOrderByWithRelationInput
    barterNegotiations?: BarterNegotiationOrderByRelationAggregateInput
    _relevance?: BarterRequestOrderByRelevanceInput
  }

  export type BarterRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BarterRequestWhereInput | BarterRequestWhereInput[]
    OR?: BarterRequestWhereInput[]
    NOT?: BarterRequestWhereInput | BarterRequestWhereInput[]
    requesterId?: IntFilter<"BarterRequest"> | number
    itemOwnerId?: IntFilter<"BarterRequest"> | number
    requestedItemId?: IntFilter<"BarterRequest"> | number
    offeredItemIds?: StringFilter<"BarterRequest"> | string
    message?: StringNullableFilter<"BarterRequest"> | string | null
    status?: EnumBarterStatusFilter<"BarterRequest"> | $Enums.BarterStatus
    createdAt?: DateTimeFilter<"BarterRequest"> | Date | string
    updatedAt?: DateTimeFilter<"BarterRequest"> | Date | string
    requester?: XOR<UserScalarRelationFilter, UserWhereInput>
    requestedItem?: XOR<ItemScalarRelationFilter, ItemWhereInput>
    barterNegotiations?: BarterNegotiationListRelationFilter
  }, "id">

  export type BarterRequestOrderByWithAggregationInput = {
    id?: SortOrder
    requesterId?: SortOrder
    itemOwnerId?: SortOrder
    requestedItemId?: SortOrder
    offeredItemIds?: SortOrder
    message?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BarterRequestCountOrderByAggregateInput
    _avg?: BarterRequestAvgOrderByAggregateInput
    _max?: BarterRequestMaxOrderByAggregateInput
    _min?: BarterRequestMinOrderByAggregateInput
    _sum?: BarterRequestSumOrderByAggregateInput
  }

  export type BarterRequestScalarWhereWithAggregatesInput = {
    AND?: BarterRequestScalarWhereWithAggregatesInput | BarterRequestScalarWhereWithAggregatesInput[]
    OR?: BarterRequestScalarWhereWithAggregatesInput[]
    NOT?: BarterRequestScalarWhereWithAggregatesInput | BarterRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BarterRequest"> | number
    requesterId?: IntWithAggregatesFilter<"BarterRequest"> | number
    itemOwnerId?: IntWithAggregatesFilter<"BarterRequest"> | number
    requestedItemId?: IntWithAggregatesFilter<"BarterRequest"> | number
    offeredItemIds?: StringWithAggregatesFilter<"BarterRequest"> | string
    message?: StringNullableWithAggregatesFilter<"BarterRequest"> | string | null
    status?: EnumBarterStatusWithAggregatesFilter<"BarterRequest"> | $Enums.BarterStatus
    createdAt?: DateTimeWithAggregatesFilter<"BarterRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BarterRequest"> | Date | string
  }

  export type BarterNegotiationWhereInput = {
    AND?: BarterNegotiationWhereInput | BarterNegotiationWhereInput[]
    OR?: BarterNegotiationWhereInput[]
    NOT?: BarterNegotiationWhereInput | BarterNegotiationWhereInput[]
    id?: IntFilter<"BarterNegotiation"> | number
    barterRequestId?: IntFilter<"BarterNegotiation"> | number
    senderId?: IntFilter<"BarterNegotiation"> | number
    message?: StringFilter<"BarterNegotiation"> | string
    isRead?: BoolFilter<"BarterNegotiation"> | boolean
    createdAt?: DateTimeFilter<"BarterNegotiation"> | Date | string
    barterRequest?: XOR<BarterRequestScalarRelationFilter, BarterRequestWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type BarterNegotiationOrderByWithRelationInput = {
    id?: SortOrder
    barterRequestId?: SortOrder
    senderId?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    barterRequest?: BarterRequestOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
    _relevance?: BarterNegotiationOrderByRelevanceInput
  }

  export type BarterNegotiationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BarterNegotiationWhereInput | BarterNegotiationWhereInput[]
    OR?: BarterNegotiationWhereInput[]
    NOT?: BarterNegotiationWhereInput | BarterNegotiationWhereInput[]
    barterRequestId?: IntFilter<"BarterNegotiation"> | number
    senderId?: IntFilter<"BarterNegotiation"> | number
    message?: StringFilter<"BarterNegotiation"> | string
    isRead?: BoolFilter<"BarterNegotiation"> | boolean
    createdAt?: DateTimeFilter<"BarterNegotiation"> | Date | string
    barterRequest?: XOR<BarterRequestScalarRelationFilter, BarterRequestWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type BarterNegotiationOrderByWithAggregationInput = {
    id?: SortOrder
    barterRequestId?: SortOrder
    senderId?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    _count?: BarterNegotiationCountOrderByAggregateInput
    _avg?: BarterNegotiationAvgOrderByAggregateInput
    _max?: BarterNegotiationMaxOrderByAggregateInput
    _min?: BarterNegotiationMinOrderByAggregateInput
    _sum?: BarterNegotiationSumOrderByAggregateInput
  }

  export type BarterNegotiationScalarWhereWithAggregatesInput = {
    AND?: BarterNegotiationScalarWhereWithAggregatesInput | BarterNegotiationScalarWhereWithAggregatesInput[]
    OR?: BarterNegotiationScalarWhereWithAggregatesInput[]
    NOT?: BarterNegotiationScalarWhereWithAggregatesInput | BarterNegotiationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BarterNegotiation"> | number
    barterRequestId?: IntWithAggregatesFilter<"BarterNegotiation"> | number
    senderId?: IntWithAggregatesFilter<"BarterNegotiation"> | number
    message?: StringWithAggregatesFilter<"BarterNegotiation"> | string
    isRead?: BoolWithAggregatesFilter<"BarterNegotiation"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"BarterNegotiation"> | Date | string
  }

  export type WtbRequestWhereInput = {
    AND?: WtbRequestWhereInput | WtbRequestWhereInput[]
    OR?: WtbRequestWhereInput[]
    NOT?: WtbRequestWhereInput | WtbRequestWhereInput[]
    id?: IntFilter<"WtbRequest"> | number
    userId?: IntFilter<"WtbRequest"> | number
    title?: StringFilter<"WtbRequest"> | string
    description?: StringFilter<"WtbRequest"> | string
    maxPrice?: DecimalNullableFilter<"WtbRequest"> | Decimal | DecimalJsLike | number | string | null
    category?: StringNullableFilter<"WtbRequest"> | string | null
    preferredCondition?: StringNullableFilter<"WtbRequest"> | string | null
    location?: StringNullableFilter<"WtbRequest"> | string | null
    urgency?: EnumWtbUrgencyFilter<"WtbRequest"> | $Enums.WtbUrgency
    isActive?: BoolFilter<"WtbRequest"> | boolean
    expiresAt?: DateTimeNullableFilter<"WtbRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"WtbRequest"> | Date | string
    updatedAt?: DateTimeFilter<"WtbRequest"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    wtbResponses?: WtbResponseListRelationFilter
  }

  export type WtbRequestOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    maxPrice?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    preferredCondition?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    urgency?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    wtbResponses?: WtbResponseOrderByRelationAggregateInput
    _relevance?: WtbRequestOrderByRelevanceInput
  }

  export type WtbRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WtbRequestWhereInput | WtbRequestWhereInput[]
    OR?: WtbRequestWhereInput[]
    NOT?: WtbRequestWhereInput | WtbRequestWhereInput[]
    userId?: IntFilter<"WtbRequest"> | number
    title?: StringFilter<"WtbRequest"> | string
    description?: StringFilter<"WtbRequest"> | string
    maxPrice?: DecimalNullableFilter<"WtbRequest"> | Decimal | DecimalJsLike | number | string | null
    category?: StringNullableFilter<"WtbRequest"> | string | null
    preferredCondition?: StringNullableFilter<"WtbRequest"> | string | null
    location?: StringNullableFilter<"WtbRequest"> | string | null
    urgency?: EnumWtbUrgencyFilter<"WtbRequest"> | $Enums.WtbUrgency
    isActive?: BoolFilter<"WtbRequest"> | boolean
    expiresAt?: DateTimeNullableFilter<"WtbRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"WtbRequest"> | Date | string
    updatedAt?: DateTimeFilter<"WtbRequest"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    wtbResponses?: WtbResponseListRelationFilter
  }, "id">

  export type WtbRequestOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    maxPrice?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    preferredCondition?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    urgency?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WtbRequestCountOrderByAggregateInput
    _avg?: WtbRequestAvgOrderByAggregateInput
    _max?: WtbRequestMaxOrderByAggregateInput
    _min?: WtbRequestMinOrderByAggregateInput
    _sum?: WtbRequestSumOrderByAggregateInput
  }

  export type WtbRequestScalarWhereWithAggregatesInput = {
    AND?: WtbRequestScalarWhereWithAggregatesInput | WtbRequestScalarWhereWithAggregatesInput[]
    OR?: WtbRequestScalarWhereWithAggregatesInput[]
    NOT?: WtbRequestScalarWhereWithAggregatesInput | WtbRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WtbRequest"> | number
    userId?: IntWithAggregatesFilter<"WtbRequest"> | number
    title?: StringWithAggregatesFilter<"WtbRequest"> | string
    description?: StringWithAggregatesFilter<"WtbRequest"> | string
    maxPrice?: DecimalNullableWithAggregatesFilter<"WtbRequest"> | Decimal | DecimalJsLike | number | string | null
    category?: StringNullableWithAggregatesFilter<"WtbRequest"> | string | null
    preferredCondition?: StringNullableWithAggregatesFilter<"WtbRequest"> | string | null
    location?: StringNullableWithAggregatesFilter<"WtbRequest"> | string | null
    urgency?: EnumWtbUrgencyWithAggregatesFilter<"WtbRequest"> | $Enums.WtbUrgency
    isActive?: BoolWithAggregatesFilter<"WtbRequest"> | boolean
    expiresAt?: DateTimeNullableWithAggregatesFilter<"WtbRequest"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WtbRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WtbRequest"> | Date | string
  }

  export type WtbResponseWhereInput = {
    AND?: WtbResponseWhereInput | WtbResponseWhereInput[]
    OR?: WtbResponseWhereInput[]
    NOT?: WtbResponseWhereInput | WtbResponseWhereInput[]
    id?: IntFilter<"WtbResponse"> | number
    wtbRequestId?: IntFilter<"WtbResponse"> | number
    responderId?: IntFilter<"WtbResponse"> | number
    message?: StringFilter<"WtbResponse"> | string
    offeredPrice?: DecimalNullableFilter<"WtbResponse"> | Decimal | DecimalJsLike | number | string | null
    itemImages?: StringNullableFilter<"WtbResponse"> | string | null
    contactInfo?: StringNullableFilter<"WtbResponse"> | string | null
    isRead?: BoolFilter<"WtbResponse"> | boolean
    createdAt?: DateTimeFilter<"WtbResponse"> | Date | string
    wtbRequest?: XOR<WtbRequestScalarRelationFilter, WtbRequestWhereInput>
    responder?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type WtbResponseOrderByWithRelationInput = {
    id?: SortOrder
    wtbRequestId?: SortOrder
    responderId?: SortOrder
    message?: SortOrder
    offeredPrice?: SortOrderInput | SortOrder
    itemImages?: SortOrderInput | SortOrder
    contactInfo?: SortOrderInput | SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    wtbRequest?: WtbRequestOrderByWithRelationInput
    responder?: UserOrderByWithRelationInput
    _relevance?: WtbResponseOrderByRelevanceInput
  }

  export type WtbResponseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WtbResponseWhereInput | WtbResponseWhereInput[]
    OR?: WtbResponseWhereInput[]
    NOT?: WtbResponseWhereInput | WtbResponseWhereInput[]
    wtbRequestId?: IntFilter<"WtbResponse"> | number
    responderId?: IntFilter<"WtbResponse"> | number
    message?: StringFilter<"WtbResponse"> | string
    offeredPrice?: DecimalNullableFilter<"WtbResponse"> | Decimal | DecimalJsLike | number | string | null
    itemImages?: StringNullableFilter<"WtbResponse"> | string | null
    contactInfo?: StringNullableFilter<"WtbResponse"> | string | null
    isRead?: BoolFilter<"WtbResponse"> | boolean
    createdAt?: DateTimeFilter<"WtbResponse"> | Date | string
    wtbRequest?: XOR<WtbRequestScalarRelationFilter, WtbRequestWhereInput>
    responder?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type WtbResponseOrderByWithAggregationInput = {
    id?: SortOrder
    wtbRequestId?: SortOrder
    responderId?: SortOrder
    message?: SortOrder
    offeredPrice?: SortOrderInput | SortOrder
    itemImages?: SortOrderInput | SortOrder
    contactInfo?: SortOrderInput | SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    _count?: WtbResponseCountOrderByAggregateInput
    _avg?: WtbResponseAvgOrderByAggregateInput
    _max?: WtbResponseMaxOrderByAggregateInput
    _min?: WtbResponseMinOrderByAggregateInput
    _sum?: WtbResponseSumOrderByAggregateInput
  }

  export type WtbResponseScalarWhereWithAggregatesInput = {
    AND?: WtbResponseScalarWhereWithAggregatesInput | WtbResponseScalarWhereWithAggregatesInput[]
    OR?: WtbResponseScalarWhereWithAggregatesInput[]
    NOT?: WtbResponseScalarWhereWithAggregatesInput | WtbResponseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WtbResponse"> | number
    wtbRequestId?: IntWithAggregatesFilter<"WtbResponse"> | number
    responderId?: IntWithAggregatesFilter<"WtbResponse"> | number
    message?: StringWithAggregatesFilter<"WtbResponse"> | string
    offeredPrice?: DecimalNullableWithAggregatesFilter<"WtbResponse"> | Decimal | DecimalJsLike | number | string | null
    itemImages?: StringNullableWithAggregatesFilter<"WtbResponse"> | string | null
    contactInfo?: StringNullableWithAggregatesFilter<"WtbResponse"> | string | null
    isRead?: BoolWithAggregatesFilter<"WtbResponse"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"WtbResponse"> | Date | string
  }

  export type WishlistWhereInput = {
    AND?: WishlistWhereInput | WishlistWhereInput[]
    OR?: WishlistWhereInput[]
    NOT?: WishlistWhereInput | WishlistWhereInput[]
    id?: IntFilter<"Wishlist"> | number
    userId?: IntFilter<"Wishlist"> | number
    itemId?: IntFilter<"Wishlist"> | number
    createdAt?: DateTimeFilter<"Wishlist"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    item?: XOR<ItemScalarRelationFilter, ItemWhereInput>
  }

  export type WishlistOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    item?: ItemOrderByWithRelationInput
  }

  export type WishlistWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_itemId?: WishlistUserIdItemIdCompoundUniqueInput
    AND?: WishlistWhereInput | WishlistWhereInput[]
    OR?: WishlistWhereInput[]
    NOT?: WishlistWhereInput | WishlistWhereInput[]
    userId?: IntFilter<"Wishlist"> | number
    itemId?: IntFilter<"Wishlist"> | number
    createdAt?: DateTimeFilter<"Wishlist"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    item?: XOR<ItemScalarRelationFilter, ItemWhereInput>
  }, "id" | "userId_itemId">

  export type WishlistOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    createdAt?: SortOrder
    _count?: WishlistCountOrderByAggregateInput
    _avg?: WishlistAvgOrderByAggregateInput
    _max?: WishlistMaxOrderByAggregateInput
    _min?: WishlistMinOrderByAggregateInput
    _sum?: WishlistSumOrderByAggregateInput
  }

  export type WishlistScalarWhereWithAggregatesInput = {
    AND?: WishlistScalarWhereWithAggregatesInput | WishlistScalarWhereWithAggregatesInput[]
    OR?: WishlistScalarWhereWithAggregatesInput[]
    NOT?: WishlistScalarWhereWithAggregatesInput | WishlistScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Wishlist"> | number
    userId?: IntWithAggregatesFilter<"Wishlist"> | number
    itemId?: IntWithAggregatesFilter<"Wishlist"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Wishlist"> | Date | string
  }

  export type DiscussionWhereInput = {
    AND?: DiscussionWhereInput | DiscussionWhereInput[]
    OR?: DiscussionWhereInput[]
    NOT?: DiscussionWhereInput | DiscussionWhereInput[]
    id?: IntFilter<"Discussion"> | number
    userId?: IntFilter<"Discussion"> | number
    academicDataId?: IntNullableFilter<"Discussion"> | number | null
    title?: StringFilter<"Discussion"> | string
    content?: StringFilter<"Discussion"> | string
    category?: StringNullableFilter<"Discussion"> | string | null
    tags?: StringNullableFilter<"Discussion"> | string | null
    isPinned?: BoolFilter<"Discussion"> | boolean
    isLocked?: BoolFilter<"Discussion"> | boolean
    viewCount?: IntFilter<"Discussion"> | number
    replyCount?: IntFilter<"Discussion"> | number
    lastReplyAt?: DateTimeNullableFilter<"Discussion"> | Date | string | null
    createdAt?: DateTimeFilter<"Discussion"> | Date | string
    updatedAt?: DateTimeFilter<"Discussion"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    academicData?: XOR<AcademicDataNullableScalarRelationFilter, AcademicDataWhereInput> | null
    comments?: CommentListRelationFilter
  }

  export type DiscussionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    academicDataId?: SortOrderInput | SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    isPinned?: SortOrder
    isLocked?: SortOrder
    viewCount?: SortOrder
    replyCount?: SortOrder
    lastReplyAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    academicData?: AcademicDataOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    _relevance?: DiscussionOrderByRelevanceInput
  }

  export type DiscussionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DiscussionWhereInput | DiscussionWhereInput[]
    OR?: DiscussionWhereInput[]
    NOT?: DiscussionWhereInput | DiscussionWhereInput[]
    userId?: IntFilter<"Discussion"> | number
    academicDataId?: IntNullableFilter<"Discussion"> | number | null
    title?: StringFilter<"Discussion"> | string
    content?: StringFilter<"Discussion"> | string
    category?: StringNullableFilter<"Discussion"> | string | null
    tags?: StringNullableFilter<"Discussion"> | string | null
    isPinned?: BoolFilter<"Discussion"> | boolean
    isLocked?: BoolFilter<"Discussion"> | boolean
    viewCount?: IntFilter<"Discussion"> | number
    replyCount?: IntFilter<"Discussion"> | number
    lastReplyAt?: DateTimeNullableFilter<"Discussion"> | Date | string | null
    createdAt?: DateTimeFilter<"Discussion"> | Date | string
    updatedAt?: DateTimeFilter<"Discussion"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    academicData?: XOR<AcademicDataNullableScalarRelationFilter, AcademicDataWhereInput> | null
    comments?: CommentListRelationFilter
  }, "id">

  export type DiscussionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    academicDataId?: SortOrderInput | SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    isPinned?: SortOrder
    isLocked?: SortOrder
    viewCount?: SortOrder
    replyCount?: SortOrder
    lastReplyAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DiscussionCountOrderByAggregateInput
    _avg?: DiscussionAvgOrderByAggregateInput
    _max?: DiscussionMaxOrderByAggregateInput
    _min?: DiscussionMinOrderByAggregateInput
    _sum?: DiscussionSumOrderByAggregateInput
  }

  export type DiscussionScalarWhereWithAggregatesInput = {
    AND?: DiscussionScalarWhereWithAggregatesInput | DiscussionScalarWhereWithAggregatesInput[]
    OR?: DiscussionScalarWhereWithAggregatesInput[]
    NOT?: DiscussionScalarWhereWithAggregatesInput | DiscussionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Discussion"> | number
    userId?: IntWithAggregatesFilter<"Discussion"> | number
    academicDataId?: IntNullableWithAggregatesFilter<"Discussion"> | number | null
    title?: StringWithAggregatesFilter<"Discussion"> | string
    content?: StringWithAggregatesFilter<"Discussion"> | string
    category?: StringNullableWithAggregatesFilter<"Discussion"> | string | null
    tags?: StringNullableWithAggregatesFilter<"Discussion"> | string | null
    isPinned?: BoolWithAggregatesFilter<"Discussion"> | boolean
    isLocked?: BoolWithAggregatesFilter<"Discussion"> | boolean
    viewCount?: IntWithAggregatesFilter<"Discussion"> | number
    replyCount?: IntWithAggregatesFilter<"Discussion"> | number
    lastReplyAt?: DateTimeNullableWithAggregatesFilter<"Discussion"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Discussion"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Discussion"> | Date | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: IntFilter<"Comment"> | number
    discussionId?: IntFilter<"Comment"> | number
    userId?: IntFilter<"Comment"> | number
    parentId?: IntNullableFilter<"Comment"> | number | null
    content?: StringFilter<"Comment"> | string
    isEdited?: BoolFilter<"Comment"> | boolean
    editedAt?: DateTimeNullableFilter<"Comment"> | Date | string | null
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    discussion?: XOR<DiscussionScalarRelationFilter, DiscussionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    parent?: XOR<CommentNullableScalarRelationFilter, CommentWhereInput> | null
    replies?: CommentListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    discussionId?: SortOrder
    userId?: SortOrder
    parentId?: SortOrderInput | SortOrder
    content?: SortOrder
    isEdited?: SortOrder
    editedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    discussion?: DiscussionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    parent?: CommentOrderByWithRelationInput
    replies?: CommentOrderByRelationAggregateInput
    _relevance?: CommentOrderByRelevanceInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    discussionId?: IntFilter<"Comment"> | number
    userId?: IntFilter<"Comment"> | number
    parentId?: IntNullableFilter<"Comment"> | number | null
    content?: StringFilter<"Comment"> | string
    isEdited?: BoolFilter<"Comment"> | boolean
    editedAt?: DateTimeNullableFilter<"Comment"> | Date | string | null
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    discussion?: XOR<DiscussionScalarRelationFilter, DiscussionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    parent?: XOR<CommentNullableScalarRelationFilter, CommentWhereInput> | null
    replies?: CommentListRelationFilter
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    discussionId?: SortOrder
    userId?: SortOrder
    parentId?: SortOrderInput | SortOrder
    content?: SortOrder
    isEdited?: SortOrder
    editedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comment"> | number
    discussionId?: IntWithAggregatesFilter<"Comment"> | number
    userId?: IntWithAggregatesFilter<"Comment"> | number
    parentId?: IntNullableWithAggregatesFilter<"Comment"> | number | null
    content?: StringWithAggregatesFilter<"Comment"> | string
    isEdited?: BoolWithAggregatesFilter<"Comment"> | boolean
    editedAt?: DateTimeNullableWithAggregatesFilter<"Comment"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    relatedId?: IntNullableFilter<"Notification"> | number | null
    relatedType?: StringNullableFilter<"Notification"> | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    relatedId?: SortOrderInput | SortOrder
    relatedType?: SortOrderInput | SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: NotificationOrderByRelevanceInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: IntFilter<"Notification"> | number
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    relatedId?: IntNullableFilter<"Notification"> | number | null
    relatedType?: StringNullableFilter<"Notification"> | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    relatedId?: SortOrderInput | SortOrder
    relatedType?: SortOrderInput | SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    userId?: IntWithAggregatesFilter<"Notification"> | number
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    relatedId?: IntNullableWithAggregatesFilter<"Notification"> | number | null
    relatedType?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type PriceHistoryWhereInput = {
    AND?: PriceHistoryWhereInput | PriceHistoryWhereInput[]
    OR?: PriceHistoryWhereInput[]
    NOT?: PriceHistoryWhereInput | PriceHistoryWhereInput[]
    id?: IntFilter<"PriceHistory"> | number
    itemId?: IntFilter<"PriceHistory"> | number
    price?: DecimalFilter<"PriceHistory"> | Decimal | DecimalJsLike | number | string
    condition?: EnumItemConditionFilter<"PriceHistory"> | $Enums.ItemCondition
    category?: StringFilter<"PriceHistory"> | string
    recordedAt?: DateTimeFilter<"PriceHistory"> | Date | string
    item?: XOR<ItemScalarRelationFilter, ItemWhereInput>
  }

  export type PriceHistoryOrderByWithRelationInput = {
    id?: SortOrder
    itemId?: SortOrder
    price?: SortOrder
    condition?: SortOrder
    category?: SortOrder
    recordedAt?: SortOrder
    item?: ItemOrderByWithRelationInput
    _relevance?: PriceHistoryOrderByRelevanceInput
  }

  export type PriceHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PriceHistoryWhereInput | PriceHistoryWhereInput[]
    OR?: PriceHistoryWhereInput[]
    NOT?: PriceHistoryWhereInput | PriceHistoryWhereInput[]
    itemId?: IntFilter<"PriceHistory"> | number
    price?: DecimalFilter<"PriceHistory"> | Decimal | DecimalJsLike | number | string
    condition?: EnumItemConditionFilter<"PriceHistory"> | $Enums.ItemCondition
    category?: StringFilter<"PriceHistory"> | string
    recordedAt?: DateTimeFilter<"PriceHistory"> | Date | string
    item?: XOR<ItemScalarRelationFilter, ItemWhereInput>
  }, "id">

  export type PriceHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    itemId?: SortOrder
    price?: SortOrder
    condition?: SortOrder
    category?: SortOrder
    recordedAt?: SortOrder
    _count?: PriceHistoryCountOrderByAggregateInput
    _avg?: PriceHistoryAvgOrderByAggregateInput
    _max?: PriceHistoryMaxOrderByAggregateInput
    _min?: PriceHistoryMinOrderByAggregateInput
    _sum?: PriceHistorySumOrderByAggregateInput
  }

  export type PriceHistoryScalarWhereWithAggregatesInput = {
    AND?: PriceHistoryScalarWhereWithAggregatesInput | PriceHistoryScalarWhereWithAggregatesInput[]
    OR?: PriceHistoryScalarWhereWithAggregatesInput[]
    NOT?: PriceHistoryScalarWhereWithAggregatesInput | PriceHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PriceHistory"> | number
    itemId?: IntWithAggregatesFilter<"PriceHistory"> | number
    price?: DecimalWithAggregatesFilter<"PriceHistory"> | Decimal | DecimalJsLike | number | string
    condition?: EnumItemConditionWithAggregatesFilter<"PriceHistory"> | $Enums.ItemCondition
    category?: StringWithAggregatesFilter<"PriceHistory"> | string
    recordedAt?: DateTimeWithAggregatesFilter<"PriceHistory"> | Date | string
  }

  export type ItemImageWhereInput = {
    AND?: ItemImageWhereInput | ItemImageWhereInput[]
    OR?: ItemImageWhereInput[]
    NOT?: ItemImageWhereInput | ItemImageWhereInput[]
    id?: IntFilter<"ItemImage"> | number
    itemId?: IntFilter<"ItemImage"> | number
    imageUrl?: StringFilter<"ItemImage"> | string
    isPrimary?: BoolFilter<"ItemImage"> | boolean
    caption?: StringNullableFilter<"ItemImage"> | string | null
    sortOrder?: IntFilter<"ItemImage"> | number
    createdAt?: DateTimeFilter<"ItemImage"> | Date | string
    item?: XOR<ItemScalarRelationFilter, ItemWhereInput>
  }

  export type ItemImageOrderByWithRelationInput = {
    id?: SortOrder
    itemId?: SortOrder
    imageUrl?: SortOrder
    isPrimary?: SortOrder
    caption?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    item?: ItemOrderByWithRelationInput
    _relevance?: ItemImageOrderByRelevanceInput
  }

  export type ItemImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ItemImageWhereInput | ItemImageWhereInput[]
    OR?: ItemImageWhereInput[]
    NOT?: ItemImageWhereInput | ItemImageWhereInput[]
    itemId?: IntFilter<"ItemImage"> | number
    imageUrl?: StringFilter<"ItemImage"> | string
    isPrimary?: BoolFilter<"ItemImage"> | boolean
    caption?: StringNullableFilter<"ItemImage"> | string | null
    sortOrder?: IntFilter<"ItemImage"> | number
    createdAt?: DateTimeFilter<"ItemImage"> | Date | string
    item?: XOR<ItemScalarRelationFilter, ItemWhereInput>
  }, "id">

  export type ItemImageOrderByWithAggregationInput = {
    id?: SortOrder
    itemId?: SortOrder
    imageUrl?: SortOrder
    isPrimary?: SortOrder
    caption?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    _count?: ItemImageCountOrderByAggregateInput
    _avg?: ItemImageAvgOrderByAggregateInput
    _max?: ItemImageMaxOrderByAggregateInput
    _min?: ItemImageMinOrderByAggregateInput
    _sum?: ItemImageSumOrderByAggregateInput
  }

  export type ItemImageScalarWhereWithAggregatesInput = {
    AND?: ItemImageScalarWhereWithAggregatesInput | ItemImageScalarWhereWithAggregatesInput[]
    OR?: ItemImageScalarWhereWithAggregatesInput[]
    NOT?: ItemImageScalarWhereWithAggregatesInput | ItemImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ItemImage"> | number
    itemId?: IntWithAggregatesFilter<"ItemImage"> | number
    imageUrl?: StringWithAggregatesFilter<"ItemImage"> | string
    isPrimary?: BoolWithAggregatesFilter<"ItemImage"> | boolean
    caption?: StringNullableWithAggregatesFilter<"ItemImage"> | string | null
    sortOrder?: IntWithAggregatesFilter<"ItemImage"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ItemImage"> | Date | string
  }

  export type CodLocationWhereInput = {
    AND?: CodLocationWhereInput | CodLocationWhereInput[]
    OR?: CodLocationWhereInput[]
    NOT?: CodLocationWhereInput | CodLocationWhereInput[]
    id?: IntFilter<"CodLocation"> | number
    name?: StringFilter<"CodLocation"> | string
    description?: StringNullableFilter<"CodLocation"> | string | null
    faculty?: StringNullableFilter<"CodLocation"> | string | null
    building?: StringNullableFilter<"CodLocation"> | string | null
    floor?: StringNullableFilter<"CodLocation"> | string | null
    coordinates?: StringNullableFilter<"CodLocation"> | string | null
    imageUrl?: StringNullableFilter<"CodLocation"> | string | null
    safetyRating?: FloatNullableFilter<"CodLocation"> | number | null
    accessibilityRating?: FloatNullableFilter<"CodLocation"> | number | null
    popularityCount?: IntFilter<"CodLocation"> | number
    isActive?: BoolFilter<"CodLocation"> | boolean
    createdAt?: DateTimeFilter<"CodLocation"> | Date | string
    updatedAt?: DateTimeFilter<"CodLocation"> | Date | string
  }

  export type CodLocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    faculty?: SortOrderInput | SortOrder
    building?: SortOrderInput | SortOrder
    floor?: SortOrderInput | SortOrder
    coordinates?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    safetyRating?: SortOrderInput | SortOrder
    accessibilityRating?: SortOrderInput | SortOrder
    popularityCount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: CodLocationOrderByRelevanceInput
  }

  export type CodLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CodLocationWhereInput | CodLocationWhereInput[]
    OR?: CodLocationWhereInput[]
    NOT?: CodLocationWhereInput | CodLocationWhereInput[]
    name?: StringFilter<"CodLocation"> | string
    description?: StringNullableFilter<"CodLocation"> | string | null
    faculty?: StringNullableFilter<"CodLocation"> | string | null
    building?: StringNullableFilter<"CodLocation"> | string | null
    floor?: StringNullableFilter<"CodLocation"> | string | null
    coordinates?: StringNullableFilter<"CodLocation"> | string | null
    imageUrl?: StringNullableFilter<"CodLocation"> | string | null
    safetyRating?: FloatNullableFilter<"CodLocation"> | number | null
    accessibilityRating?: FloatNullableFilter<"CodLocation"> | number | null
    popularityCount?: IntFilter<"CodLocation"> | number
    isActive?: BoolFilter<"CodLocation"> | boolean
    createdAt?: DateTimeFilter<"CodLocation"> | Date | string
    updatedAt?: DateTimeFilter<"CodLocation"> | Date | string
  }, "id">

  export type CodLocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    faculty?: SortOrderInput | SortOrder
    building?: SortOrderInput | SortOrder
    floor?: SortOrderInput | SortOrder
    coordinates?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    safetyRating?: SortOrderInput | SortOrder
    accessibilityRating?: SortOrderInput | SortOrder
    popularityCount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CodLocationCountOrderByAggregateInput
    _avg?: CodLocationAvgOrderByAggregateInput
    _max?: CodLocationMaxOrderByAggregateInput
    _min?: CodLocationMinOrderByAggregateInput
    _sum?: CodLocationSumOrderByAggregateInput
  }

  export type CodLocationScalarWhereWithAggregatesInput = {
    AND?: CodLocationScalarWhereWithAggregatesInput | CodLocationScalarWhereWithAggregatesInput[]
    OR?: CodLocationScalarWhereWithAggregatesInput[]
    NOT?: CodLocationScalarWhereWithAggregatesInput | CodLocationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CodLocation"> | number
    name?: StringWithAggregatesFilter<"CodLocation"> | string
    description?: StringNullableWithAggregatesFilter<"CodLocation"> | string | null
    faculty?: StringNullableWithAggregatesFilter<"CodLocation"> | string | null
    building?: StringNullableWithAggregatesFilter<"CodLocation"> | string | null
    floor?: StringNullableWithAggregatesFilter<"CodLocation"> | string | null
    coordinates?: StringNullableWithAggregatesFilter<"CodLocation"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"CodLocation"> | string | null
    safetyRating?: FloatNullableWithAggregatesFilter<"CodLocation"> | number | null
    accessibilityRating?: FloatNullableWithAggregatesFilter<"CodLocation"> | number | null
    popularityCount?: IntWithAggregatesFilter<"CodLocation"> | number
    isActive?: BoolWithAggregatesFilter<"CodLocation"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"CodLocation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CodLocation"> | Date | string
  }

  export type UserBadgeWhereInput = {
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    id?: IntFilter<"UserBadge"> | number
    userId?: IntFilter<"UserBadge"> | number
    badgeType?: EnumBadgeTypeFilter<"UserBadge"> | $Enums.BadgeType
    title?: StringFilter<"UserBadge"> | string
    description?: StringNullableFilter<"UserBadge"> | string | null
    iconUrl?: StringNullableFilter<"UserBadge"> | string | null
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserBadgeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeType?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    iconUrl?: SortOrderInput | SortOrder
    earnedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: UserBadgeOrderByRelevanceInput
  }

  export type UserBadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    userId?: IntFilter<"UserBadge"> | number
    badgeType?: EnumBadgeTypeFilter<"UserBadge"> | $Enums.BadgeType
    title?: StringFilter<"UserBadge"> | string
    description?: StringNullableFilter<"UserBadge"> | string | null
    iconUrl?: StringNullableFilter<"UserBadge"> | string | null
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserBadgeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeType?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    iconUrl?: SortOrderInput | SortOrder
    earnedAt?: SortOrder
    _count?: UserBadgeCountOrderByAggregateInput
    _avg?: UserBadgeAvgOrderByAggregateInput
    _max?: UserBadgeMaxOrderByAggregateInput
    _min?: UserBadgeMinOrderByAggregateInput
    _sum?: UserBadgeSumOrderByAggregateInput
  }

  export type UserBadgeScalarWhereWithAggregatesInput = {
    AND?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    OR?: UserBadgeScalarWhereWithAggregatesInput[]
    NOT?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserBadge"> | number
    userId?: IntWithAggregatesFilter<"UserBadge"> | number
    badgeType?: EnumBadgeTypeWithAggregatesFilter<"UserBadge"> | $Enums.BadgeType
    title?: StringWithAggregatesFilter<"UserBadge"> | string
    description?: StringNullableWithAggregatesFilter<"UserBadge"> | string | null
    iconUrl?: StringNullableWithAggregatesFilter<"UserBadge"> | string | null
    earnedAt?: DateTimeWithAggregatesFilter<"UserBadge"> | Date | string
  }

  export type DonationRequestWhereInput = {
    AND?: DonationRequestWhereInput | DonationRequestWhereInput[]
    OR?: DonationRequestWhereInput[]
    NOT?: DonationRequestWhereInput | DonationRequestWhereInput[]
    id?: IntFilter<"DonationRequest"> | number
    userId?: IntFilter<"DonationRequest"> | number
    title?: StringFilter<"DonationRequest"> | string
    description?: StringFilter<"DonationRequest"> | string
    category?: StringNullableFilter<"DonationRequest"> | string | null
    urgency?: EnumDonationUrgencyFilter<"DonationRequest"> | $Enums.DonationUrgency
    status?: EnumDonationRequestStatusFilter<"DonationRequest"> | $Enums.DonationRequestStatus
    maxQuantity?: IntNullableFilter<"DonationRequest"> | number | null
    receivedCount?: IntFilter<"DonationRequest"> | number
    location?: StringNullableFilter<"DonationRequest"> | string | null
    contactInfo?: StringNullableFilter<"DonationRequest"> | string | null
    expiresAt?: DateTimeNullableFilter<"DonationRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"DonationRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DonationRequest"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    donationDistributions?: DonationDistributionListRelationFilter
  }

  export type DonationRequestOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrderInput | SortOrder
    urgency?: SortOrder
    status?: SortOrder
    maxQuantity?: SortOrderInput | SortOrder
    receivedCount?: SortOrder
    location?: SortOrderInput | SortOrder
    contactInfo?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    donationDistributions?: DonationDistributionOrderByRelationAggregateInput
    _relevance?: DonationRequestOrderByRelevanceInput
  }

  export type DonationRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DonationRequestWhereInput | DonationRequestWhereInput[]
    OR?: DonationRequestWhereInput[]
    NOT?: DonationRequestWhereInput | DonationRequestWhereInput[]
    userId?: IntFilter<"DonationRequest"> | number
    title?: StringFilter<"DonationRequest"> | string
    description?: StringFilter<"DonationRequest"> | string
    category?: StringNullableFilter<"DonationRequest"> | string | null
    urgency?: EnumDonationUrgencyFilter<"DonationRequest"> | $Enums.DonationUrgency
    status?: EnumDonationRequestStatusFilter<"DonationRequest"> | $Enums.DonationRequestStatus
    maxQuantity?: IntNullableFilter<"DonationRequest"> | number | null
    receivedCount?: IntFilter<"DonationRequest"> | number
    location?: StringNullableFilter<"DonationRequest"> | string | null
    contactInfo?: StringNullableFilter<"DonationRequest"> | string | null
    expiresAt?: DateTimeNullableFilter<"DonationRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"DonationRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DonationRequest"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    donationDistributions?: DonationDistributionListRelationFilter
  }, "id">

  export type DonationRequestOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrderInput | SortOrder
    urgency?: SortOrder
    status?: SortOrder
    maxQuantity?: SortOrderInput | SortOrder
    receivedCount?: SortOrder
    location?: SortOrderInput | SortOrder
    contactInfo?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DonationRequestCountOrderByAggregateInput
    _avg?: DonationRequestAvgOrderByAggregateInput
    _max?: DonationRequestMaxOrderByAggregateInput
    _min?: DonationRequestMinOrderByAggregateInput
    _sum?: DonationRequestSumOrderByAggregateInput
  }

  export type DonationRequestScalarWhereWithAggregatesInput = {
    AND?: DonationRequestScalarWhereWithAggregatesInput | DonationRequestScalarWhereWithAggregatesInput[]
    OR?: DonationRequestScalarWhereWithAggregatesInput[]
    NOT?: DonationRequestScalarWhereWithAggregatesInput | DonationRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DonationRequest"> | number
    userId?: IntWithAggregatesFilter<"DonationRequest"> | number
    title?: StringWithAggregatesFilter<"DonationRequest"> | string
    description?: StringWithAggregatesFilter<"DonationRequest"> | string
    category?: StringNullableWithAggregatesFilter<"DonationRequest"> | string | null
    urgency?: EnumDonationUrgencyWithAggregatesFilter<"DonationRequest"> | $Enums.DonationUrgency
    status?: EnumDonationRequestStatusWithAggregatesFilter<"DonationRequest"> | $Enums.DonationRequestStatus
    maxQuantity?: IntNullableWithAggregatesFilter<"DonationRequest"> | number | null
    receivedCount?: IntWithAggregatesFilter<"DonationRequest"> | number
    location?: StringNullableWithAggregatesFilter<"DonationRequest"> | string | null
    contactInfo?: StringNullableWithAggregatesFilter<"DonationRequest"> | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"DonationRequest"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DonationRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DonationRequest"> | Date | string
  }

  export type DonationDistributionWhereInput = {
    AND?: DonationDistributionWhereInput | DonationDistributionWhereInput[]
    OR?: DonationDistributionWhereInput[]
    NOT?: DonationDistributionWhereInput | DonationDistributionWhereInput[]
    id?: IntFilter<"DonationDistribution"> | number
    donationRequestId?: IntNullableFilter<"DonationDistribution"> | number | null
    donorId?: IntFilter<"DonationDistribution"> | number
    recipientId?: IntFilter<"DonationDistribution"> | number
    itemTitle?: StringFilter<"DonationDistribution"> | string
    itemDescription?: StringNullableFilter<"DonationDistribution"> | string | null
    quantity?: IntFilter<"DonationDistribution"> | number
    status?: EnumDistributionStatusFilter<"DonationDistribution"> | $Enums.DistributionStatus
    distributedAt?: DateTimeNullableFilter<"DonationDistribution"> | Date | string | null
    notes?: StringNullableFilter<"DonationDistribution"> | string | null
    createdAt?: DateTimeFilter<"DonationDistribution"> | Date | string
    updatedAt?: DateTimeFilter<"DonationDistribution"> | Date | string
    donationRequest?: XOR<DonationRequestNullableScalarRelationFilter, DonationRequestWhereInput> | null
    donor?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DonationDistributionOrderByWithRelationInput = {
    id?: SortOrder
    donationRequestId?: SortOrderInput | SortOrder
    donorId?: SortOrder
    recipientId?: SortOrder
    itemTitle?: SortOrder
    itemDescription?: SortOrderInput | SortOrder
    quantity?: SortOrder
    status?: SortOrder
    distributedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    donationRequest?: DonationRequestOrderByWithRelationInput
    donor?: UserOrderByWithRelationInput
    _relevance?: DonationDistributionOrderByRelevanceInput
  }

  export type DonationDistributionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DonationDistributionWhereInput | DonationDistributionWhereInput[]
    OR?: DonationDistributionWhereInput[]
    NOT?: DonationDistributionWhereInput | DonationDistributionWhereInput[]
    donationRequestId?: IntNullableFilter<"DonationDistribution"> | number | null
    donorId?: IntFilter<"DonationDistribution"> | number
    recipientId?: IntFilter<"DonationDistribution"> | number
    itemTitle?: StringFilter<"DonationDistribution"> | string
    itemDescription?: StringNullableFilter<"DonationDistribution"> | string | null
    quantity?: IntFilter<"DonationDistribution"> | number
    status?: EnumDistributionStatusFilter<"DonationDistribution"> | $Enums.DistributionStatus
    distributedAt?: DateTimeNullableFilter<"DonationDistribution"> | Date | string | null
    notes?: StringNullableFilter<"DonationDistribution"> | string | null
    createdAt?: DateTimeFilter<"DonationDistribution"> | Date | string
    updatedAt?: DateTimeFilter<"DonationDistribution"> | Date | string
    donationRequest?: XOR<DonationRequestNullableScalarRelationFilter, DonationRequestWhereInput> | null
    donor?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type DonationDistributionOrderByWithAggregationInput = {
    id?: SortOrder
    donationRequestId?: SortOrderInput | SortOrder
    donorId?: SortOrder
    recipientId?: SortOrder
    itemTitle?: SortOrder
    itemDescription?: SortOrderInput | SortOrder
    quantity?: SortOrder
    status?: SortOrder
    distributedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DonationDistributionCountOrderByAggregateInput
    _avg?: DonationDistributionAvgOrderByAggregateInput
    _max?: DonationDistributionMaxOrderByAggregateInput
    _min?: DonationDistributionMinOrderByAggregateInput
    _sum?: DonationDistributionSumOrderByAggregateInput
  }

  export type DonationDistributionScalarWhereWithAggregatesInput = {
    AND?: DonationDistributionScalarWhereWithAggregatesInput | DonationDistributionScalarWhereWithAggregatesInput[]
    OR?: DonationDistributionScalarWhereWithAggregatesInput[]
    NOT?: DonationDistributionScalarWhereWithAggregatesInput | DonationDistributionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DonationDistribution"> | number
    donationRequestId?: IntNullableWithAggregatesFilter<"DonationDistribution"> | number | null
    donorId?: IntWithAggregatesFilter<"DonationDistribution"> | number
    recipientId?: IntWithAggregatesFilter<"DonationDistribution"> | number
    itemTitle?: StringWithAggregatesFilter<"DonationDistribution"> | string
    itemDescription?: StringNullableWithAggregatesFilter<"DonationDistribution"> | string | null
    quantity?: IntWithAggregatesFilter<"DonationDistribution"> | number
    status?: EnumDistributionStatusWithAggregatesFilter<"DonationDistribution"> | $Enums.DistributionStatus
    distributedAt?: DateTimeNullableWithAggregatesFilter<"DonationDistribution"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"DonationDistribution"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DonationDistribution"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DonationDistribution"> | Date | string
  }

  export type RecommendationWhereInput = {
    AND?: RecommendationWhereInput | RecommendationWhereInput[]
    OR?: RecommendationWhereInput[]
    NOT?: RecommendationWhereInput | RecommendationWhereInput[]
    id?: IntFilter<"Recommendation"> | number
    userId?: IntFilter<"Recommendation"> | number
    itemId?: IntFilter<"Recommendation"> | number
    score?: FloatFilter<"Recommendation"> | number
    reason?: EnumRecommendationReasonFilter<"Recommendation"> | $Enums.RecommendationReason
    createdAt?: DateTimeFilter<"Recommendation"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    item?: XOR<ItemScalarRelationFilter, ItemWhereInput>
  }

  export type RecommendationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    score?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    item?: ItemOrderByWithRelationInput
  }

  export type RecommendationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_itemId?: RecommendationUserIdItemIdCompoundUniqueInput
    AND?: RecommendationWhereInput | RecommendationWhereInput[]
    OR?: RecommendationWhereInput[]
    NOT?: RecommendationWhereInput | RecommendationWhereInput[]
    userId?: IntFilter<"Recommendation"> | number
    itemId?: IntFilter<"Recommendation"> | number
    score?: FloatFilter<"Recommendation"> | number
    reason?: EnumRecommendationReasonFilter<"Recommendation"> | $Enums.RecommendationReason
    createdAt?: DateTimeFilter<"Recommendation"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    item?: XOR<ItemScalarRelationFilter, ItemWhereInput>
  }, "id" | "userId_itemId">

  export type RecommendationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    score?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    _count?: RecommendationCountOrderByAggregateInput
    _avg?: RecommendationAvgOrderByAggregateInput
    _max?: RecommendationMaxOrderByAggregateInput
    _min?: RecommendationMinOrderByAggregateInput
    _sum?: RecommendationSumOrderByAggregateInput
  }

  export type RecommendationScalarWhereWithAggregatesInput = {
    AND?: RecommendationScalarWhereWithAggregatesInput | RecommendationScalarWhereWithAggregatesInput[]
    OR?: RecommendationScalarWhereWithAggregatesInput[]
    NOT?: RecommendationScalarWhereWithAggregatesInput | RecommendationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Recommendation"> | number
    userId?: IntWithAggregatesFilter<"Recommendation"> | number
    itemId?: IntWithAggregatesFilter<"Recommendation"> | number
    score?: FloatWithAggregatesFilter<"Recommendation"> | number
    reason?: EnumRecommendationReasonWithAggregatesFilter<"Recommendation"> | $Enums.RecommendationReason
    createdAt?: DateTimeWithAggregatesFilter<"Recommendation"> | Date | string
  }

  export type AcademicPreferenceWhereInput = {
    AND?: AcademicPreferenceWhereInput | AcademicPreferenceWhereInput[]
    OR?: AcademicPreferenceWhereInput[]
    NOT?: AcademicPreferenceWhereInput | AcademicPreferenceWhereInput[]
    id?: IntFilter<"AcademicPreference"> | number
    userId?: IntFilter<"AcademicPreference"> | number
    academicDataId?: IntFilter<"AcademicPreference"> | number
    priority?: IntFilter<"AcademicPreference"> | number
    isActive?: BoolFilter<"AcademicPreference"> | boolean
    createdAt?: DateTimeFilter<"AcademicPreference"> | Date | string
    updatedAt?: DateTimeFilter<"AcademicPreference"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    academicData?: XOR<AcademicDataScalarRelationFilter, AcademicDataWhereInput>
  }

  export type AcademicPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    academicDataId?: SortOrder
    priority?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    academicData?: AcademicDataOrderByWithRelationInput
  }

  export type AcademicPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_academicDataId?: AcademicPreferenceUserIdAcademicDataIdCompoundUniqueInput
    AND?: AcademicPreferenceWhereInput | AcademicPreferenceWhereInput[]
    OR?: AcademicPreferenceWhereInput[]
    NOT?: AcademicPreferenceWhereInput | AcademicPreferenceWhereInput[]
    userId?: IntFilter<"AcademicPreference"> | number
    academicDataId?: IntFilter<"AcademicPreference"> | number
    priority?: IntFilter<"AcademicPreference"> | number
    isActive?: BoolFilter<"AcademicPreference"> | boolean
    createdAt?: DateTimeFilter<"AcademicPreference"> | Date | string
    updatedAt?: DateTimeFilter<"AcademicPreference"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    academicData?: XOR<AcademicDataScalarRelationFilter, AcademicDataWhereInput>
  }, "id" | "userId_academicDataId">

  export type AcademicPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    academicDataId?: SortOrder
    priority?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AcademicPreferenceCountOrderByAggregateInput
    _avg?: AcademicPreferenceAvgOrderByAggregateInput
    _max?: AcademicPreferenceMaxOrderByAggregateInput
    _min?: AcademicPreferenceMinOrderByAggregateInput
    _sum?: AcademicPreferenceSumOrderByAggregateInput
  }

  export type AcademicPreferenceScalarWhereWithAggregatesInput = {
    AND?: AcademicPreferenceScalarWhereWithAggregatesInput | AcademicPreferenceScalarWhereWithAggregatesInput[]
    OR?: AcademicPreferenceScalarWhereWithAggregatesInput[]
    NOT?: AcademicPreferenceScalarWhereWithAggregatesInput | AcademicPreferenceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AcademicPreference"> | number
    userId?: IntWithAggregatesFilter<"AcademicPreference"> | number
    academicDataId?: IntWithAggregatesFilter<"AcademicPreference"> | number
    priority?: IntWithAggregatesFilter<"AcademicPreference"> | number
    isActive?: BoolWithAggregatesFilter<"AcademicPreference"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"AcademicPreference"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AcademicPreference"> | Date | string
  }

  export type CartCreateInput = {
    quantity: number
    user: UserCreateNestedOneWithoutCartsInput
    item: ItemCreateNestedOneWithoutCartsInput
  }

  export type CartUncheckedCreateInput = {
    id?: number
    userId: number
    itemId: number
    quantity: number
  }

  export type CartUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutCartsNestedInput
    item?: ItemUpdateOneRequiredWithoutCartsNestedInput
  }

  export type CartUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CartCreateManyInput = {
    id?: number
    userId: number
    itemId: number
    quantity: number
  }

  export type CartUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CartUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemCreateInput = {
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutItemsInput
    itemImages?: ItemImageCreateNestedManyWithoutItemInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequestedItemInput
    wishlists?: WishlistCreateNestedManyWithoutItemInput
    transactions?: TransactionCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryCreateNestedManyWithoutItemInput
    recommendations?: RecommendationCreateNestedManyWithoutItemInput
    carts?: CartCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateInput = {
    id?: number
    userId: number
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    itemImages?: ItemImageUncheckedCreateNestedManyWithoutItemInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequestedItemInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutItemInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryUncheckedCreateNestedManyWithoutItemInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutItemInput
    carts?: CartUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutItemsNestedInput
    itemImages?: ItemImageUpdateManyWithoutItemNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequestedItemNestedInput
    wishlists?: WishlistUpdateManyWithoutItemNestedInput
    transactions?: TransactionUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUpdateManyWithoutItemNestedInput
    carts?: CartUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    itemImages?: ItemImageUncheckedUpdateManyWithoutItemNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequestedItemNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutItemNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUncheckedUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutItemNestedInput
    carts?: CartUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemCreateManyInput = {
    id?: number
    userId: number
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicDataCreateInput = {
    courseCode: string
    courseName: string
    lecturerName?: string | null
    faculty: string
    semester?: number | null
    credits?: number | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    discussions?: DiscussionCreateNestedManyWithoutAcademicDataInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutAcademicDataInput
  }

  export type AcademicDataUncheckedCreateInput = {
    id?: number
    courseCode: string
    courseName: string
    lecturerName?: string | null
    faculty: string
    semester?: number | null
    credits?: number | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    discussions?: DiscussionUncheckedCreateNestedManyWithoutAcademicDataInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutAcademicDataInput
  }

  export type AcademicDataUpdateInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    lecturerName?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: StringFieldUpdateOperationsInput | string
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discussions?: DiscussionUpdateManyWithoutAcademicDataNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutAcademicDataNestedInput
  }

  export type AcademicDataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    lecturerName?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: StringFieldUpdateOperationsInput | string
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discussions?: DiscussionUncheckedUpdateManyWithoutAcademicDataNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutAcademicDataNestedInput
  }

  export type AcademicDataCreateManyInput = {
    id?: number
    courseCode: string
    courseName: string
    lecturerName?: string | null
    faculty: string
    semester?: number | null
    credits?: number | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicDataUpdateManyMutationInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    lecturerName?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: StringFieldUpdateOperationsInput | string
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicDataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    lecturerName?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: StringFieldUpdateOperationsInput | string
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.TransactionStatus
    paymentMethod?: string | null
    paymentStatus?: $Enums.PaymentStatus
    codLocation?: string | null
    notes?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer: UserCreateNestedOneWithoutBuyerTransactionsInput
    seller: UserCreateNestedOneWithoutSellerTransactionsInput
    item: ItemCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: number
    buyerId: number
    sellerId: number
    itemId: number
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.TransactionStatus
    paymentMethod?: string | null
    paymentStatus?: $Enums.PaymentStatus
    codLocation?: string | null
    notes?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    codLocation?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneRequiredWithoutBuyerTransactionsNestedInput
    seller?: UserUpdateOneRequiredWithoutSellerTransactionsNestedInput
    item?: ItemUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyerId?: IntFieldUpdateOperationsInput | number
    sellerId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    codLocation?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    id?: number
    buyerId: number
    sellerId: number
    itemId: number
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.TransactionStatus
    paymentMethod?: string | null
    paymentStatus?: $Enums.PaymentStatus
    codLocation?: string | null
    notes?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    codLocation?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyerId?: IntFieldUpdateOperationsInput | number
    sellerId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    codLocation?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarterRequestCreateInput = {
    itemOwnerId: number
    offeredItemIds: string
    message?: string | null
    status?: $Enums.BarterStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutBarterRequestsInput
    requestedItem: ItemCreateNestedOneWithoutBarterRequestsInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutBarterRequestInput
  }

  export type BarterRequestUncheckedCreateInput = {
    id?: number
    requesterId: number
    itemOwnerId: number
    requestedItemId: number
    offeredItemIds: string
    message?: string | null
    status?: $Enums.BarterStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutBarterRequestInput
  }

  export type BarterRequestUpdateInput = {
    itemOwnerId?: IntFieldUpdateOperationsInput | number
    offeredItemIds?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBarterStatusFieldUpdateOperationsInput | $Enums.BarterStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutBarterRequestsNestedInput
    requestedItem?: ItemUpdateOneRequiredWithoutBarterRequestsNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutBarterRequestNestedInput
  }

  export type BarterRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requesterId?: IntFieldUpdateOperationsInput | number
    itemOwnerId?: IntFieldUpdateOperationsInput | number
    requestedItemId?: IntFieldUpdateOperationsInput | number
    offeredItemIds?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBarterStatusFieldUpdateOperationsInput | $Enums.BarterStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutBarterRequestNestedInput
  }

  export type BarterRequestCreateManyInput = {
    id?: number
    requesterId: number
    itemOwnerId: number
    requestedItemId: number
    offeredItemIds: string
    message?: string | null
    status?: $Enums.BarterStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BarterRequestUpdateManyMutationInput = {
    itemOwnerId?: IntFieldUpdateOperationsInput | number
    offeredItemIds?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBarterStatusFieldUpdateOperationsInput | $Enums.BarterStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarterRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requesterId?: IntFieldUpdateOperationsInput | number
    itemOwnerId?: IntFieldUpdateOperationsInput | number
    requestedItemId?: IntFieldUpdateOperationsInput | number
    offeredItemIds?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBarterStatusFieldUpdateOperationsInput | $Enums.BarterStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarterNegotiationCreateInput = {
    message: string
    isRead?: boolean
    createdAt?: Date | string
    barterRequest: BarterRequestCreateNestedOneWithoutBarterNegotiationsInput
    sender: UserCreateNestedOneWithoutBarterNegotiationsInput
  }

  export type BarterNegotiationUncheckedCreateInput = {
    id?: number
    barterRequestId: number
    senderId: number
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type BarterNegotiationUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barterRequest?: BarterRequestUpdateOneRequiredWithoutBarterNegotiationsNestedInput
    sender?: UserUpdateOneRequiredWithoutBarterNegotiationsNestedInput
  }

  export type BarterNegotiationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    barterRequestId?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarterNegotiationCreateManyInput = {
    id?: number
    barterRequestId: number
    senderId: number
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type BarterNegotiationUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarterNegotiationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    barterRequestId?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WtbRequestCreateInput = {
    title: string
    description: string
    maxPrice?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    preferredCondition?: string | null
    location?: string | null
    urgency?: $Enums.WtbUrgency
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWtbRequestsInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutWtbRequestInput
  }

  export type WtbRequestUncheckedCreateInput = {
    id?: number
    userId: number
    title: string
    description: string
    maxPrice?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    preferredCondition?: string | null
    location?: string | null
    urgency?: $Enums.WtbUrgency
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutWtbRequestInput
  }

  export type WtbRequestUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCondition?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumWtbUrgencyFieldUpdateOperationsInput | $Enums.WtbUrgency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWtbRequestsNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutWtbRequestNestedInput
  }

  export type WtbRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCondition?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumWtbUrgencyFieldUpdateOperationsInput | $Enums.WtbUrgency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutWtbRequestNestedInput
  }

  export type WtbRequestCreateManyInput = {
    id?: number
    userId: number
    title: string
    description: string
    maxPrice?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    preferredCondition?: string | null
    location?: string | null
    urgency?: $Enums.WtbUrgency
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WtbRequestUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCondition?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumWtbUrgencyFieldUpdateOperationsInput | $Enums.WtbUrgency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WtbRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCondition?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumWtbUrgencyFieldUpdateOperationsInput | $Enums.WtbUrgency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WtbResponseCreateInput = {
    message: string
    offeredPrice?: Decimal | DecimalJsLike | number | string | null
    itemImages?: string | null
    contactInfo?: string | null
    isRead?: boolean
    createdAt?: Date | string
    wtbRequest: WtbRequestCreateNestedOneWithoutWtbResponsesInput
    responder: UserCreateNestedOneWithoutWtbResponsesInput
  }

  export type WtbResponseUncheckedCreateInput = {
    id?: number
    wtbRequestId: number
    responderId: number
    message: string
    offeredPrice?: Decimal | DecimalJsLike | number | string | null
    itemImages?: string | null
    contactInfo?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type WtbResponseUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    offeredPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    itemImages?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wtbRequest?: WtbRequestUpdateOneRequiredWithoutWtbResponsesNestedInput
    responder?: UserUpdateOneRequiredWithoutWtbResponsesNestedInput
  }

  export type WtbResponseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    wtbRequestId?: IntFieldUpdateOperationsInput | number
    responderId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    offeredPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    itemImages?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WtbResponseCreateManyInput = {
    id?: number
    wtbRequestId: number
    responderId: number
    message: string
    offeredPrice?: Decimal | DecimalJsLike | number | string | null
    itemImages?: string | null
    contactInfo?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type WtbResponseUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    offeredPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    itemImages?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WtbResponseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    wtbRequestId?: IntFieldUpdateOperationsInput | number
    responderId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    offeredPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    itemImages?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutWishlistsInput
    item: ItemCreateNestedOneWithoutWishlistsInput
  }

  export type WishlistUncheckedCreateInput = {
    id?: number
    userId: number
    itemId: number
    createdAt?: Date | string
  }

  export type WishlistUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWishlistsNestedInput
    item?: ItemUpdateOneRequiredWithoutWishlistsNestedInput
  }

  export type WishlistUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistCreateManyInput = {
    id?: number
    userId: number
    itemId: number
    createdAt?: Date | string
  }

  export type WishlistUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionCreateInput = {
    title: string
    content: string
    category?: string | null
    tags?: string | null
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDiscussionsInput
    academicData?: AcademicDataCreateNestedOneWithoutDiscussionsInput
    comments?: CommentCreateNestedManyWithoutDiscussionInput
  }

  export type DiscussionUncheckedCreateInput = {
    id?: number
    userId: number
    academicDataId?: number | null
    title: string
    content: string
    category?: string | null
    tags?: string | null
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutDiscussionInput
  }

  export type DiscussionUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDiscussionsNestedInput
    academicData?: AcademicDataUpdateOneWithoutDiscussionsNestedInput
    comments?: CommentUpdateManyWithoutDiscussionNestedInput
  }

  export type DiscussionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    academicDataId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutDiscussionNestedInput
  }

  export type DiscussionCreateManyInput = {
    id?: number
    userId: number
    academicDataId?: number | null
    title: string
    content: string
    category?: string | null
    tags?: string | null
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscussionUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    academicDataId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    content: string
    isEdited?: boolean
    editedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    discussion: DiscussionCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    discussionId: number
    userId: number
    parentId?: number | null
    content: string
    isEdited?: boolean
    editedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discussion?: DiscussionUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    discussionId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentCreateManyInput = {
    id?: number
    discussionId: number
    userId: number
    parentId?: number | null
    content: string
    isEdited?: boolean
    editedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    discussionId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    type: $Enums.NotificationType
    title: string
    message: string
    relatedId?: number | null
    relatedType?: string | null
    isRead?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    userId: number
    type: $Enums.NotificationType
    title: string
    message: string
    relatedId?: number | null
    relatedType?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    relatedId?: NullableIntFieldUpdateOperationsInput | number | null
    relatedType?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    relatedId?: NullableIntFieldUpdateOperationsInput | number | null
    relatedType?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    userId: number
    type: $Enums.NotificationType
    title: string
    message: string
    relatedId?: number | null
    relatedType?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    relatedId?: NullableIntFieldUpdateOperationsInput | number | null
    relatedType?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    relatedId?: NullableIntFieldUpdateOperationsInput | number | null
    relatedType?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceHistoryCreateInput = {
    price: Decimal | DecimalJsLike | number | string
    condition: $Enums.ItemCondition
    category: string
    recordedAt?: Date | string
    item: ItemCreateNestedOneWithoutPriceHistoriesInput
  }

  export type PriceHistoryUncheckedCreateInput = {
    id?: number
    itemId: number
    price: Decimal | DecimalJsLike | number | string
    condition: $Enums.ItemCondition
    category: string
    recordedAt?: Date | string
  }

  export type PriceHistoryUpdateInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    category?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneRequiredWithoutPriceHistoriesNestedInput
  }

  export type PriceHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    category?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceHistoryCreateManyInput = {
    id?: number
    itemId: number
    price: Decimal | DecimalJsLike | number | string
    condition: $Enums.ItemCondition
    category: string
    recordedAt?: Date | string
  }

  export type PriceHistoryUpdateManyMutationInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    category?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    category?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemImageCreateInput = {
    imageUrl: string
    isPrimary?: boolean
    caption?: string | null
    sortOrder?: number
    createdAt?: Date | string
    item: ItemCreateNestedOneWithoutItemImagesInput
  }

  export type ItemImageUncheckedCreateInput = {
    id?: number
    itemId: number
    imageUrl: string
    isPrimary?: boolean
    caption?: string | null
    sortOrder?: number
    createdAt?: Date | string
  }

  export type ItemImageUpdateInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneRequiredWithoutItemImagesNestedInput
  }

  export type ItemImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemImageCreateManyInput = {
    id?: number
    itemId: number
    imageUrl: string
    isPrimary?: boolean
    caption?: string | null
    sortOrder?: number
    createdAt?: Date | string
  }

  export type ItemImageUpdateManyMutationInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodLocationCreateInput = {
    name: string
    description?: string | null
    faculty?: string | null
    building?: string | null
    floor?: string | null
    coordinates?: string | null
    imageUrl?: string | null
    safetyRating?: number | null
    accessibilityRating?: number | null
    popularityCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CodLocationUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    faculty?: string | null
    building?: string | null
    floor?: string | null
    coordinates?: string | null
    imageUrl?: string | null
    safetyRating?: number | null
    accessibilityRating?: number | null
    popularityCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CodLocationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    safetyRating?: NullableFloatFieldUpdateOperationsInput | number | null
    accessibilityRating?: NullableFloatFieldUpdateOperationsInput | number | null
    popularityCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodLocationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    safetyRating?: NullableFloatFieldUpdateOperationsInput | number | null
    accessibilityRating?: NullableFloatFieldUpdateOperationsInput | number | null
    popularityCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodLocationCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    faculty?: string | null
    building?: string | null
    floor?: string | null
    coordinates?: string | null
    imageUrl?: string | null
    safetyRating?: number | null
    accessibilityRating?: number | null
    popularityCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CodLocationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    safetyRating?: NullableFloatFieldUpdateOperationsInput | number | null
    accessibilityRating?: NullableFloatFieldUpdateOperationsInput | number | null
    popularityCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodLocationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    safetyRating?: NullableFloatFieldUpdateOperationsInput | number | null
    accessibilityRating?: NullableFloatFieldUpdateOperationsInput | number | null
    popularityCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeCreateInput = {
    badgeType: $Enums.BadgeType
    title: string
    description?: string | null
    iconUrl?: string | null
    earnedAt?: Date | string
    user: UserCreateNestedOneWithoutUserBadgesInput
  }

  export type UserBadgeUncheckedCreateInput = {
    id?: number
    userId: number
    badgeType: $Enums.BadgeType
    title: string
    description?: string | null
    iconUrl?: string | null
    earnedAt?: Date | string
  }

  export type UserBadgeUpdateInput = {
    badgeType?: EnumBadgeTypeFieldUpdateOperationsInput | $Enums.BadgeType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserBadgesNestedInput
  }

  export type UserBadgeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    badgeType?: EnumBadgeTypeFieldUpdateOperationsInput | $Enums.BadgeType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeCreateManyInput = {
    id?: number
    userId: number
    badgeType: $Enums.BadgeType
    title: string
    description?: string | null
    iconUrl?: string | null
    earnedAt?: Date | string
  }

  export type UserBadgeUpdateManyMutationInput = {
    badgeType?: EnumBadgeTypeFieldUpdateOperationsInput | $Enums.BadgeType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    badgeType?: EnumBadgeTypeFieldUpdateOperationsInput | $Enums.BadgeType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DonationRequestCreateInput = {
    title: string
    description: string
    category?: string | null
    urgency?: $Enums.DonationUrgency
    status?: $Enums.DonationRequestStatus
    maxQuantity?: number | null
    receivedCount?: number
    location?: string | null
    contactInfo?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDonationRequestsInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonationRequestInput
  }

  export type DonationRequestUncheckedCreateInput = {
    id?: number
    userId: number
    title: string
    description: string
    category?: string | null
    urgency?: $Enums.DonationUrgency
    status?: $Enums.DonationRequestStatus
    maxQuantity?: number | null
    receivedCount?: number
    location?: string | null
    contactInfo?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonationRequestInput
  }

  export type DonationRequestUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumDonationUrgencyFieldUpdateOperationsInput | $Enums.DonationUrgency
    status?: EnumDonationRequestStatusFieldUpdateOperationsInput | $Enums.DonationRequestStatus
    maxQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    receivedCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDonationRequestsNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonationRequestNestedInput
  }

  export type DonationRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumDonationUrgencyFieldUpdateOperationsInput | $Enums.DonationUrgency
    status?: EnumDonationRequestStatusFieldUpdateOperationsInput | $Enums.DonationRequestStatus
    maxQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    receivedCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonationRequestNestedInput
  }

  export type DonationRequestCreateManyInput = {
    id?: number
    userId: number
    title: string
    description: string
    category?: string | null
    urgency?: $Enums.DonationUrgency
    status?: $Enums.DonationRequestStatus
    maxQuantity?: number | null
    receivedCount?: number
    location?: string | null
    contactInfo?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DonationRequestUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumDonationUrgencyFieldUpdateOperationsInput | $Enums.DonationUrgency
    status?: EnumDonationRequestStatusFieldUpdateOperationsInput | $Enums.DonationRequestStatus
    maxQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    receivedCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DonationRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumDonationUrgencyFieldUpdateOperationsInput | $Enums.DonationUrgency
    status?: EnumDonationRequestStatusFieldUpdateOperationsInput | $Enums.DonationRequestStatus
    maxQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    receivedCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DonationDistributionCreateInput = {
    recipientId: number
    itemTitle: string
    itemDescription?: string | null
    quantity?: number
    status?: $Enums.DistributionStatus
    distributedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    donationRequest?: DonationRequestCreateNestedOneWithoutDonationDistributionsInput
    donor: UserCreateNestedOneWithoutDonationDistributionsInput
  }

  export type DonationDistributionUncheckedCreateInput = {
    id?: number
    donationRequestId?: number | null
    donorId: number
    recipientId: number
    itemTitle: string
    itemDescription?: string | null
    quantity?: number
    status?: $Enums.DistributionStatus
    distributedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DonationDistributionUpdateInput = {
    recipientId?: IntFieldUpdateOperationsInput | number
    itemTitle?: StringFieldUpdateOperationsInput | string
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumDistributionStatusFieldUpdateOperationsInput | $Enums.DistributionStatus
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    donationRequest?: DonationRequestUpdateOneWithoutDonationDistributionsNestedInput
    donor?: UserUpdateOneRequiredWithoutDonationDistributionsNestedInput
  }

  export type DonationDistributionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    donationRequestId?: NullableIntFieldUpdateOperationsInput | number | null
    donorId?: IntFieldUpdateOperationsInput | number
    recipientId?: IntFieldUpdateOperationsInput | number
    itemTitle?: StringFieldUpdateOperationsInput | string
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumDistributionStatusFieldUpdateOperationsInput | $Enums.DistributionStatus
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DonationDistributionCreateManyInput = {
    id?: number
    donationRequestId?: number | null
    donorId: number
    recipientId: number
    itemTitle: string
    itemDescription?: string | null
    quantity?: number
    status?: $Enums.DistributionStatus
    distributedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DonationDistributionUpdateManyMutationInput = {
    recipientId?: IntFieldUpdateOperationsInput | number
    itemTitle?: StringFieldUpdateOperationsInput | string
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumDistributionStatusFieldUpdateOperationsInput | $Enums.DistributionStatus
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DonationDistributionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    donationRequestId?: NullableIntFieldUpdateOperationsInput | number | null
    donorId?: IntFieldUpdateOperationsInput | number
    recipientId?: IntFieldUpdateOperationsInput | number
    itemTitle?: StringFieldUpdateOperationsInput | string
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumDistributionStatusFieldUpdateOperationsInput | $Enums.DistributionStatus
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationCreateInput = {
    score: number
    reason: $Enums.RecommendationReason
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRecommendationsInput
    item: ItemCreateNestedOneWithoutRecommendationsInput
  }

  export type RecommendationUncheckedCreateInput = {
    id?: number
    userId: number
    itemId: number
    score: number
    reason: $Enums.RecommendationReason
    createdAt?: Date | string
  }

  export type RecommendationUpdateInput = {
    score?: FloatFieldUpdateOperationsInput | number
    reason?: EnumRecommendationReasonFieldUpdateOperationsInput | $Enums.RecommendationReason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRecommendationsNestedInput
    item?: ItemUpdateOneRequiredWithoutRecommendationsNestedInput
  }

  export type RecommendationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    reason?: EnumRecommendationReasonFieldUpdateOperationsInput | $Enums.RecommendationReason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationCreateManyInput = {
    id?: number
    userId: number
    itemId: number
    score: number
    reason: $Enums.RecommendationReason
    createdAt?: Date | string
  }

  export type RecommendationUpdateManyMutationInput = {
    score?: FloatFieldUpdateOperationsInput | number
    reason?: EnumRecommendationReasonFieldUpdateOperationsInput | $Enums.RecommendationReason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    reason?: EnumRecommendationReasonFieldUpdateOperationsInput | $Enums.RecommendationReason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicPreferenceCreateInput = {
    priority?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAcademicPreferencesInput
    academicData: AcademicDataCreateNestedOneWithoutAcademicPreferencesInput
  }

  export type AcademicPreferenceUncheckedCreateInput = {
    id?: number
    userId: number
    academicDataId: number
    priority?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicPreferenceUpdateInput = {
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAcademicPreferencesNestedInput
    academicData?: AcademicDataUpdateOneRequiredWithoutAcademicPreferencesNestedInput
  }

  export type AcademicPreferenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    academicDataId?: IntFieldUpdateOperationsInput | number
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicPreferenceCreateManyInput = {
    id?: number
    userId: number
    academicDataId: number
    priority?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicPreferenceUpdateManyMutationInput = {
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicPreferenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    academicDataId?: IntFieldUpdateOperationsInput | number
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ItemScalarRelationFilter = {
    is?: ItemWhereInput
    isNot?: ItemWhereInput
  }

  export type CartCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type CartAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type CartMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type CartMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type CartSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ItemListRelationFilter = {
    every?: ItemWhereInput
    some?: ItemWhereInput
    none?: ItemWhereInput
  }

  export type BarterRequestListRelationFilter = {
    every?: BarterRequestWhereInput
    some?: BarterRequestWhereInput
    none?: BarterRequestWhereInput
  }

  export type BarterNegotiationListRelationFilter = {
    every?: BarterNegotiationWhereInput
    some?: BarterNegotiationWhereInput
    none?: BarterNegotiationWhereInput
  }

  export type WishlistListRelationFilter = {
    every?: WishlistWhereInput
    some?: WishlistWhereInput
    none?: WishlistWhereInput
  }

  export type WtbRequestListRelationFilter = {
    every?: WtbRequestWhereInput
    some?: WtbRequestWhereInput
    none?: WtbRequestWhereInput
  }

  export type WtbResponseListRelationFilter = {
    every?: WtbResponseWhereInput
    some?: WtbResponseWhereInput
    none?: WtbResponseWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type DiscussionListRelationFilter = {
    every?: DiscussionWhereInput
    some?: DiscussionWhereInput
    none?: DiscussionWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type UserBadgeListRelationFilter = {
    every?: UserBadgeWhereInput
    some?: UserBadgeWhereInput
    none?: UserBadgeWhereInput
  }

  export type DonationRequestListRelationFilter = {
    every?: DonationRequestWhereInput
    some?: DonationRequestWhereInput
    none?: DonationRequestWhereInput
  }

  export type DonationDistributionListRelationFilter = {
    every?: DonationDistributionWhereInput
    some?: DonationDistributionWhereInput
    none?: DonationDistributionWhereInput
  }

  export type RecommendationListRelationFilter = {
    every?: RecommendationWhereInput
    some?: RecommendationWhereInput
    none?: RecommendationWhereInput
  }

  export type AcademicPreferenceListRelationFilter = {
    every?: AcademicPreferenceWhereInput
    some?: AcademicPreferenceWhereInput
    none?: AcademicPreferenceWhereInput
  }

  export type CartListRelationFilter = {
    every?: CartWhereInput
    some?: CartWhereInput
    none?: CartWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BarterRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BarterNegotiationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WishlistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WtbRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WtbResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DiscussionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserBadgeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DonationRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DonationDistributionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecommendationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AcademicPreferenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    studentId?: SortOrder
    university?: SortOrder
    faculty?: SortOrder
    major?: SortOrder
    phoneNumber?: SortOrder
    profileImage?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    resetPasswordToken?: SortOrder
    reputation?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    reputation?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    studentId?: SortOrder
    university?: SortOrder
    faculty?: SortOrder
    major?: SortOrder
    phoneNumber?: SortOrder
    profileImage?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    resetPasswordToken?: SortOrder
    reputation?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    studentId?: SortOrder
    university?: SortOrder
    faculty?: SortOrder
    major?: SortOrder
    phoneNumber?: SortOrder
    profileImage?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    resetPasswordToken?: SortOrder
    reputation?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    reputation?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumItemConditionFilter<$PrismaModel = never> = {
    equals?: $Enums.ItemCondition | EnumItemConditionFieldRefInput<$PrismaModel>
    in?: $Enums.ItemCondition[]
    notIn?: $Enums.ItemCondition[]
    not?: NestedEnumItemConditionFilter<$PrismaModel> | $Enums.ItemCondition
  }

  export type ItemImageListRelationFilter = {
    every?: ItemImageWhereInput
    some?: ItemImageWhereInput
    none?: ItemImageWhereInput
  }

  export type PriceHistoryListRelationFilter = {
    every?: PriceHistoryWhereInput
    some?: PriceHistoryWhereInput
    none?: PriceHistoryWhereInput
  }

  export type ItemImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PriceHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ItemOrderByRelevanceInput = {
    fields: ItemOrderByRelevanceFieldEnum | ItemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ItemCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    category?: SortOrder
    condition?: SortOrder
    conditionDetail?: SortOrder
    isDonation?: SortOrder
    isBundle?: SortOrder
    bundleItems?: SortOrder
    location?: SortOrder
    isAvailable?: SortOrder
    viewCount?: SortOrder
    favoriteCount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    price?: SortOrder
    viewCount?: SortOrder
    favoriteCount?: SortOrder
  }

  export type ItemMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    category?: SortOrder
    condition?: SortOrder
    conditionDetail?: SortOrder
    isDonation?: SortOrder
    isBundle?: SortOrder
    bundleItems?: SortOrder
    location?: SortOrder
    isAvailable?: SortOrder
    viewCount?: SortOrder
    favoriteCount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    category?: SortOrder
    condition?: SortOrder
    conditionDetail?: SortOrder
    isDonation?: SortOrder
    isBundle?: SortOrder
    bundleItems?: SortOrder
    location?: SortOrder
    isAvailable?: SortOrder
    viewCount?: SortOrder
    favoriteCount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    price?: SortOrder
    viewCount?: SortOrder
    favoriteCount?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumItemConditionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ItemCondition | EnumItemConditionFieldRefInput<$PrismaModel>
    in?: $Enums.ItemCondition[]
    notIn?: $Enums.ItemCondition[]
    not?: NestedEnumItemConditionWithAggregatesFilter<$PrismaModel> | $Enums.ItemCondition
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumItemConditionFilter<$PrismaModel>
    _max?: NestedEnumItemConditionFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AcademicDataOrderByRelevanceInput = {
    fields: AcademicDataOrderByRelevanceFieldEnum | AcademicDataOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AcademicDataCountOrderByAggregateInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseName?: SortOrder
    lecturerName?: SortOrder
    faculty?: SortOrder
    semester?: SortOrder
    credits?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AcademicDataAvgOrderByAggregateInput = {
    id?: SortOrder
    semester?: SortOrder
    credits?: SortOrder
  }

  export type AcademicDataMaxOrderByAggregateInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseName?: SortOrder
    lecturerName?: SortOrder
    faculty?: SortOrder
    semester?: SortOrder
    credits?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AcademicDataMinOrderByAggregateInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseName?: SortOrder
    lecturerName?: SortOrder
    faculty?: SortOrder
    semester?: SortOrder
    credits?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AcademicDataSumOrderByAggregateInput = {
    id?: SortOrder
    semester?: SortOrder
    credits?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumTransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[]
    notIn?: $Enums.TransactionStatus[]
    not?: NestedEnumTransactionStatusFilter<$PrismaModel> | $Enums.TransactionStatus
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type TransactionOrderByRelevanceInput = {
    fields: TransactionOrderByRelevanceFieldEnum | TransactionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
    sellerId?: SortOrder
    itemId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    codLocation?: SortOrder
    notes?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
    sellerId?: SortOrder
    itemId?: SortOrder
    amount?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
    sellerId?: SortOrder
    itemId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    codLocation?: SortOrder
    notes?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
    sellerId?: SortOrder
    itemId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    codLocation?: SortOrder
    notes?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    id?: SortOrder
    buyerId?: SortOrder
    sellerId?: SortOrder
    itemId?: SortOrder
    amount?: SortOrder
  }

  export type EnumTransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[]
    notIn?: $Enums.TransactionStatus[]
    not?: NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransactionStatusFilter<$PrismaModel>
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type EnumBarterStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BarterStatus | EnumBarterStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BarterStatus[]
    notIn?: $Enums.BarterStatus[]
    not?: NestedEnumBarterStatusFilter<$PrismaModel> | $Enums.BarterStatus
  }

  export type BarterRequestOrderByRelevanceInput = {
    fields: BarterRequestOrderByRelevanceFieldEnum | BarterRequestOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BarterRequestCountOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    itemOwnerId?: SortOrder
    requestedItemId?: SortOrder
    offeredItemIds?: SortOrder
    message?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BarterRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    itemOwnerId?: SortOrder
    requestedItemId?: SortOrder
  }

  export type BarterRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    itemOwnerId?: SortOrder
    requestedItemId?: SortOrder
    offeredItemIds?: SortOrder
    message?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BarterRequestMinOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    itemOwnerId?: SortOrder
    requestedItemId?: SortOrder
    offeredItemIds?: SortOrder
    message?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BarterRequestSumOrderByAggregateInput = {
    id?: SortOrder
    requesterId?: SortOrder
    itemOwnerId?: SortOrder
    requestedItemId?: SortOrder
  }

  export type EnumBarterStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BarterStatus | EnumBarterStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BarterStatus[]
    notIn?: $Enums.BarterStatus[]
    not?: NestedEnumBarterStatusWithAggregatesFilter<$PrismaModel> | $Enums.BarterStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBarterStatusFilter<$PrismaModel>
    _max?: NestedEnumBarterStatusFilter<$PrismaModel>
  }

  export type BarterRequestScalarRelationFilter = {
    is?: BarterRequestWhereInput
    isNot?: BarterRequestWhereInput
  }

  export type BarterNegotiationOrderByRelevanceInput = {
    fields: BarterNegotiationOrderByRelevanceFieldEnum | BarterNegotiationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BarterNegotiationCountOrderByAggregateInput = {
    id?: SortOrder
    barterRequestId?: SortOrder
    senderId?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type BarterNegotiationAvgOrderByAggregateInput = {
    id?: SortOrder
    barterRequestId?: SortOrder
    senderId?: SortOrder
  }

  export type BarterNegotiationMaxOrderByAggregateInput = {
    id?: SortOrder
    barterRequestId?: SortOrder
    senderId?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type BarterNegotiationMinOrderByAggregateInput = {
    id?: SortOrder
    barterRequestId?: SortOrder
    senderId?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type BarterNegotiationSumOrderByAggregateInput = {
    id?: SortOrder
    barterRequestId?: SortOrder
    senderId?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type EnumWtbUrgencyFilter<$PrismaModel = never> = {
    equals?: $Enums.WtbUrgency | EnumWtbUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.WtbUrgency[]
    notIn?: $Enums.WtbUrgency[]
    not?: NestedEnumWtbUrgencyFilter<$PrismaModel> | $Enums.WtbUrgency
  }

  export type WtbRequestOrderByRelevanceInput = {
    fields: WtbRequestOrderByRelevanceFieldEnum | WtbRequestOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WtbRequestCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    maxPrice?: SortOrder
    category?: SortOrder
    preferredCondition?: SortOrder
    location?: SortOrder
    urgency?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WtbRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    maxPrice?: SortOrder
  }

  export type WtbRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    maxPrice?: SortOrder
    category?: SortOrder
    preferredCondition?: SortOrder
    location?: SortOrder
    urgency?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WtbRequestMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    maxPrice?: SortOrder
    category?: SortOrder
    preferredCondition?: SortOrder
    location?: SortOrder
    urgency?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WtbRequestSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    maxPrice?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumWtbUrgencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WtbUrgency | EnumWtbUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.WtbUrgency[]
    notIn?: $Enums.WtbUrgency[]
    not?: NestedEnumWtbUrgencyWithAggregatesFilter<$PrismaModel> | $Enums.WtbUrgency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWtbUrgencyFilter<$PrismaModel>
    _max?: NestedEnumWtbUrgencyFilter<$PrismaModel>
  }

  export type WtbRequestScalarRelationFilter = {
    is?: WtbRequestWhereInput
    isNot?: WtbRequestWhereInput
  }

  export type WtbResponseOrderByRelevanceInput = {
    fields: WtbResponseOrderByRelevanceFieldEnum | WtbResponseOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WtbResponseCountOrderByAggregateInput = {
    id?: SortOrder
    wtbRequestId?: SortOrder
    responderId?: SortOrder
    message?: SortOrder
    offeredPrice?: SortOrder
    itemImages?: SortOrder
    contactInfo?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type WtbResponseAvgOrderByAggregateInput = {
    id?: SortOrder
    wtbRequestId?: SortOrder
    responderId?: SortOrder
    offeredPrice?: SortOrder
  }

  export type WtbResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    wtbRequestId?: SortOrder
    responderId?: SortOrder
    message?: SortOrder
    offeredPrice?: SortOrder
    itemImages?: SortOrder
    contactInfo?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type WtbResponseMinOrderByAggregateInput = {
    id?: SortOrder
    wtbRequestId?: SortOrder
    responderId?: SortOrder
    message?: SortOrder
    offeredPrice?: SortOrder
    itemImages?: SortOrder
    contactInfo?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type WtbResponseSumOrderByAggregateInput = {
    id?: SortOrder
    wtbRequestId?: SortOrder
    responderId?: SortOrder
    offeredPrice?: SortOrder
  }

  export type WishlistUserIdItemIdCompoundUniqueInput = {
    userId: number
    itemId: number
  }

  export type WishlistCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    createdAt?: SortOrder
  }

  export type WishlistAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
  }

  export type WishlistMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    createdAt?: SortOrder
  }

  export type WishlistMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    createdAt?: SortOrder
  }

  export type WishlistSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
  }

  export type AcademicDataNullableScalarRelationFilter = {
    is?: AcademicDataWhereInput | null
    isNot?: AcademicDataWhereInput | null
  }

  export type DiscussionOrderByRelevanceInput = {
    fields: DiscussionOrderByRelevanceFieldEnum | DiscussionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DiscussionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    academicDataId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    isPinned?: SortOrder
    isLocked?: SortOrder
    viewCount?: SortOrder
    replyCount?: SortOrder
    lastReplyAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiscussionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    academicDataId?: SortOrder
    viewCount?: SortOrder
    replyCount?: SortOrder
  }

  export type DiscussionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    academicDataId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    isPinned?: SortOrder
    isLocked?: SortOrder
    viewCount?: SortOrder
    replyCount?: SortOrder
    lastReplyAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiscussionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    academicDataId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    isPinned?: SortOrder
    isLocked?: SortOrder
    viewCount?: SortOrder
    replyCount?: SortOrder
    lastReplyAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiscussionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    academicDataId?: SortOrder
    viewCount?: SortOrder
    replyCount?: SortOrder
  }

  export type DiscussionScalarRelationFilter = {
    is?: DiscussionWhereInput
    isNot?: DiscussionWhereInput
  }

  export type CommentNullableScalarRelationFilter = {
    is?: CommentWhereInput | null
    isNot?: CommentWhereInput | null
  }

  export type CommentOrderByRelevanceInput = {
    fields: CommentOrderByRelevanceFieldEnum | CommentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    discussionId?: SortOrder
    userId?: SortOrder
    parentId?: SortOrder
    content?: SortOrder
    isEdited?: SortOrder
    editedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    discussionId?: SortOrder
    userId?: SortOrder
    parentId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    discussionId?: SortOrder
    userId?: SortOrder
    parentId?: SortOrder
    content?: SortOrder
    isEdited?: SortOrder
    editedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    discussionId?: SortOrder
    userId?: SortOrder
    parentId?: SortOrder
    content?: SortOrder
    isEdited?: SortOrder
    editedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    discussionId?: SortOrder
    userId?: SortOrder
    parentId?: SortOrder
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationOrderByRelevanceInput = {
    fields: NotificationOrderByRelevanceFieldEnum | NotificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    relatedId?: SortOrder
    relatedType?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    relatedId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    relatedId?: SortOrder
    relatedType?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    relatedId?: SortOrder
    relatedType?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    relatedId?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type PriceHistoryOrderByRelevanceInput = {
    fields: PriceHistoryOrderByRelevanceFieldEnum | PriceHistoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PriceHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    price?: SortOrder
    condition?: SortOrder
    category?: SortOrder
    recordedAt?: SortOrder
  }

  export type PriceHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    price?: SortOrder
  }

  export type PriceHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    price?: SortOrder
    condition?: SortOrder
    category?: SortOrder
    recordedAt?: SortOrder
  }

  export type PriceHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    price?: SortOrder
    condition?: SortOrder
    category?: SortOrder
    recordedAt?: SortOrder
  }

  export type PriceHistorySumOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    price?: SortOrder
  }

  export type ItemImageOrderByRelevanceInput = {
    fields: ItemImageOrderByRelevanceFieldEnum | ItemImageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ItemImageCountOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    imageUrl?: SortOrder
    isPrimary?: SortOrder
    caption?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type ItemImageAvgOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    sortOrder?: SortOrder
  }

  export type ItemImageMaxOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    imageUrl?: SortOrder
    isPrimary?: SortOrder
    caption?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type ItemImageMinOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    imageUrl?: SortOrder
    isPrimary?: SortOrder
    caption?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type ItemImageSumOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    sortOrder?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type CodLocationOrderByRelevanceInput = {
    fields: CodLocationOrderByRelevanceFieldEnum | CodLocationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CodLocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    faculty?: SortOrder
    building?: SortOrder
    floor?: SortOrder
    coordinates?: SortOrder
    imageUrl?: SortOrder
    safetyRating?: SortOrder
    accessibilityRating?: SortOrder
    popularityCount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CodLocationAvgOrderByAggregateInput = {
    id?: SortOrder
    safetyRating?: SortOrder
    accessibilityRating?: SortOrder
    popularityCount?: SortOrder
  }

  export type CodLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    faculty?: SortOrder
    building?: SortOrder
    floor?: SortOrder
    coordinates?: SortOrder
    imageUrl?: SortOrder
    safetyRating?: SortOrder
    accessibilityRating?: SortOrder
    popularityCount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CodLocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    faculty?: SortOrder
    building?: SortOrder
    floor?: SortOrder
    coordinates?: SortOrder
    imageUrl?: SortOrder
    safetyRating?: SortOrder
    accessibilityRating?: SortOrder
    popularityCount?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CodLocationSumOrderByAggregateInput = {
    id?: SortOrder
    safetyRating?: SortOrder
    accessibilityRating?: SortOrder
    popularityCount?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumBadgeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeType | EnumBadgeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeType[]
    notIn?: $Enums.BadgeType[]
    not?: NestedEnumBadgeTypeFilter<$PrismaModel> | $Enums.BadgeType
  }

  export type UserBadgeOrderByRelevanceInput = {
    fields: UserBadgeOrderByRelevanceFieldEnum | UserBadgeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserBadgeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeType?: SortOrder
    title?: SortOrder
    description?: SortOrder
    iconUrl?: SortOrder
    earnedAt?: SortOrder
  }

  export type UserBadgeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserBadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeType?: SortOrder
    title?: SortOrder
    description?: SortOrder
    iconUrl?: SortOrder
    earnedAt?: SortOrder
  }

  export type UserBadgeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeType?: SortOrder
    title?: SortOrder
    description?: SortOrder
    iconUrl?: SortOrder
    earnedAt?: SortOrder
  }

  export type UserBadgeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumBadgeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeType | EnumBadgeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeType[]
    notIn?: $Enums.BadgeType[]
    not?: NestedEnumBadgeTypeWithAggregatesFilter<$PrismaModel> | $Enums.BadgeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBadgeTypeFilter<$PrismaModel>
    _max?: NestedEnumBadgeTypeFilter<$PrismaModel>
  }

  export type EnumDonationUrgencyFilter<$PrismaModel = never> = {
    equals?: $Enums.DonationUrgency | EnumDonationUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.DonationUrgency[]
    notIn?: $Enums.DonationUrgency[]
    not?: NestedEnumDonationUrgencyFilter<$PrismaModel> | $Enums.DonationUrgency
  }

  export type EnumDonationRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DonationRequestStatus | EnumDonationRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DonationRequestStatus[]
    notIn?: $Enums.DonationRequestStatus[]
    not?: NestedEnumDonationRequestStatusFilter<$PrismaModel> | $Enums.DonationRequestStatus
  }

  export type DonationRequestOrderByRelevanceInput = {
    fields: DonationRequestOrderByRelevanceFieldEnum | DonationRequestOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DonationRequestCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    urgency?: SortOrder
    status?: SortOrder
    maxQuantity?: SortOrder
    receivedCount?: SortOrder
    location?: SortOrder
    contactInfo?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DonationRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    maxQuantity?: SortOrder
    receivedCount?: SortOrder
  }

  export type DonationRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    urgency?: SortOrder
    status?: SortOrder
    maxQuantity?: SortOrder
    receivedCount?: SortOrder
    location?: SortOrder
    contactInfo?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DonationRequestMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    urgency?: SortOrder
    status?: SortOrder
    maxQuantity?: SortOrder
    receivedCount?: SortOrder
    location?: SortOrder
    contactInfo?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DonationRequestSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    maxQuantity?: SortOrder
    receivedCount?: SortOrder
  }

  export type EnumDonationUrgencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DonationUrgency | EnumDonationUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.DonationUrgency[]
    notIn?: $Enums.DonationUrgency[]
    not?: NestedEnumDonationUrgencyWithAggregatesFilter<$PrismaModel> | $Enums.DonationUrgency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDonationUrgencyFilter<$PrismaModel>
    _max?: NestedEnumDonationUrgencyFilter<$PrismaModel>
  }

  export type EnumDonationRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DonationRequestStatus | EnumDonationRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DonationRequestStatus[]
    notIn?: $Enums.DonationRequestStatus[]
    not?: NestedEnumDonationRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.DonationRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDonationRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumDonationRequestStatusFilter<$PrismaModel>
  }

  export type EnumDistributionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DistributionStatus | EnumDistributionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DistributionStatus[]
    notIn?: $Enums.DistributionStatus[]
    not?: NestedEnumDistributionStatusFilter<$PrismaModel> | $Enums.DistributionStatus
  }

  export type DonationRequestNullableScalarRelationFilter = {
    is?: DonationRequestWhereInput | null
    isNot?: DonationRequestWhereInput | null
  }

  export type DonationDistributionOrderByRelevanceInput = {
    fields: DonationDistributionOrderByRelevanceFieldEnum | DonationDistributionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DonationDistributionCountOrderByAggregateInput = {
    id?: SortOrder
    donationRequestId?: SortOrder
    donorId?: SortOrder
    recipientId?: SortOrder
    itemTitle?: SortOrder
    itemDescription?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    distributedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DonationDistributionAvgOrderByAggregateInput = {
    id?: SortOrder
    donationRequestId?: SortOrder
    donorId?: SortOrder
    recipientId?: SortOrder
    quantity?: SortOrder
  }

  export type DonationDistributionMaxOrderByAggregateInput = {
    id?: SortOrder
    donationRequestId?: SortOrder
    donorId?: SortOrder
    recipientId?: SortOrder
    itemTitle?: SortOrder
    itemDescription?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    distributedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DonationDistributionMinOrderByAggregateInput = {
    id?: SortOrder
    donationRequestId?: SortOrder
    donorId?: SortOrder
    recipientId?: SortOrder
    itemTitle?: SortOrder
    itemDescription?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    distributedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DonationDistributionSumOrderByAggregateInput = {
    id?: SortOrder
    donationRequestId?: SortOrder
    donorId?: SortOrder
    recipientId?: SortOrder
    quantity?: SortOrder
  }

  export type EnumDistributionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DistributionStatus | EnumDistributionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DistributionStatus[]
    notIn?: $Enums.DistributionStatus[]
    not?: NestedEnumDistributionStatusWithAggregatesFilter<$PrismaModel> | $Enums.DistributionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDistributionStatusFilter<$PrismaModel>
    _max?: NestedEnumDistributionStatusFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumRecommendationReasonFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationReason | EnumRecommendationReasonFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationReason[]
    notIn?: $Enums.RecommendationReason[]
    not?: NestedEnumRecommendationReasonFilter<$PrismaModel> | $Enums.RecommendationReason
  }

  export type RecommendationUserIdItemIdCompoundUniqueInput = {
    userId: number
    itemId: number
  }

  export type RecommendationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    score?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type RecommendationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    score?: SortOrder
  }

  export type RecommendationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    score?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type RecommendationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    score?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type RecommendationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    itemId?: SortOrder
    score?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumRecommendationReasonWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationReason | EnumRecommendationReasonFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationReason[]
    notIn?: $Enums.RecommendationReason[]
    not?: NestedEnumRecommendationReasonWithAggregatesFilter<$PrismaModel> | $Enums.RecommendationReason
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRecommendationReasonFilter<$PrismaModel>
    _max?: NestedEnumRecommendationReasonFilter<$PrismaModel>
  }

  export type AcademicDataScalarRelationFilter = {
    is?: AcademicDataWhereInput
    isNot?: AcademicDataWhereInput
  }

  export type AcademicPreferenceUserIdAcademicDataIdCompoundUniqueInput = {
    userId: number
    academicDataId: number
  }

  export type AcademicPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    academicDataId?: SortOrder
    priority?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AcademicPreferenceAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    academicDataId?: SortOrder
    priority?: SortOrder
  }

  export type AcademicPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    academicDataId?: SortOrder
    priority?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AcademicPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    academicDataId?: SortOrder
    priority?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AcademicPreferenceSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    academicDataId?: SortOrder
    priority?: SortOrder
  }

  export type UserCreateNestedOneWithoutCartsInput = {
    create?: XOR<UserCreateWithoutCartsInput, UserUncheckedCreateWithoutCartsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCartsInput
    connect?: UserWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutCartsInput = {
    create?: XOR<ItemCreateWithoutCartsInput, ItemUncheckedCreateWithoutCartsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutCartsInput
    connect?: ItemWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutCartsNestedInput = {
    create?: XOR<UserCreateWithoutCartsInput, UserUncheckedCreateWithoutCartsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCartsInput
    upsert?: UserUpsertWithoutCartsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCartsInput, UserUpdateWithoutCartsInput>, UserUncheckedUpdateWithoutCartsInput>
  }

  export type ItemUpdateOneRequiredWithoutCartsNestedInput = {
    create?: XOR<ItemCreateWithoutCartsInput, ItemUncheckedCreateWithoutCartsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutCartsInput
    upsert?: ItemUpsertWithoutCartsInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutCartsInput, ItemUpdateWithoutCartsInput>, ItemUncheckedUpdateWithoutCartsInput>
  }

  export type ItemCreateNestedManyWithoutUserInput = {
    create?: XOR<ItemCreateWithoutUserInput, ItemUncheckedCreateWithoutUserInput> | ItemCreateWithoutUserInput[] | ItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutUserInput | ItemCreateOrConnectWithoutUserInput[]
    createMany?: ItemCreateManyUserInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type BarterRequestCreateNestedManyWithoutRequesterInput = {
    create?: XOR<BarterRequestCreateWithoutRequesterInput, BarterRequestUncheckedCreateWithoutRequesterInput> | BarterRequestCreateWithoutRequesterInput[] | BarterRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: BarterRequestCreateOrConnectWithoutRequesterInput | BarterRequestCreateOrConnectWithoutRequesterInput[]
    createMany?: BarterRequestCreateManyRequesterInputEnvelope
    connect?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
  }

  export type BarterNegotiationCreateNestedManyWithoutSenderInput = {
    create?: XOR<BarterNegotiationCreateWithoutSenderInput, BarterNegotiationUncheckedCreateWithoutSenderInput> | BarterNegotiationCreateWithoutSenderInput[] | BarterNegotiationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: BarterNegotiationCreateOrConnectWithoutSenderInput | BarterNegotiationCreateOrConnectWithoutSenderInput[]
    createMany?: BarterNegotiationCreateManySenderInputEnvelope
    connect?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
  }

  export type WishlistCreateNestedManyWithoutUserInput = {
    create?: XOR<WishlistCreateWithoutUserInput, WishlistUncheckedCreateWithoutUserInput> | WishlistCreateWithoutUserInput[] | WishlistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutUserInput | WishlistCreateOrConnectWithoutUserInput[]
    createMany?: WishlistCreateManyUserInputEnvelope
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
  }

  export type WtbRequestCreateNestedManyWithoutUserInput = {
    create?: XOR<WtbRequestCreateWithoutUserInput, WtbRequestUncheckedCreateWithoutUserInput> | WtbRequestCreateWithoutUserInput[] | WtbRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WtbRequestCreateOrConnectWithoutUserInput | WtbRequestCreateOrConnectWithoutUserInput[]
    createMany?: WtbRequestCreateManyUserInputEnvelope
    connect?: WtbRequestWhereUniqueInput | WtbRequestWhereUniqueInput[]
  }

  export type WtbResponseCreateNestedManyWithoutResponderInput = {
    create?: XOR<WtbResponseCreateWithoutResponderInput, WtbResponseUncheckedCreateWithoutResponderInput> | WtbResponseCreateWithoutResponderInput[] | WtbResponseUncheckedCreateWithoutResponderInput[]
    connectOrCreate?: WtbResponseCreateOrConnectWithoutResponderInput | WtbResponseCreateOrConnectWithoutResponderInput[]
    createMany?: WtbResponseCreateManyResponderInputEnvelope
    connect?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutBuyerInput = {
    create?: XOR<TransactionCreateWithoutBuyerInput, TransactionUncheckedCreateWithoutBuyerInput> | TransactionCreateWithoutBuyerInput[] | TransactionUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutBuyerInput | TransactionCreateOrConnectWithoutBuyerInput[]
    createMany?: TransactionCreateManyBuyerInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutSellerInput = {
    create?: XOR<TransactionCreateWithoutSellerInput, TransactionUncheckedCreateWithoutSellerInput> | TransactionCreateWithoutSellerInput[] | TransactionUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutSellerInput | TransactionCreateOrConnectWithoutSellerInput[]
    createMany?: TransactionCreateManySellerInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type DiscussionCreateNestedManyWithoutUserInput = {
    create?: XOR<DiscussionCreateWithoutUserInput, DiscussionUncheckedCreateWithoutUserInput> | DiscussionCreateWithoutUserInput[] | DiscussionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionCreateOrConnectWithoutUserInput | DiscussionCreateOrConnectWithoutUserInput[]
    createMany?: DiscussionCreateManyUserInputEnvelope
    connect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserBadgeCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type DonationRequestCreateNestedManyWithoutUserInput = {
    create?: XOR<DonationRequestCreateWithoutUserInput, DonationRequestUncheckedCreateWithoutUserInput> | DonationRequestCreateWithoutUserInput[] | DonationRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DonationRequestCreateOrConnectWithoutUserInput | DonationRequestCreateOrConnectWithoutUserInput[]
    createMany?: DonationRequestCreateManyUserInputEnvelope
    connect?: DonationRequestWhereUniqueInput | DonationRequestWhereUniqueInput[]
  }

  export type DonationDistributionCreateNestedManyWithoutDonorInput = {
    create?: XOR<DonationDistributionCreateWithoutDonorInput, DonationDistributionUncheckedCreateWithoutDonorInput> | DonationDistributionCreateWithoutDonorInput[] | DonationDistributionUncheckedCreateWithoutDonorInput[]
    connectOrCreate?: DonationDistributionCreateOrConnectWithoutDonorInput | DonationDistributionCreateOrConnectWithoutDonorInput[]
    createMany?: DonationDistributionCreateManyDonorInputEnvelope
    connect?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
  }

  export type RecommendationCreateNestedManyWithoutUserInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type AcademicPreferenceCreateNestedManyWithoutUserInput = {
    create?: XOR<AcademicPreferenceCreateWithoutUserInput, AcademicPreferenceUncheckedCreateWithoutUserInput> | AcademicPreferenceCreateWithoutUserInput[] | AcademicPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AcademicPreferenceCreateOrConnectWithoutUserInput | AcademicPreferenceCreateOrConnectWithoutUserInput[]
    createMany?: AcademicPreferenceCreateManyUserInputEnvelope
    connect?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
  }

  export type CartCreateNestedManyWithoutUserInput = {
    create?: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput> | CartCreateWithoutUserInput[] | CartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CartCreateOrConnectWithoutUserInput | CartCreateOrConnectWithoutUserInput[]
    createMany?: CartCreateManyUserInputEnvelope
    connect?: CartWhereUniqueInput | CartWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ItemCreateWithoutUserInput, ItemUncheckedCreateWithoutUserInput> | ItemCreateWithoutUserInput[] | ItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutUserInput | ItemCreateOrConnectWithoutUserInput[]
    createMany?: ItemCreateManyUserInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type BarterRequestUncheckedCreateNestedManyWithoutRequesterInput = {
    create?: XOR<BarterRequestCreateWithoutRequesterInput, BarterRequestUncheckedCreateWithoutRequesterInput> | BarterRequestCreateWithoutRequesterInput[] | BarterRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: BarterRequestCreateOrConnectWithoutRequesterInput | BarterRequestCreateOrConnectWithoutRequesterInput[]
    createMany?: BarterRequestCreateManyRequesterInputEnvelope
    connect?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
  }

  export type BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<BarterNegotiationCreateWithoutSenderInput, BarterNegotiationUncheckedCreateWithoutSenderInput> | BarterNegotiationCreateWithoutSenderInput[] | BarterNegotiationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: BarterNegotiationCreateOrConnectWithoutSenderInput | BarterNegotiationCreateOrConnectWithoutSenderInput[]
    createMany?: BarterNegotiationCreateManySenderInputEnvelope
    connect?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
  }

  export type WishlistUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WishlistCreateWithoutUserInput, WishlistUncheckedCreateWithoutUserInput> | WishlistCreateWithoutUserInput[] | WishlistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutUserInput | WishlistCreateOrConnectWithoutUserInput[]
    createMany?: WishlistCreateManyUserInputEnvelope
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
  }

  export type WtbRequestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WtbRequestCreateWithoutUserInput, WtbRequestUncheckedCreateWithoutUserInput> | WtbRequestCreateWithoutUserInput[] | WtbRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WtbRequestCreateOrConnectWithoutUserInput | WtbRequestCreateOrConnectWithoutUserInput[]
    createMany?: WtbRequestCreateManyUserInputEnvelope
    connect?: WtbRequestWhereUniqueInput | WtbRequestWhereUniqueInput[]
  }

  export type WtbResponseUncheckedCreateNestedManyWithoutResponderInput = {
    create?: XOR<WtbResponseCreateWithoutResponderInput, WtbResponseUncheckedCreateWithoutResponderInput> | WtbResponseCreateWithoutResponderInput[] | WtbResponseUncheckedCreateWithoutResponderInput[]
    connectOrCreate?: WtbResponseCreateOrConnectWithoutResponderInput | WtbResponseCreateOrConnectWithoutResponderInput[]
    createMany?: WtbResponseCreateManyResponderInputEnvelope
    connect?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<TransactionCreateWithoutBuyerInput, TransactionUncheckedCreateWithoutBuyerInput> | TransactionCreateWithoutBuyerInput[] | TransactionUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutBuyerInput | TransactionCreateOrConnectWithoutBuyerInput[]
    createMany?: TransactionCreateManyBuyerInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutSellerInput = {
    create?: XOR<TransactionCreateWithoutSellerInput, TransactionUncheckedCreateWithoutSellerInput> | TransactionCreateWithoutSellerInput[] | TransactionUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutSellerInput | TransactionCreateOrConnectWithoutSellerInput[]
    createMany?: TransactionCreateManySellerInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type DiscussionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DiscussionCreateWithoutUserInput, DiscussionUncheckedCreateWithoutUserInput> | DiscussionCreateWithoutUserInput[] | DiscussionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionCreateOrConnectWithoutUserInput | DiscussionCreateOrConnectWithoutUserInput[]
    createMany?: DiscussionCreateManyUserInputEnvelope
    connect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserBadgeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type DonationRequestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DonationRequestCreateWithoutUserInput, DonationRequestUncheckedCreateWithoutUserInput> | DonationRequestCreateWithoutUserInput[] | DonationRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DonationRequestCreateOrConnectWithoutUserInput | DonationRequestCreateOrConnectWithoutUserInput[]
    createMany?: DonationRequestCreateManyUserInputEnvelope
    connect?: DonationRequestWhereUniqueInput | DonationRequestWhereUniqueInput[]
  }

  export type DonationDistributionUncheckedCreateNestedManyWithoutDonorInput = {
    create?: XOR<DonationDistributionCreateWithoutDonorInput, DonationDistributionUncheckedCreateWithoutDonorInput> | DonationDistributionCreateWithoutDonorInput[] | DonationDistributionUncheckedCreateWithoutDonorInput[]
    connectOrCreate?: DonationDistributionCreateOrConnectWithoutDonorInput | DonationDistributionCreateOrConnectWithoutDonorInput[]
    createMany?: DonationDistributionCreateManyDonorInputEnvelope
    connect?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
  }

  export type RecommendationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AcademicPreferenceCreateWithoutUserInput, AcademicPreferenceUncheckedCreateWithoutUserInput> | AcademicPreferenceCreateWithoutUserInput[] | AcademicPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AcademicPreferenceCreateOrConnectWithoutUserInput | AcademicPreferenceCreateOrConnectWithoutUserInput[]
    createMany?: AcademicPreferenceCreateManyUserInputEnvelope
    connect?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
  }

  export type CartUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput> | CartCreateWithoutUserInput[] | CartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CartCreateOrConnectWithoutUserInput | CartCreateOrConnectWithoutUserInput[]
    createMany?: CartCreateManyUserInputEnvelope
    connect?: CartWhereUniqueInput | CartWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ItemUpdateManyWithoutUserNestedInput = {
    create?: XOR<ItemCreateWithoutUserInput, ItemUncheckedCreateWithoutUserInput> | ItemCreateWithoutUserInput[] | ItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutUserInput | ItemCreateOrConnectWithoutUserInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutUserInput | ItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ItemCreateManyUserInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutUserInput | ItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutUserInput | ItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type BarterRequestUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<BarterRequestCreateWithoutRequesterInput, BarterRequestUncheckedCreateWithoutRequesterInput> | BarterRequestCreateWithoutRequesterInput[] | BarterRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: BarterRequestCreateOrConnectWithoutRequesterInput | BarterRequestCreateOrConnectWithoutRequesterInput[]
    upsert?: BarterRequestUpsertWithWhereUniqueWithoutRequesterInput | BarterRequestUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: BarterRequestCreateManyRequesterInputEnvelope
    set?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    disconnect?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    delete?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    connect?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    update?: BarterRequestUpdateWithWhereUniqueWithoutRequesterInput | BarterRequestUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: BarterRequestUpdateManyWithWhereWithoutRequesterInput | BarterRequestUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: BarterRequestScalarWhereInput | BarterRequestScalarWhereInput[]
  }

  export type BarterNegotiationUpdateManyWithoutSenderNestedInput = {
    create?: XOR<BarterNegotiationCreateWithoutSenderInput, BarterNegotiationUncheckedCreateWithoutSenderInput> | BarterNegotiationCreateWithoutSenderInput[] | BarterNegotiationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: BarterNegotiationCreateOrConnectWithoutSenderInput | BarterNegotiationCreateOrConnectWithoutSenderInput[]
    upsert?: BarterNegotiationUpsertWithWhereUniqueWithoutSenderInput | BarterNegotiationUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: BarterNegotiationCreateManySenderInputEnvelope
    set?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    disconnect?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    delete?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    connect?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    update?: BarterNegotiationUpdateWithWhereUniqueWithoutSenderInput | BarterNegotiationUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: BarterNegotiationUpdateManyWithWhereWithoutSenderInput | BarterNegotiationUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: BarterNegotiationScalarWhereInput | BarterNegotiationScalarWhereInput[]
  }

  export type WishlistUpdateManyWithoutUserNestedInput = {
    create?: XOR<WishlistCreateWithoutUserInput, WishlistUncheckedCreateWithoutUserInput> | WishlistCreateWithoutUserInput[] | WishlistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutUserInput | WishlistCreateOrConnectWithoutUserInput[]
    upsert?: WishlistUpsertWithWhereUniqueWithoutUserInput | WishlistUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WishlistCreateManyUserInputEnvelope
    set?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    disconnect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    delete?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    update?: WishlistUpdateWithWhereUniqueWithoutUserInput | WishlistUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WishlistUpdateManyWithWhereWithoutUserInput | WishlistUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
  }

  export type WtbRequestUpdateManyWithoutUserNestedInput = {
    create?: XOR<WtbRequestCreateWithoutUserInput, WtbRequestUncheckedCreateWithoutUserInput> | WtbRequestCreateWithoutUserInput[] | WtbRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WtbRequestCreateOrConnectWithoutUserInput | WtbRequestCreateOrConnectWithoutUserInput[]
    upsert?: WtbRequestUpsertWithWhereUniqueWithoutUserInput | WtbRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WtbRequestCreateManyUserInputEnvelope
    set?: WtbRequestWhereUniqueInput | WtbRequestWhereUniqueInput[]
    disconnect?: WtbRequestWhereUniqueInput | WtbRequestWhereUniqueInput[]
    delete?: WtbRequestWhereUniqueInput | WtbRequestWhereUniqueInput[]
    connect?: WtbRequestWhereUniqueInput | WtbRequestWhereUniqueInput[]
    update?: WtbRequestUpdateWithWhereUniqueWithoutUserInput | WtbRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WtbRequestUpdateManyWithWhereWithoutUserInput | WtbRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WtbRequestScalarWhereInput | WtbRequestScalarWhereInput[]
  }

  export type WtbResponseUpdateManyWithoutResponderNestedInput = {
    create?: XOR<WtbResponseCreateWithoutResponderInput, WtbResponseUncheckedCreateWithoutResponderInput> | WtbResponseCreateWithoutResponderInput[] | WtbResponseUncheckedCreateWithoutResponderInput[]
    connectOrCreate?: WtbResponseCreateOrConnectWithoutResponderInput | WtbResponseCreateOrConnectWithoutResponderInput[]
    upsert?: WtbResponseUpsertWithWhereUniqueWithoutResponderInput | WtbResponseUpsertWithWhereUniqueWithoutResponderInput[]
    createMany?: WtbResponseCreateManyResponderInputEnvelope
    set?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    disconnect?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    delete?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    connect?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    update?: WtbResponseUpdateWithWhereUniqueWithoutResponderInput | WtbResponseUpdateWithWhereUniqueWithoutResponderInput[]
    updateMany?: WtbResponseUpdateManyWithWhereWithoutResponderInput | WtbResponseUpdateManyWithWhereWithoutResponderInput[]
    deleteMany?: WtbResponseScalarWhereInput | WtbResponseScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<TransactionCreateWithoutBuyerInput, TransactionUncheckedCreateWithoutBuyerInput> | TransactionCreateWithoutBuyerInput[] | TransactionUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutBuyerInput | TransactionCreateOrConnectWithoutBuyerInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutBuyerInput | TransactionUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: TransactionCreateManyBuyerInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutBuyerInput | TransactionUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutBuyerInput | TransactionUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutSellerNestedInput = {
    create?: XOR<TransactionCreateWithoutSellerInput, TransactionUncheckedCreateWithoutSellerInput> | TransactionCreateWithoutSellerInput[] | TransactionUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutSellerInput | TransactionCreateOrConnectWithoutSellerInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutSellerInput | TransactionUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: TransactionCreateManySellerInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutSellerInput | TransactionUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutSellerInput | TransactionUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type DiscussionUpdateManyWithoutUserNestedInput = {
    create?: XOR<DiscussionCreateWithoutUserInput, DiscussionUncheckedCreateWithoutUserInput> | DiscussionCreateWithoutUserInput[] | DiscussionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionCreateOrConnectWithoutUserInput | DiscussionCreateOrConnectWithoutUserInput[]
    upsert?: DiscussionUpsertWithWhereUniqueWithoutUserInput | DiscussionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DiscussionCreateManyUserInputEnvelope
    set?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    disconnect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    delete?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    connect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    update?: DiscussionUpdateWithWhereUniqueWithoutUserInput | DiscussionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DiscussionUpdateManyWithWhereWithoutUserInput | DiscussionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DiscussionScalarWhereInput | DiscussionScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserBadgeUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutUserInput | UserBadgeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutUserInput | UserBadgeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutUserInput | UserBadgeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type DonationRequestUpdateManyWithoutUserNestedInput = {
    create?: XOR<DonationRequestCreateWithoutUserInput, DonationRequestUncheckedCreateWithoutUserInput> | DonationRequestCreateWithoutUserInput[] | DonationRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DonationRequestCreateOrConnectWithoutUserInput | DonationRequestCreateOrConnectWithoutUserInput[]
    upsert?: DonationRequestUpsertWithWhereUniqueWithoutUserInput | DonationRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DonationRequestCreateManyUserInputEnvelope
    set?: DonationRequestWhereUniqueInput | DonationRequestWhereUniqueInput[]
    disconnect?: DonationRequestWhereUniqueInput | DonationRequestWhereUniqueInput[]
    delete?: DonationRequestWhereUniqueInput | DonationRequestWhereUniqueInput[]
    connect?: DonationRequestWhereUniqueInput | DonationRequestWhereUniqueInput[]
    update?: DonationRequestUpdateWithWhereUniqueWithoutUserInput | DonationRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DonationRequestUpdateManyWithWhereWithoutUserInput | DonationRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DonationRequestScalarWhereInput | DonationRequestScalarWhereInput[]
  }

  export type DonationDistributionUpdateManyWithoutDonorNestedInput = {
    create?: XOR<DonationDistributionCreateWithoutDonorInput, DonationDistributionUncheckedCreateWithoutDonorInput> | DonationDistributionCreateWithoutDonorInput[] | DonationDistributionUncheckedCreateWithoutDonorInput[]
    connectOrCreate?: DonationDistributionCreateOrConnectWithoutDonorInput | DonationDistributionCreateOrConnectWithoutDonorInput[]
    upsert?: DonationDistributionUpsertWithWhereUniqueWithoutDonorInput | DonationDistributionUpsertWithWhereUniqueWithoutDonorInput[]
    createMany?: DonationDistributionCreateManyDonorInputEnvelope
    set?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    disconnect?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    delete?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    connect?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    update?: DonationDistributionUpdateWithWhereUniqueWithoutDonorInput | DonationDistributionUpdateWithWhereUniqueWithoutDonorInput[]
    updateMany?: DonationDistributionUpdateManyWithWhereWithoutDonorInput | DonationDistributionUpdateManyWithWhereWithoutDonorInput[]
    deleteMany?: DonationDistributionScalarWhereInput | DonationDistributionScalarWhereInput[]
  }

  export type RecommendationUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutUserInput | RecommendationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutUserInput | RecommendationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutUserInput | RecommendationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type AcademicPreferenceUpdateManyWithoutUserNestedInput = {
    create?: XOR<AcademicPreferenceCreateWithoutUserInput, AcademicPreferenceUncheckedCreateWithoutUserInput> | AcademicPreferenceCreateWithoutUserInput[] | AcademicPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AcademicPreferenceCreateOrConnectWithoutUserInput | AcademicPreferenceCreateOrConnectWithoutUserInput[]
    upsert?: AcademicPreferenceUpsertWithWhereUniqueWithoutUserInput | AcademicPreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AcademicPreferenceCreateManyUserInputEnvelope
    set?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    disconnect?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    delete?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    connect?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    update?: AcademicPreferenceUpdateWithWhereUniqueWithoutUserInput | AcademicPreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AcademicPreferenceUpdateManyWithWhereWithoutUserInput | AcademicPreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AcademicPreferenceScalarWhereInput | AcademicPreferenceScalarWhereInput[]
  }

  export type CartUpdateManyWithoutUserNestedInput = {
    create?: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput> | CartCreateWithoutUserInput[] | CartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CartCreateOrConnectWithoutUserInput | CartCreateOrConnectWithoutUserInput[]
    upsert?: CartUpsertWithWhereUniqueWithoutUserInput | CartUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CartCreateManyUserInputEnvelope
    set?: CartWhereUniqueInput | CartWhereUniqueInput[]
    disconnect?: CartWhereUniqueInput | CartWhereUniqueInput[]
    delete?: CartWhereUniqueInput | CartWhereUniqueInput[]
    connect?: CartWhereUniqueInput | CartWhereUniqueInput[]
    update?: CartUpdateWithWhereUniqueWithoutUserInput | CartUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CartUpdateManyWithWhereWithoutUserInput | CartUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CartScalarWhereInput | CartScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ItemCreateWithoutUserInput, ItemUncheckedCreateWithoutUserInput> | ItemCreateWithoutUserInput[] | ItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutUserInput | ItemCreateOrConnectWithoutUserInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutUserInput | ItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ItemCreateManyUserInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutUserInput | ItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutUserInput | ItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<BarterRequestCreateWithoutRequesterInput, BarterRequestUncheckedCreateWithoutRequesterInput> | BarterRequestCreateWithoutRequesterInput[] | BarterRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: BarterRequestCreateOrConnectWithoutRequesterInput | BarterRequestCreateOrConnectWithoutRequesterInput[]
    upsert?: BarterRequestUpsertWithWhereUniqueWithoutRequesterInput | BarterRequestUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: BarterRequestCreateManyRequesterInputEnvelope
    set?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    disconnect?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    delete?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    connect?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    update?: BarterRequestUpdateWithWhereUniqueWithoutRequesterInput | BarterRequestUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: BarterRequestUpdateManyWithWhereWithoutRequesterInput | BarterRequestUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: BarterRequestScalarWhereInput | BarterRequestScalarWhereInput[]
  }

  export type BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<BarterNegotiationCreateWithoutSenderInput, BarterNegotiationUncheckedCreateWithoutSenderInput> | BarterNegotiationCreateWithoutSenderInput[] | BarterNegotiationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: BarterNegotiationCreateOrConnectWithoutSenderInput | BarterNegotiationCreateOrConnectWithoutSenderInput[]
    upsert?: BarterNegotiationUpsertWithWhereUniqueWithoutSenderInput | BarterNegotiationUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: BarterNegotiationCreateManySenderInputEnvelope
    set?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    disconnect?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    delete?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    connect?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    update?: BarterNegotiationUpdateWithWhereUniqueWithoutSenderInput | BarterNegotiationUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: BarterNegotiationUpdateManyWithWhereWithoutSenderInput | BarterNegotiationUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: BarterNegotiationScalarWhereInput | BarterNegotiationScalarWhereInput[]
  }

  export type WishlistUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WishlistCreateWithoutUserInput, WishlistUncheckedCreateWithoutUserInput> | WishlistCreateWithoutUserInput[] | WishlistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutUserInput | WishlistCreateOrConnectWithoutUserInput[]
    upsert?: WishlistUpsertWithWhereUniqueWithoutUserInput | WishlistUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WishlistCreateManyUserInputEnvelope
    set?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    disconnect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    delete?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    update?: WishlistUpdateWithWhereUniqueWithoutUserInput | WishlistUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WishlistUpdateManyWithWhereWithoutUserInput | WishlistUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
  }

  export type WtbRequestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WtbRequestCreateWithoutUserInput, WtbRequestUncheckedCreateWithoutUserInput> | WtbRequestCreateWithoutUserInput[] | WtbRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WtbRequestCreateOrConnectWithoutUserInput | WtbRequestCreateOrConnectWithoutUserInput[]
    upsert?: WtbRequestUpsertWithWhereUniqueWithoutUserInput | WtbRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WtbRequestCreateManyUserInputEnvelope
    set?: WtbRequestWhereUniqueInput | WtbRequestWhereUniqueInput[]
    disconnect?: WtbRequestWhereUniqueInput | WtbRequestWhereUniqueInput[]
    delete?: WtbRequestWhereUniqueInput | WtbRequestWhereUniqueInput[]
    connect?: WtbRequestWhereUniqueInput | WtbRequestWhereUniqueInput[]
    update?: WtbRequestUpdateWithWhereUniqueWithoutUserInput | WtbRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WtbRequestUpdateManyWithWhereWithoutUserInput | WtbRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WtbRequestScalarWhereInput | WtbRequestScalarWhereInput[]
  }

  export type WtbResponseUncheckedUpdateManyWithoutResponderNestedInput = {
    create?: XOR<WtbResponseCreateWithoutResponderInput, WtbResponseUncheckedCreateWithoutResponderInput> | WtbResponseCreateWithoutResponderInput[] | WtbResponseUncheckedCreateWithoutResponderInput[]
    connectOrCreate?: WtbResponseCreateOrConnectWithoutResponderInput | WtbResponseCreateOrConnectWithoutResponderInput[]
    upsert?: WtbResponseUpsertWithWhereUniqueWithoutResponderInput | WtbResponseUpsertWithWhereUniqueWithoutResponderInput[]
    createMany?: WtbResponseCreateManyResponderInputEnvelope
    set?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    disconnect?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    delete?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    connect?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    update?: WtbResponseUpdateWithWhereUniqueWithoutResponderInput | WtbResponseUpdateWithWhereUniqueWithoutResponderInput[]
    updateMany?: WtbResponseUpdateManyWithWhereWithoutResponderInput | WtbResponseUpdateManyWithWhereWithoutResponderInput[]
    deleteMany?: WtbResponseScalarWhereInput | WtbResponseScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<TransactionCreateWithoutBuyerInput, TransactionUncheckedCreateWithoutBuyerInput> | TransactionCreateWithoutBuyerInput[] | TransactionUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutBuyerInput | TransactionCreateOrConnectWithoutBuyerInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutBuyerInput | TransactionUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: TransactionCreateManyBuyerInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutBuyerInput | TransactionUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutBuyerInput | TransactionUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutSellerNestedInput = {
    create?: XOR<TransactionCreateWithoutSellerInput, TransactionUncheckedCreateWithoutSellerInput> | TransactionCreateWithoutSellerInput[] | TransactionUncheckedCreateWithoutSellerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutSellerInput | TransactionCreateOrConnectWithoutSellerInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutSellerInput | TransactionUpsertWithWhereUniqueWithoutSellerInput[]
    createMany?: TransactionCreateManySellerInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutSellerInput | TransactionUpdateWithWhereUniqueWithoutSellerInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutSellerInput | TransactionUpdateManyWithWhereWithoutSellerInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type DiscussionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DiscussionCreateWithoutUserInput, DiscussionUncheckedCreateWithoutUserInput> | DiscussionCreateWithoutUserInput[] | DiscussionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionCreateOrConnectWithoutUserInput | DiscussionCreateOrConnectWithoutUserInput[]
    upsert?: DiscussionUpsertWithWhereUniqueWithoutUserInput | DiscussionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DiscussionCreateManyUserInputEnvelope
    set?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    disconnect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    delete?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    connect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    update?: DiscussionUpdateWithWhereUniqueWithoutUserInput | DiscussionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DiscussionUpdateManyWithWhereWithoutUserInput | DiscussionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DiscussionScalarWhereInput | DiscussionScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserBadgeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutUserInput | UserBadgeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutUserInput | UserBadgeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutUserInput | UserBadgeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type DonationRequestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DonationRequestCreateWithoutUserInput, DonationRequestUncheckedCreateWithoutUserInput> | DonationRequestCreateWithoutUserInput[] | DonationRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DonationRequestCreateOrConnectWithoutUserInput | DonationRequestCreateOrConnectWithoutUserInput[]
    upsert?: DonationRequestUpsertWithWhereUniqueWithoutUserInput | DonationRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DonationRequestCreateManyUserInputEnvelope
    set?: DonationRequestWhereUniqueInput | DonationRequestWhereUniqueInput[]
    disconnect?: DonationRequestWhereUniqueInput | DonationRequestWhereUniqueInput[]
    delete?: DonationRequestWhereUniqueInput | DonationRequestWhereUniqueInput[]
    connect?: DonationRequestWhereUniqueInput | DonationRequestWhereUniqueInput[]
    update?: DonationRequestUpdateWithWhereUniqueWithoutUserInput | DonationRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DonationRequestUpdateManyWithWhereWithoutUserInput | DonationRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DonationRequestScalarWhereInput | DonationRequestScalarWhereInput[]
  }

  export type DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput = {
    create?: XOR<DonationDistributionCreateWithoutDonorInput, DonationDistributionUncheckedCreateWithoutDonorInput> | DonationDistributionCreateWithoutDonorInput[] | DonationDistributionUncheckedCreateWithoutDonorInput[]
    connectOrCreate?: DonationDistributionCreateOrConnectWithoutDonorInput | DonationDistributionCreateOrConnectWithoutDonorInput[]
    upsert?: DonationDistributionUpsertWithWhereUniqueWithoutDonorInput | DonationDistributionUpsertWithWhereUniqueWithoutDonorInput[]
    createMany?: DonationDistributionCreateManyDonorInputEnvelope
    set?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    disconnect?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    delete?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    connect?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    update?: DonationDistributionUpdateWithWhereUniqueWithoutDonorInput | DonationDistributionUpdateWithWhereUniqueWithoutDonorInput[]
    updateMany?: DonationDistributionUpdateManyWithWhereWithoutDonorInput | DonationDistributionUpdateManyWithWhereWithoutDonorInput[]
    deleteMany?: DonationDistributionScalarWhereInput | DonationDistributionScalarWhereInput[]
  }

  export type RecommendationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutUserInput | RecommendationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutUserInput | RecommendationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutUserInput | RecommendationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AcademicPreferenceCreateWithoutUserInput, AcademicPreferenceUncheckedCreateWithoutUserInput> | AcademicPreferenceCreateWithoutUserInput[] | AcademicPreferenceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AcademicPreferenceCreateOrConnectWithoutUserInput | AcademicPreferenceCreateOrConnectWithoutUserInput[]
    upsert?: AcademicPreferenceUpsertWithWhereUniqueWithoutUserInput | AcademicPreferenceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AcademicPreferenceCreateManyUserInputEnvelope
    set?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    disconnect?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    delete?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    connect?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    update?: AcademicPreferenceUpdateWithWhereUniqueWithoutUserInput | AcademicPreferenceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AcademicPreferenceUpdateManyWithWhereWithoutUserInput | AcademicPreferenceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AcademicPreferenceScalarWhereInput | AcademicPreferenceScalarWhereInput[]
  }

  export type CartUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput> | CartCreateWithoutUserInput[] | CartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CartCreateOrConnectWithoutUserInput | CartCreateOrConnectWithoutUserInput[]
    upsert?: CartUpsertWithWhereUniqueWithoutUserInput | CartUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CartCreateManyUserInputEnvelope
    set?: CartWhereUniqueInput | CartWhereUniqueInput[]
    disconnect?: CartWhereUniqueInput | CartWhereUniqueInput[]
    delete?: CartWhereUniqueInput | CartWhereUniqueInput[]
    connect?: CartWhereUniqueInput | CartWhereUniqueInput[]
    update?: CartUpdateWithWhereUniqueWithoutUserInput | CartUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CartUpdateManyWithWhereWithoutUserInput | CartUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CartScalarWhereInput | CartScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutItemsInput = {
    create?: XOR<UserCreateWithoutItemsInput, UserUncheckedCreateWithoutItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutItemsInput
    connect?: UserWhereUniqueInput
  }

  export type ItemImageCreateNestedManyWithoutItemInput = {
    create?: XOR<ItemImageCreateWithoutItemInput, ItemImageUncheckedCreateWithoutItemInput> | ItemImageCreateWithoutItemInput[] | ItemImageUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ItemImageCreateOrConnectWithoutItemInput | ItemImageCreateOrConnectWithoutItemInput[]
    createMany?: ItemImageCreateManyItemInputEnvelope
    connect?: ItemImageWhereUniqueInput | ItemImageWhereUniqueInput[]
  }

  export type BarterRequestCreateNestedManyWithoutRequestedItemInput = {
    create?: XOR<BarterRequestCreateWithoutRequestedItemInput, BarterRequestUncheckedCreateWithoutRequestedItemInput> | BarterRequestCreateWithoutRequestedItemInput[] | BarterRequestUncheckedCreateWithoutRequestedItemInput[]
    connectOrCreate?: BarterRequestCreateOrConnectWithoutRequestedItemInput | BarterRequestCreateOrConnectWithoutRequestedItemInput[]
    createMany?: BarterRequestCreateManyRequestedItemInputEnvelope
    connect?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
  }

  export type WishlistCreateNestedManyWithoutItemInput = {
    create?: XOR<WishlistCreateWithoutItemInput, WishlistUncheckedCreateWithoutItemInput> | WishlistCreateWithoutItemInput[] | WishlistUncheckedCreateWithoutItemInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutItemInput | WishlistCreateOrConnectWithoutItemInput[]
    createMany?: WishlistCreateManyItemInputEnvelope
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutItemInput = {
    create?: XOR<TransactionCreateWithoutItemInput, TransactionUncheckedCreateWithoutItemInput> | TransactionCreateWithoutItemInput[] | TransactionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutItemInput | TransactionCreateOrConnectWithoutItemInput[]
    createMany?: TransactionCreateManyItemInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type PriceHistoryCreateNestedManyWithoutItemInput = {
    create?: XOR<PriceHistoryCreateWithoutItemInput, PriceHistoryUncheckedCreateWithoutItemInput> | PriceHistoryCreateWithoutItemInput[] | PriceHistoryUncheckedCreateWithoutItemInput[]
    connectOrCreate?: PriceHistoryCreateOrConnectWithoutItemInput | PriceHistoryCreateOrConnectWithoutItemInput[]
    createMany?: PriceHistoryCreateManyItemInputEnvelope
    connect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
  }

  export type RecommendationCreateNestedManyWithoutItemInput = {
    create?: XOR<RecommendationCreateWithoutItemInput, RecommendationUncheckedCreateWithoutItemInput> | RecommendationCreateWithoutItemInput[] | RecommendationUncheckedCreateWithoutItemInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutItemInput | RecommendationCreateOrConnectWithoutItemInput[]
    createMany?: RecommendationCreateManyItemInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type CartCreateNestedManyWithoutItemInput = {
    create?: XOR<CartCreateWithoutItemInput, CartUncheckedCreateWithoutItemInput> | CartCreateWithoutItemInput[] | CartUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CartCreateOrConnectWithoutItemInput | CartCreateOrConnectWithoutItemInput[]
    createMany?: CartCreateManyItemInputEnvelope
    connect?: CartWhereUniqueInput | CartWhereUniqueInput[]
  }

  export type ItemImageUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<ItemImageCreateWithoutItemInput, ItemImageUncheckedCreateWithoutItemInput> | ItemImageCreateWithoutItemInput[] | ItemImageUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ItemImageCreateOrConnectWithoutItemInput | ItemImageCreateOrConnectWithoutItemInput[]
    createMany?: ItemImageCreateManyItemInputEnvelope
    connect?: ItemImageWhereUniqueInput | ItemImageWhereUniqueInput[]
  }

  export type BarterRequestUncheckedCreateNestedManyWithoutRequestedItemInput = {
    create?: XOR<BarterRequestCreateWithoutRequestedItemInput, BarterRequestUncheckedCreateWithoutRequestedItemInput> | BarterRequestCreateWithoutRequestedItemInput[] | BarterRequestUncheckedCreateWithoutRequestedItemInput[]
    connectOrCreate?: BarterRequestCreateOrConnectWithoutRequestedItemInput | BarterRequestCreateOrConnectWithoutRequestedItemInput[]
    createMany?: BarterRequestCreateManyRequestedItemInputEnvelope
    connect?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
  }

  export type WishlistUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<WishlistCreateWithoutItemInput, WishlistUncheckedCreateWithoutItemInput> | WishlistCreateWithoutItemInput[] | WishlistUncheckedCreateWithoutItemInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutItemInput | WishlistCreateOrConnectWithoutItemInput[]
    createMany?: WishlistCreateManyItemInputEnvelope
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<TransactionCreateWithoutItemInput, TransactionUncheckedCreateWithoutItemInput> | TransactionCreateWithoutItemInput[] | TransactionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutItemInput | TransactionCreateOrConnectWithoutItemInput[]
    createMany?: TransactionCreateManyItemInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type PriceHistoryUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<PriceHistoryCreateWithoutItemInput, PriceHistoryUncheckedCreateWithoutItemInput> | PriceHistoryCreateWithoutItemInput[] | PriceHistoryUncheckedCreateWithoutItemInput[]
    connectOrCreate?: PriceHistoryCreateOrConnectWithoutItemInput | PriceHistoryCreateOrConnectWithoutItemInput[]
    createMany?: PriceHistoryCreateManyItemInputEnvelope
    connect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
  }

  export type RecommendationUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<RecommendationCreateWithoutItemInput, RecommendationUncheckedCreateWithoutItemInput> | RecommendationCreateWithoutItemInput[] | RecommendationUncheckedCreateWithoutItemInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutItemInput | RecommendationCreateOrConnectWithoutItemInput[]
    createMany?: RecommendationCreateManyItemInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type CartUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<CartCreateWithoutItemInput, CartUncheckedCreateWithoutItemInput> | CartCreateWithoutItemInput[] | CartUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CartCreateOrConnectWithoutItemInput | CartCreateOrConnectWithoutItemInput[]
    createMany?: CartCreateManyItemInputEnvelope
    connect?: CartWhereUniqueInput | CartWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumItemConditionFieldUpdateOperationsInput = {
    set?: $Enums.ItemCondition
  }

  export type UserUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<UserCreateWithoutItemsInput, UserUncheckedCreateWithoutItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutItemsInput
    upsert?: UserUpsertWithoutItemsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutItemsInput, UserUpdateWithoutItemsInput>, UserUncheckedUpdateWithoutItemsInput>
  }

  export type ItemImageUpdateManyWithoutItemNestedInput = {
    create?: XOR<ItemImageCreateWithoutItemInput, ItemImageUncheckedCreateWithoutItemInput> | ItemImageCreateWithoutItemInput[] | ItemImageUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ItemImageCreateOrConnectWithoutItemInput | ItemImageCreateOrConnectWithoutItemInput[]
    upsert?: ItemImageUpsertWithWhereUniqueWithoutItemInput | ItemImageUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: ItemImageCreateManyItemInputEnvelope
    set?: ItemImageWhereUniqueInput | ItemImageWhereUniqueInput[]
    disconnect?: ItemImageWhereUniqueInput | ItemImageWhereUniqueInput[]
    delete?: ItemImageWhereUniqueInput | ItemImageWhereUniqueInput[]
    connect?: ItemImageWhereUniqueInput | ItemImageWhereUniqueInput[]
    update?: ItemImageUpdateWithWhereUniqueWithoutItemInput | ItemImageUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: ItemImageUpdateManyWithWhereWithoutItemInput | ItemImageUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: ItemImageScalarWhereInput | ItemImageScalarWhereInput[]
  }

  export type BarterRequestUpdateManyWithoutRequestedItemNestedInput = {
    create?: XOR<BarterRequestCreateWithoutRequestedItemInput, BarterRequestUncheckedCreateWithoutRequestedItemInput> | BarterRequestCreateWithoutRequestedItemInput[] | BarterRequestUncheckedCreateWithoutRequestedItemInput[]
    connectOrCreate?: BarterRequestCreateOrConnectWithoutRequestedItemInput | BarterRequestCreateOrConnectWithoutRequestedItemInput[]
    upsert?: BarterRequestUpsertWithWhereUniqueWithoutRequestedItemInput | BarterRequestUpsertWithWhereUniqueWithoutRequestedItemInput[]
    createMany?: BarterRequestCreateManyRequestedItemInputEnvelope
    set?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    disconnect?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    delete?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    connect?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    update?: BarterRequestUpdateWithWhereUniqueWithoutRequestedItemInput | BarterRequestUpdateWithWhereUniqueWithoutRequestedItemInput[]
    updateMany?: BarterRequestUpdateManyWithWhereWithoutRequestedItemInput | BarterRequestUpdateManyWithWhereWithoutRequestedItemInput[]
    deleteMany?: BarterRequestScalarWhereInput | BarterRequestScalarWhereInput[]
  }

  export type WishlistUpdateManyWithoutItemNestedInput = {
    create?: XOR<WishlistCreateWithoutItemInput, WishlistUncheckedCreateWithoutItemInput> | WishlistCreateWithoutItemInput[] | WishlistUncheckedCreateWithoutItemInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutItemInput | WishlistCreateOrConnectWithoutItemInput[]
    upsert?: WishlistUpsertWithWhereUniqueWithoutItemInput | WishlistUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: WishlistCreateManyItemInputEnvelope
    set?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    disconnect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    delete?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    update?: WishlistUpdateWithWhereUniqueWithoutItemInput | WishlistUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: WishlistUpdateManyWithWhereWithoutItemInput | WishlistUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutItemNestedInput = {
    create?: XOR<TransactionCreateWithoutItemInput, TransactionUncheckedCreateWithoutItemInput> | TransactionCreateWithoutItemInput[] | TransactionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutItemInput | TransactionCreateOrConnectWithoutItemInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutItemInput | TransactionUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: TransactionCreateManyItemInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutItemInput | TransactionUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutItemInput | TransactionUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type PriceHistoryUpdateManyWithoutItemNestedInput = {
    create?: XOR<PriceHistoryCreateWithoutItemInput, PriceHistoryUncheckedCreateWithoutItemInput> | PriceHistoryCreateWithoutItemInput[] | PriceHistoryUncheckedCreateWithoutItemInput[]
    connectOrCreate?: PriceHistoryCreateOrConnectWithoutItemInput | PriceHistoryCreateOrConnectWithoutItemInput[]
    upsert?: PriceHistoryUpsertWithWhereUniqueWithoutItemInput | PriceHistoryUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: PriceHistoryCreateManyItemInputEnvelope
    set?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    disconnect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    delete?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    connect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    update?: PriceHistoryUpdateWithWhereUniqueWithoutItemInput | PriceHistoryUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: PriceHistoryUpdateManyWithWhereWithoutItemInput | PriceHistoryUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: PriceHistoryScalarWhereInput | PriceHistoryScalarWhereInput[]
  }

  export type RecommendationUpdateManyWithoutItemNestedInput = {
    create?: XOR<RecommendationCreateWithoutItemInput, RecommendationUncheckedCreateWithoutItemInput> | RecommendationCreateWithoutItemInput[] | RecommendationUncheckedCreateWithoutItemInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutItemInput | RecommendationCreateOrConnectWithoutItemInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutItemInput | RecommendationUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: RecommendationCreateManyItemInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutItemInput | RecommendationUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutItemInput | RecommendationUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type CartUpdateManyWithoutItemNestedInput = {
    create?: XOR<CartCreateWithoutItemInput, CartUncheckedCreateWithoutItemInput> | CartCreateWithoutItemInput[] | CartUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CartCreateOrConnectWithoutItemInput | CartCreateOrConnectWithoutItemInput[]
    upsert?: CartUpsertWithWhereUniqueWithoutItemInput | CartUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: CartCreateManyItemInputEnvelope
    set?: CartWhereUniqueInput | CartWhereUniqueInput[]
    disconnect?: CartWhereUniqueInput | CartWhereUniqueInput[]
    delete?: CartWhereUniqueInput | CartWhereUniqueInput[]
    connect?: CartWhereUniqueInput | CartWhereUniqueInput[]
    update?: CartUpdateWithWhereUniqueWithoutItemInput | CartUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: CartUpdateManyWithWhereWithoutItemInput | CartUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: CartScalarWhereInput | CartScalarWhereInput[]
  }

  export type ItemImageUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<ItemImageCreateWithoutItemInput, ItemImageUncheckedCreateWithoutItemInput> | ItemImageCreateWithoutItemInput[] | ItemImageUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ItemImageCreateOrConnectWithoutItemInput | ItemImageCreateOrConnectWithoutItemInput[]
    upsert?: ItemImageUpsertWithWhereUniqueWithoutItemInput | ItemImageUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: ItemImageCreateManyItemInputEnvelope
    set?: ItemImageWhereUniqueInput | ItemImageWhereUniqueInput[]
    disconnect?: ItemImageWhereUniqueInput | ItemImageWhereUniqueInput[]
    delete?: ItemImageWhereUniqueInput | ItemImageWhereUniqueInput[]
    connect?: ItemImageWhereUniqueInput | ItemImageWhereUniqueInput[]
    update?: ItemImageUpdateWithWhereUniqueWithoutItemInput | ItemImageUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: ItemImageUpdateManyWithWhereWithoutItemInput | ItemImageUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: ItemImageScalarWhereInput | ItemImageScalarWhereInput[]
  }

  export type BarterRequestUncheckedUpdateManyWithoutRequestedItemNestedInput = {
    create?: XOR<BarterRequestCreateWithoutRequestedItemInput, BarterRequestUncheckedCreateWithoutRequestedItemInput> | BarterRequestCreateWithoutRequestedItemInput[] | BarterRequestUncheckedCreateWithoutRequestedItemInput[]
    connectOrCreate?: BarterRequestCreateOrConnectWithoutRequestedItemInput | BarterRequestCreateOrConnectWithoutRequestedItemInput[]
    upsert?: BarterRequestUpsertWithWhereUniqueWithoutRequestedItemInput | BarterRequestUpsertWithWhereUniqueWithoutRequestedItemInput[]
    createMany?: BarterRequestCreateManyRequestedItemInputEnvelope
    set?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    disconnect?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    delete?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    connect?: BarterRequestWhereUniqueInput | BarterRequestWhereUniqueInput[]
    update?: BarterRequestUpdateWithWhereUniqueWithoutRequestedItemInput | BarterRequestUpdateWithWhereUniqueWithoutRequestedItemInput[]
    updateMany?: BarterRequestUpdateManyWithWhereWithoutRequestedItemInput | BarterRequestUpdateManyWithWhereWithoutRequestedItemInput[]
    deleteMany?: BarterRequestScalarWhereInput | BarterRequestScalarWhereInput[]
  }

  export type WishlistUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<WishlistCreateWithoutItemInput, WishlistUncheckedCreateWithoutItemInput> | WishlistCreateWithoutItemInput[] | WishlistUncheckedCreateWithoutItemInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutItemInput | WishlistCreateOrConnectWithoutItemInput[]
    upsert?: WishlistUpsertWithWhereUniqueWithoutItemInput | WishlistUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: WishlistCreateManyItemInputEnvelope
    set?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    disconnect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    delete?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    update?: WishlistUpdateWithWhereUniqueWithoutItemInput | WishlistUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: WishlistUpdateManyWithWhereWithoutItemInput | WishlistUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<TransactionCreateWithoutItemInput, TransactionUncheckedCreateWithoutItemInput> | TransactionCreateWithoutItemInput[] | TransactionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutItemInput | TransactionCreateOrConnectWithoutItemInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutItemInput | TransactionUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: TransactionCreateManyItemInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutItemInput | TransactionUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutItemInput | TransactionUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type PriceHistoryUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<PriceHistoryCreateWithoutItemInput, PriceHistoryUncheckedCreateWithoutItemInput> | PriceHistoryCreateWithoutItemInput[] | PriceHistoryUncheckedCreateWithoutItemInput[]
    connectOrCreate?: PriceHistoryCreateOrConnectWithoutItemInput | PriceHistoryCreateOrConnectWithoutItemInput[]
    upsert?: PriceHistoryUpsertWithWhereUniqueWithoutItemInput | PriceHistoryUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: PriceHistoryCreateManyItemInputEnvelope
    set?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    disconnect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    delete?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    connect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    update?: PriceHistoryUpdateWithWhereUniqueWithoutItemInput | PriceHistoryUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: PriceHistoryUpdateManyWithWhereWithoutItemInput | PriceHistoryUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: PriceHistoryScalarWhereInput | PriceHistoryScalarWhereInput[]
  }

  export type RecommendationUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<RecommendationCreateWithoutItemInput, RecommendationUncheckedCreateWithoutItemInput> | RecommendationCreateWithoutItemInput[] | RecommendationUncheckedCreateWithoutItemInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutItemInput | RecommendationCreateOrConnectWithoutItemInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutItemInput | RecommendationUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: RecommendationCreateManyItemInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutItemInput | RecommendationUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutItemInput | RecommendationUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type CartUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<CartCreateWithoutItemInput, CartUncheckedCreateWithoutItemInput> | CartCreateWithoutItemInput[] | CartUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CartCreateOrConnectWithoutItemInput | CartCreateOrConnectWithoutItemInput[]
    upsert?: CartUpsertWithWhereUniqueWithoutItemInput | CartUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: CartCreateManyItemInputEnvelope
    set?: CartWhereUniqueInput | CartWhereUniqueInput[]
    disconnect?: CartWhereUniqueInput | CartWhereUniqueInput[]
    delete?: CartWhereUniqueInput | CartWhereUniqueInput[]
    connect?: CartWhereUniqueInput | CartWhereUniqueInput[]
    update?: CartUpdateWithWhereUniqueWithoutItemInput | CartUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: CartUpdateManyWithWhereWithoutItemInput | CartUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: CartScalarWhereInput | CartScalarWhereInput[]
  }

  export type DiscussionCreateNestedManyWithoutAcademicDataInput = {
    create?: XOR<DiscussionCreateWithoutAcademicDataInput, DiscussionUncheckedCreateWithoutAcademicDataInput> | DiscussionCreateWithoutAcademicDataInput[] | DiscussionUncheckedCreateWithoutAcademicDataInput[]
    connectOrCreate?: DiscussionCreateOrConnectWithoutAcademicDataInput | DiscussionCreateOrConnectWithoutAcademicDataInput[]
    createMany?: DiscussionCreateManyAcademicDataInputEnvelope
    connect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
  }

  export type AcademicPreferenceCreateNestedManyWithoutAcademicDataInput = {
    create?: XOR<AcademicPreferenceCreateWithoutAcademicDataInput, AcademicPreferenceUncheckedCreateWithoutAcademicDataInput> | AcademicPreferenceCreateWithoutAcademicDataInput[] | AcademicPreferenceUncheckedCreateWithoutAcademicDataInput[]
    connectOrCreate?: AcademicPreferenceCreateOrConnectWithoutAcademicDataInput | AcademicPreferenceCreateOrConnectWithoutAcademicDataInput[]
    createMany?: AcademicPreferenceCreateManyAcademicDataInputEnvelope
    connect?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
  }

  export type DiscussionUncheckedCreateNestedManyWithoutAcademicDataInput = {
    create?: XOR<DiscussionCreateWithoutAcademicDataInput, DiscussionUncheckedCreateWithoutAcademicDataInput> | DiscussionCreateWithoutAcademicDataInput[] | DiscussionUncheckedCreateWithoutAcademicDataInput[]
    connectOrCreate?: DiscussionCreateOrConnectWithoutAcademicDataInput | DiscussionCreateOrConnectWithoutAcademicDataInput[]
    createMany?: DiscussionCreateManyAcademicDataInputEnvelope
    connect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
  }

  export type AcademicPreferenceUncheckedCreateNestedManyWithoutAcademicDataInput = {
    create?: XOR<AcademicPreferenceCreateWithoutAcademicDataInput, AcademicPreferenceUncheckedCreateWithoutAcademicDataInput> | AcademicPreferenceCreateWithoutAcademicDataInput[] | AcademicPreferenceUncheckedCreateWithoutAcademicDataInput[]
    connectOrCreate?: AcademicPreferenceCreateOrConnectWithoutAcademicDataInput | AcademicPreferenceCreateOrConnectWithoutAcademicDataInput[]
    createMany?: AcademicPreferenceCreateManyAcademicDataInputEnvelope
    connect?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DiscussionUpdateManyWithoutAcademicDataNestedInput = {
    create?: XOR<DiscussionCreateWithoutAcademicDataInput, DiscussionUncheckedCreateWithoutAcademicDataInput> | DiscussionCreateWithoutAcademicDataInput[] | DiscussionUncheckedCreateWithoutAcademicDataInput[]
    connectOrCreate?: DiscussionCreateOrConnectWithoutAcademicDataInput | DiscussionCreateOrConnectWithoutAcademicDataInput[]
    upsert?: DiscussionUpsertWithWhereUniqueWithoutAcademicDataInput | DiscussionUpsertWithWhereUniqueWithoutAcademicDataInput[]
    createMany?: DiscussionCreateManyAcademicDataInputEnvelope
    set?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    disconnect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    delete?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    connect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    update?: DiscussionUpdateWithWhereUniqueWithoutAcademicDataInput | DiscussionUpdateWithWhereUniqueWithoutAcademicDataInput[]
    updateMany?: DiscussionUpdateManyWithWhereWithoutAcademicDataInput | DiscussionUpdateManyWithWhereWithoutAcademicDataInput[]
    deleteMany?: DiscussionScalarWhereInput | DiscussionScalarWhereInput[]
  }

  export type AcademicPreferenceUpdateManyWithoutAcademicDataNestedInput = {
    create?: XOR<AcademicPreferenceCreateWithoutAcademicDataInput, AcademicPreferenceUncheckedCreateWithoutAcademicDataInput> | AcademicPreferenceCreateWithoutAcademicDataInput[] | AcademicPreferenceUncheckedCreateWithoutAcademicDataInput[]
    connectOrCreate?: AcademicPreferenceCreateOrConnectWithoutAcademicDataInput | AcademicPreferenceCreateOrConnectWithoutAcademicDataInput[]
    upsert?: AcademicPreferenceUpsertWithWhereUniqueWithoutAcademicDataInput | AcademicPreferenceUpsertWithWhereUniqueWithoutAcademicDataInput[]
    createMany?: AcademicPreferenceCreateManyAcademicDataInputEnvelope
    set?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    disconnect?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    delete?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    connect?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    update?: AcademicPreferenceUpdateWithWhereUniqueWithoutAcademicDataInput | AcademicPreferenceUpdateWithWhereUniqueWithoutAcademicDataInput[]
    updateMany?: AcademicPreferenceUpdateManyWithWhereWithoutAcademicDataInput | AcademicPreferenceUpdateManyWithWhereWithoutAcademicDataInput[]
    deleteMany?: AcademicPreferenceScalarWhereInput | AcademicPreferenceScalarWhereInput[]
  }

  export type DiscussionUncheckedUpdateManyWithoutAcademicDataNestedInput = {
    create?: XOR<DiscussionCreateWithoutAcademicDataInput, DiscussionUncheckedCreateWithoutAcademicDataInput> | DiscussionCreateWithoutAcademicDataInput[] | DiscussionUncheckedCreateWithoutAcademicDataInput[]
    connectOrCreate?: DiscussionCreateOrConnectWithoutAcademicDataInput | DiscussionCreateOrConnectWithoutAcademicDataInput[]
    upsert?: DiscussionUpsertWithWhereUniqueWithoutAcademicDataInput | DiscussionUpsertWithWhereUniqueWithoutAcademicDataInput[]
    createMany?: DiscussionCreateManyAcademicDataInputEnvelope
    set?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    disconnect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    delete?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    connect?: DiscussionWhereUniqueInput | DiscussionWhereUniqueInput[]
    update?: DiscussionUpdateWithWhereUniqueWithoutAcademicDataInput | DiscussionUpdateWithWhereUniqueWithoutAcademicDataInput[]
    updateMany?: DiscussionUpdateManyWithWhereWithoutAcademicDataInput | DiscussionUpdateManyWithWhereWithoutAcademicDataInput[]
    deleteMany?: DiscussionScalarWhereInput | DiscussionScalarWhereInput[]
  }

  export type AcademicPreferenceUncheckedUpdateManyWithoutAcademicDataNestedInput = {
    create?: XOR<AcademicPreferenceCreateWithoutAcademicDataInput, AcademicPreferenceUncheckedCreateWithoutAcademicDataInput> | AcademicPreferenceCreateWithoutAcademicDataInput[] | AcademicPreferenceUncheckedCreateWithoutAcademicDataInput[]
    connectOrCreate?: AcademicPreferenceCreateOrConnectWithoutAcademicDataInput | AcademicPreferenceCreateOrConnectWithoutAcademicDataInput[]
    upsert?: AcademicPreferenceUpsertWithWhereUniqueWithoutAcademicDataInput | AcademicPreferenceUpsertWithWhereUniqueWithoutAcademicDataInput[]
    createMany?: AcademicPreferenceCreateManyAcademicDataInputEnvelope
    set?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    disconnect?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    delete?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    connect?: AcademicPreferenceWhereUniqueInput | AcademicPreferenceWhereUniqueInput[]
    update?: AcademicPreferenceUpdateWithWhereUniqueWithoutAcademicDataInput | AcademicPreferenceUpdateWithWhereUniqueWithoutAcademicDataInput[]
    updateMany?: AcademicPreferenceUpdateManyWithWhereWithoutAcademicDataInput | AcademicPreferenceUpdateManyWithWhereWithoutAcademicDataInput[]
    deleteMany?: AcademicPreferenceScalarWhereInput | AcademicPreferenceScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBuyerTransactionsInput = {
    create?: XOR<UserCreateWithoutBuyerTransactionsInput, UserUncheckedCreateWithoutBuyerTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBuyerTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSellerTransactionsInput = {
    create?: XOR<UserCreateWithoutSellerTransactionsInput, UserUncheckedCreateWithoutSellerTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSellerTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<ItemCreateWithoutTransactionsInput, ItemUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutTransactionsInput
    connect?: ItemWhereUniqueInput
  }

  export type EnumTransactionStatusFieldUpdateOperationsInput = {
    set?: $Enums.TransactionStatus
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type UserUpdateOneRequiredWithoutBuyerTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutBuyerTransactionsInput, UserUncheckedCreateWithoutBuyerTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBuyerTransactionsInput
    upsert?: UserUpsertWithoutBuyerTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBuyerTransactionsInput, UserUpdateWithoutBuyerTransactionsInput>, UserUncheckedUpdateWithoutBuyerTransactionsInput>
  }

  export type UserUpdateOneRequiredWithoutSellerTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutSellerTransactionsInput, UserUncheckedCreateWithoutSellerTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSellerTransactionsInput
    upsert?: UserUpsertWithoutSellerTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSellerTransactionsInput, UserUpdateWithoutSellerTransactionsInput>, UserUncheckedUpdateWithoutSellerTransactionsInput>
  }

  export type ItemUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<ItemCreateWithoutTransactionsInput, ItemUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutTransactionsInput
    upsert?: ItemUpsertWithoutTransactionsInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutTransactionsInput, ItemUpdateWithoutTransactionsInput>, ItemUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserCreateNestedOneWithoutBarterRequestsInput = {
    create?: XOR<UserCreateWithoutBarterRequestsInput, UserUncheckedCreateWithoutBarterRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBarterRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutBarterRequestsInput = {
    create?: XOR<ItemCreateWithoutBarterRequestsInput, ItemUncheckedCreateWithoutBarterRequestsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutBarterRequestsInput
    connect?: ItemWhereUniqueInput
  }

  export type BarterNegotiationCreateNestedManyWithoutBarterRequestInput = {
    create?: XOR<BarterNegotiationCreateWithoutBarterRequestInput, BarterNegotiationUncheckedCreateWithoutBarterRequestInput> | BarterNegotiationCreateWithoutBarterRequestInput[] | BarterNegotiationUncheckedCreateWithoutBarterRequestInput[]
    connectOrCreate?: BarterNegotiationCreateOrConnectWithoutBarterRequestInput | BarterNegotiationCreateOrConnectWithoutBarterRequestInput[]
    createMany?: BarterNegotiationCreateManyBarterRequestInputEnvelope
    connect?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
  }

  export type BarterNegotiationUncheckedCreateNestedManyWithoutBarterRequestInput = {
    create?: XOR<BarterNegotiationCreateWithoutBarterRequestInput, BarterNegotiationUncheckedCreateWithoutBarterRequestInput> | BarterNegotiationCreateWithoutBarterRequestInput[] | BarterNegotiationUncheckedCreateWithoutBarterRequestInput[]
    connectOrCreate?: BarterNegotiationCreateOrConnectWithoutBarterRequestInput | BarterNegotiationCreateOrConnectWithoutBarterRequestInput[]
    createMany?: BarterNegotiationCreateManyBarterRequestInputEnvelope
    connect?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
  }

  export type EnumBarterStatusFieldUpdateOperationsInput = {
    set?: $Enums.BarterStatus
  }

  export type UserUpdateOneRequiredWithoutBarterRequestsNestedInput = {
    create?: XOR<UserCreateWithoutBarterRequestsInput, UserUncheckedCreateWithoutBarterRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBarterRequestsInput
    upsert?: UserUpsertWithoutBarterRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBarterRequestsInput, UserUpdateWithoutBarterRequestsInput>, UserUncheckedUpdateWithoutBarterRequestsInput>
  }

  export type ItemUpdateOneRequiredWithoutBarterRequestsNestedInput = {
    create?: XOR<ItemCreateWithoutBarterRequestsInput, ItemUncheckedCreateWithoutBarterRequestsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutBarterRequestsInput
    upsert?: ItemUpsertWithoutBarterRequestsInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutBarterRequestsInput, ItemUpdateWithoutBarterRequestsInput>, ItemUncheckedUpdateWithoutBarterRequestsInput>
  }

  export type BarterNegotiationUpdateManyWithoutBarterRequestNestedInput = {
    create?: XOR<BarterNegotiationCreateWithoutBarterRequestInput, BarterNegotiationUncheckedCreateWithoutBarterRequestInput> | BarterNegotiationCreateWithoutBarterRequestInput[] | BarterNegotiationUncheckedCreateWithoutBarterRequestInput[]
    connectOrCreate?: BarterNegotiationCreateOrConnectWithoutBarterRequestInput | BarterNegotiationCreateOrConnectWithoutBarterRequestInput[]
    upsert?: BarterNegotiationUpsertWithWhereUniqueWithoutBarterRequestInput | BarterNegotiationUpsertWithWhereUniqueWithoutBarterRequestInput[]
    createMany?: BarterNegotiationCreateManyBarterRequestInputEnvelope
    set?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    disconnect?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    delete?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    connect?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    update?: BarterNegotiationUpdateWithWhereUniqueWithoutBarterRequestInput | BarterNegotiationUpdateWithWhereUniqueWithoutBarterRequestInput[]
    updateMany?: BarterNegotiationUpdateManyWithWhereWithoutBarterRequestInput | BarterNegotiationUpdateManyWithWhereWithoutBarterRequestInput[]
    deleteMany?: BarterNegotiationScalarWhereInput | BarterNegotiationScalarWhereInput[]
  }

  export type BarterNegotiationUncheckedUpdateManyWithoutBarterRequestNestedInput = {
    create?: XOR<BarterNegotiationCreateWithoutBarterRequestInput, BarterNegotiationUncheckedCreateWithoutBarterRequestInput> | BarterNegotiationCreateWithoutBarterRequestInput[] | BarterNegotiationUncheckedCreateWithoutBarterRequestInput[]
    connectOrCreate?: BarterNegotiationCreateOrConnectWithoutBarterRequestInput | BarterNegotiationCreateOrConnectWithoutBarterRequestInput[]
    upsert?: BarterNegotiationUpsertWithWhereUniqueWithoutBarterRequestInput | BarterNegotiationUpsertWithWhereUniqueWithoutBarterRequestInput[]
    createMany?: BarterNegotiationCreateManyBarterRequestInputEnvelope
    set?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    disconnect?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    delete?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    connect?: BarterNegotiationWhereUniqueInput | BarterNegotiationWhereUniqueInput[]
    update?: BarterNegotiationUpdateWithWhereUniqueWithoutBarterRequestInput | BarterNegotiationUpdateWithWhereUniqueWithoutBarterRequestInput[]
    updateMany?: BarterNegotiationUpdateManyWithWhereWithoutBarterRequestInput | BarterNegotiationUpdateManyWithWhereWithoutBarterRequestInput[]
    deleteMany?: BarterNegotiationScalarWhereInput | BarterNegotiationScalarWhereInput[]
  }

  export type BarterRequestCreateNestedOneWithoutBarterNegotiationsInput = {
    create?: XOR<BarterRequestCreateWithoutBarterNegotiationsInput, BarterRequestUncheckedCreateWithoutBarterNegotiationsInput>
    connectOrCreate?: BarterRequestCreateOrConnectWithoutBarterNegotiationsInput
    connect?: BarterRequestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBarterNegotiationsInput = {
    create?: XOR<UserCreateWithoutBarterNegotiationsInput, UserUncheckedCreateWithoutBarterNegotiationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBarterNegotiationsInput
    connect?: UserWhereUniqueInput
  }

  export type BarterRequestUpdateOneRequiredWithoutBarterNegotiationsNestedInput = {
    create?: XOR<BarterRequestCreateWithoutBarterNegotiationsInput, BarterRequestUncheckedCreateWithoutBarterNegotiationsInput>
    connectOrCreate?: BarterRequestCreateOrConnectWithoutBarterNegotiationsInput
    upsert?: BarterRequestUpsertWithoutBarterNegotiationsInput
    connect?: BarterRequestWhereUniqueInput
    update?: XOR<XOR<BarterRequestUpdateToOneWithWhereWithoutBarterNegotiationsInput, BarterRequestUpdateWithoutBarterNegotiationsInput>, BarterRequestUncheckedUpdateWithoutBarterNegotiationsInput>
  }

  export type UserUpdateOneRequiredWithoutBarterNegotiationsNestedInput = {
    create?: XOR<UserCreateWithoutBarterNegotiationsInput, UserUncheckedCreateWithoutBarterNegotiationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBarterNegotiationsInput
    upsert?: UserUpsertWithoutBarterNegotiationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBarterNegotiationsInput, UserUpdateWithoutBarterNegotiationsInput>, UserUncheckedUpdateWithoutBarterNegotiationsInput>
  }

  export type UserCreateNestedOneWithoutWtbRequestsInput = {
    create?: XOR<UserCreateWithoutWtbRequestsInput, UserUncheckedCreateWithoutWtbRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWtbRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type WtbResponseCreateNestedManyWithoutWtbRequestInput = {
    create?: XOR<WtbResponseCreateWithoutWtbRequestInput, WtbResponseUncheckedCreateWithoutWtbRequestInput> | WtbResponseCreateWithoutWtbRequestInput[] | WtbResponseUncheckedCreateWithoutWtbRequestInput[]
    connectOrCreate?: WtbResponseCreateOrConnectWithoutWtbRequestInput | WtbResponseCreateOrConnectWithoutWtbRequestInput[]
    createMany?: WtbResponseCreateManyWtbRequestInputEnvelope
    connect?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
  }

  export type WtbResponseUncheckedCreateNestedManyWithoutWtbRequestInput = {
    create?: XOR<WtbResponseCreateWithoutWtbRequestInput, WtbResponseUncheckedCreateWithoutWtbRequestInput> | WtbResponseCreateWithoutWtbRequestInput[] | WtbResponseUncheckedCreateWithoutWtbRequestInput[]
    connectOrCreate?: WtbResponseCreateOrConnectWithoutWtbRequestInput | WtbResponseCreateOrConnectWithoutWtbRequestInput[]
    createMany?: WtbResponseCreateManyWtbRequestInputEnvelope
    connect?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumWtbUrgencyFieldUpdateOperationsInput = {
    set?: $Enums.WtbUrgency
  }

  export type UserUpdateOneRequiredWithoutWtbRequestsNestedInput = {
    create?: XOR<UserCreateWithoutWtbRequestsInput, UserUncheckedCreateWithoutWtbRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWtbRequestsInput
    upsert?: UserUpsertWithoutWtbRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWtbRequestsInput, UserUpdateWithoutWtbRequestsInput>, UserUncheckedUpdateWithoutWtbRequestsInput>
  }

  export type WtbResponseUpdateManyWithoutWtbRequestNestedInput = {
    create?: XOR<WtbResponseCreateWithoutWtbRequestInput, WtbResponseUncheckedCreateWithoutWtbRequestInput> | WtbResponseCreateWithoutWtbRequestInput[] | WtbResponseUncheckedCreateWithoutWtbRequestInput[]
    connectOrCreate?: WtbResponseCreateOrConnectWithoutWtbRequestInput | WtbResponseCreateOrConnectWithoutWtbRequestInput[]
    upsert?: WtbResponseUpsertWithWhereUniqueWithoutWtbRequestInput | WtbResponseUpsertWithWhereUniqueWithoutWtbRequestInput[]
    createMany?: WtbResponseCreateManyWtbRequestInputEnvelope
    set?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    disconnect?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    delete?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    connect?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    update?: WtbResponseUpdateWithWhereUniqueWithoutWtbRequestInput | WtbResponseUpdateWithWhereUniqueWithoutWtbRequestInput[]
    updateMany?: WtbResponseUpdateManyWithWhereWithoutWtbRequestInput | WtbResponseUpdateManyWithWhereWithoutWtbRequestInput[]
    deleteMany?: WtbResponseScalarWhereInput | WtbResponseScalarWhereInput[]
  }

  export type WtbResponseUncheckedUpdateManyWithoutWtbRequestNestedInput = {
    create?: XOR<WtbResponseCreateWithoutWtbRequestInput, WtbResponseUncheckedCreateWithoutWtbRequestInput> | WtbResponseCreateWithoutWtbRequestInput[] | WtbResponseUncheckedCreateWithoutWtbRequestInput[]
    connectOrCreate?: WtbResponseCreateOrConnectWithoutWtbRequestInput | WtbResponseCreateOrConnectWithoutWtbRequestInput[]
    upsert?: WtbResponseUpsertWithWhereUniqueWithoutWtbRequestInput | WtbResponseUpsertWithWhereUniqueWithoutWtbRequestInput[]
    createMany?: WtbResponseCreateManyWtbRequestInputEnvelope
    set?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    disconnect?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    delete?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    connect?: WtbResponseWhereUniqueInput | WtbResponseWhereUniqueInput[]
    update?: WtbResponseUpdateWithWhereUniqueWithoutWtbRequestInput | WtbResponseUpdateWithWhereUniqueWithoutWtbRequestInput[]
    updateMany?: WtbResponseUpdateManyWithWhereWithoutWtbRequestInput | WtbResponseUpdateManyWithWhereWithoutWtbRequestInput[]
    deleteMany?: WtbResponseScalarWhereInput | WtbResponseScalarWhereInput[]
  }

  export type WtbRequestCreateNestedOneWithoutWtbResponsesInput = {
    create?: XOR<WtbRequestCreateWithoutWtbResponsesInput, WtbRequestUncheckedCreateWithoutWtbResponsesInput>
    connectOrCreate?: WtbRequestCreateOrConnectWithoutWtbResponsesInput
    connect?: WtbRequestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWtbResponsesInput = {
    create?: XOR<UserCreateWithoutWtbResponsesInput, UserUncheckedCreateWithoutWtbResponsesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWtbResponsesInput
    connect?: UserWhereUniqueInput
  }

  export type WtbRequestUpdateOneRequiredWithoutWtbResponsesNestedInput = {
    create?: XOR<WtbRequestCreateWithoutWtbResponsesInput, WtbRequestUncheckedCreateWithoutWtbResponsesInput>
    connectOrCreate?: WtbRequestCreateOrConnectWithoutWtbResponsesInput
    upsert?: WtbRequestUpsertWithoutWtbResponsesInput
    connect?: WtbRequestWhereUniqueInput
    update?: XOR<XOR<WtbRequestUpdateToOneWithWhereWithoutWtbResponsesInput, WtbRequestUpdateWithoutWtbResponsesInput>, WtbRequestUncheckedUpdateWithoutWtbResponsesInput>
  }

  export type UserUpdateOneRequiredWithoutWtbResponsesNestedInput = {
    create?: XOR<UserCreateWithoutWtbResponsesInput, UserUncheckedCreateWithoutWtbResponsesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWtbResponsesInput
    upsert?: UserUpsertWithoutWtbResponsesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWtbResponsesInput, UserUpdateWithoutWtbResponsesInput>, UserUncheckedUpdateWithoutWtbResponsesInput>
  }

  export type UserCreateNestedOneWithoutWishlistsInput = {
    create?: XOR<UserCreateWithoutWishlistsInput, UserUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWishlistsInput
    connect?: UserWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutWishlistsInput = {
    create?: XOR<ItemCreateWithoutWishlistsInput, ItemUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutWishlistsInput
    connect?: ItemWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWishlistsNestedInput = {
    create?: XOR<UserCreateWithoutWishlistsInput, UserUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWishlistsInput
    upsert?: UserUpsertWithoutWishlistsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWishlistsInput, UserUpdateWithoutWishlistsInput>, UserUncheckedUpdateWithoutWishlistsInput>
  }

  export type ItemUpdateOneRequiredWithoutWishlistsNestedInput = {
    create?: XOR<ItemCreateWithoutWishlistsInput, ItemUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutWishlistsInput
    upsert?: ItemUpsertWithoutWishlistsInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutWishlistsInput, ItemUpdateWithoutWishlistsInput>, ItemUncheckedUpdateWithoutWishlistsInput>
  }

  export type UserCreateNestedOneWithoutDiscussionsInput = {
    create?: XOR<UserCreateWithoutDiscussionsInput, UserUncheckedCreateWithoutDiscussionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDiscussionsInput
    connect?: UserWhereUniqueInput
  }

  export type AcademicDataCreateNestedOneWithoutDiscussionsInput = {
    create?: XOR<AcademicDataCreateWithoutDiscussionsInput, AcademicDataUncheckedCreateWithoutDiscussionsInput>
    connectOrCreate?: AcademicDataCreateOrConnectWithoutDiscussionsInput
    connect?: AcademicDataWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutDiscussionInput = {
    create?: XOR<CommentCreateWithoutDiscussionInput, CommentUncheckedCreateWithoutDiscussionInput> | CommentCreateWithoutDiscussionInput[] | CommentUncheckedCreateWithoutDiscussionInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutDiscussionInput | CommentCreateOrConnectWithoutDiscussionInput[]
    createMany?: CommentCreateManyDiscussionInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutDiscussionInput = {
    create?: XOR<CommentCreateWithoutDiscussionInput, CommentUncheckedCreateWithoutDiscussionInput> | CommentCreateWithoutDiscussionInput[] | CommentUncheckedCreateWithoutDiscussionInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutDiscussionInput | CommentCreateOrConnectWithoutDiscussionInput[]
    createMany?: CommentCreateManyDiscussionInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutDiscussionsNestedInput = {
    create?: XOR<UserCreateWithoutDiscussionsInput, UserUncheckedCreateWithoutDiscussionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDiscussionsInput
    upsert?: UserUpsertWithoutDiscussionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDiscussionsInput, UserUpdateWithoutDiscussionsInput>, UserUncheckedUpdateWithoutDiscussionsInput>
  }

  export type AcademicDataUpdateOneWithoutDiscussionsNestedInput = {
    create?: XOR<AcademicDataCreateWithoutDiscussionsInput, AcademicDataUncheckedCreateWithoutDiscussionsInput>
    connectOrCreate?: AcademicDataCreateOrConnectWithoutDiscussionsInput
    upsert?: AcademicDataUpsertWithoutDiscussionsInput
    disconnect?: AcademicDataWhereInput | boolean
    delete?: AcademicDataWhereInput | boolean
    connect?: AcademicDataWhereUniqueInput
    update?: XOR<XOR<AcademicDataUpdateToOneWithWhereWithoutDiscussionsInput, AcademicDataUpdateWithoutDiscussionsInput>, AcademicDataUncheckedUpdateWithoutDiscussionsInput>
  }

  export type CommentUpdateManyWithoutDiscussionNestedInput = {
    create?: XOR<CommentCreateWithoutDiscussionInput, CommentUncheckedCreateWithoutDiscussionInput> | CommentCreateWithoutDiscussionInput[] | CommentUncheckedCreateWithoutDiscussionInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutDiscussionInput | CommentCreateOrConnectWithoutDiscussionInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutDiscussionInput | CommentUpsertWithWhereUniqueWithoutDiscussionInput[]
    createMany?: CommentCreateManyDiscussionInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutDiscussionInput | CommentUpdateWithWhereUniqueWithoutDiscussionInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutDiscussionInput | CommentUpdateManyWithWhereWithoutDiscussionInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutDiscussionNestedInput = {
    create?: XOR<CommentCreateWithoutDiscussionInput, CommentUncheckedCreateWithoutDiscussionInput> | CommentCreateWithoutDiscussionInput[] | CommentUncheckedCreateWithoutDiscussionInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutDiscussionInput | CommentCreateOrConnectWithoutDiscussionInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutDiscussionInput | CommentUpsertWithWhereUniqueWithoutDiscussionInput[]
    createMany?: CommentCreateManyDiscussionInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutDiscussionInput | CommentUpdateWithWhereUniqueWithoutDiscussionInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutDiscussionInput | CommentUpdateManyWithWhereWithoutDiscussionInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type DiscussionCreateNestedOneWithoutCommentsInput = {
    create?: XOR<DiscussionCreateWithoutCommentsInput, DiscussionUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: DiscussionCreateOrConnectWithoutCommentsInput
    connect?: DiscussionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutRepliesInput = {
    create?: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutRepliesInput
    connect?: CommentWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutParentInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DiscussionUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<DiscussionCreateWithoutCommentsInput, DiscussionUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: DiscussionCreateOrConnectWithoutCommentsInput
    upsert?: DiscussionUpsertWithoutCommentsInput
    connect?: DiscussionWhereUniqueInput
    update?: XOR<XOR<DiscussionUpdateToOneWithWhereWithoutCommentsInput, DiscussionUpdateWithoutCommentsInput>, DiscussionUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type CommentUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutRepliesInput
    upsert?: CommentUpsertWithoutRepliesInput
    disconnect?: CommentWhereInput | boolean
    delete?: CommentWhereInput | boolean
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutRepliesInput, CommentUpdateWithoutRepliesInput>, CommentUncheckedUpdateWithoutRepliesInput>
  }

  export type CommentUpdateManyWithoutParentNestedInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutParentInput | CommentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutParentInput | CommentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutParentInput | CommentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutParentInput | CommentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutParentInput | CommentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutParentInput | CommentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type ItemCreateNestedOneWithoutPriceHistoriesInput = {
    create?: XOR<ItemCreateWithoutPriceHistoriesInput, ItemUncheckedCreateWithoutPriceHistoriesInput>
    connectOrCreate?: ItemCreateOrConnectWithoutPriceHistoriesInput
    connect?: ItemWhereUniqueInput
  }

  export type ItemUpdateOneRequiredWithoutPriceHistoriesNestedInput = {
    create?: XOR<ItemCreateWithoutPriceHistoriesInput, ItemUncheckedCreateWithoutPriceHistoriesInput>
    connectOrCreate?: ItemCreateOrConnectWithoutPriceHistoriesInput
    upsert?: ItemUpsertWithoutPriceHistoriesInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutPriceHistoriesInput, ItemUpdateWithoutPriceHistoriesInput>, ItemUncheckedUpdateWithoutPriceHistoriesInput>
  }

  export type ItemCreateNestedOneWithoutItemImagesInput = {
    create?: XOR<ItemCreateWithoutItemImagesInput, ItemUncheckedCreateWithoutItemImagesInput>
    connectOrCreate?: ItemCreateOrConnectWithoutItemImagesInput
    connect?: ItemWhereUniqueInput
  }

  export type ItemUpdateOneRequiredWithoutItemImagesNestedInput = {
    create?: XOR<ItemCreateWithoutItemImagesInput, ItemUncheckedCreateWithoutItemImagesInput>
    connectOrCreate?: ItemCreateOrConnectWithoutItemImagesInput
    upsert?: ItemUpsertWithoutItemImagesInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutItemImagesInput, ItemUpdateWithoutItemImagesInput>, ItemUncheckedUpdateWithoutItemImagesInput>
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutUserBadgesInput = {
    create?: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserBadgesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumBadgeTypeFieldUpdateOperationsInput = {
    set?: $Enums.BadgeType
  }

  export type UserUpdateOneRequiredWithoutUserBadgesNestedInput = {
    create?: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserBadgesInput
    upsert?: UserUpsertWithoutUserBadgesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserBadgesInput, UserUpdateWithoutUserBadgesInput>, UserUncheckedUpdateWithoutUserBadgesInput>
  }

  export type UserCreateNestedOneWithoutDonationRequestsInput = {
    create?: XOR<UserCreateWithoutDonationRequestsInput, UserUncheckedCreateWithoutDonationRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDonationRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type DonationDistributionCreateNestedManyWithoutDonationRequestInput = {
    create?: XOR<DonationDistributionCreateWithoutDonationRequestInput, DonationDistributionUncheckedCreateWithoutDonationRequestInput> | DonationDistributionCreateWithoutDonationRequestInput[] | DonationDistributionUncheckedCreateWithoutDonationRequestInput[]
    connectOrCreate?: DonationDistributionCreateOrConnectWithoutDonationRequestInput | DonationDistributionCreateOrConnectWithoutDonationRequestInput[]
    createMany?: DonationDistributionCreateManyDonationRequestInputEnvelope
    connect?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
  }

  export type DonationDistributionUncheckedCreateNestedManyWithoutDonationRequestInput = {
    create?: XOR<DonationDistributionCreateWithoutDonationRequestInput, DonationDistributionUncheckedCreateWithoutDonationRequestInput> | DonationDistributionCreateWithoutDonationRequestInput[] | DonationDistributionUncheckedCreateWithoutDonationRequestInput[]
    connectOrCreate?: DonationDistributionCreateOrConnectWithoutDonationRequestInput | DonationDistributionCreateOrConnectWithoutDonationRequestInput[]
    createMany?: DonationDistributionCreateManyDonationRequestInputEnvelope
    connect?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
  }

  export type EnumDonationUrgencyFieldUpdateOperationsInput = {
    set?: $Enums.DonationUrgency
  }

  export type EnumDonationRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.DonationRequestStatus
  }

  export type UserUpdateOneRequiredWithoutDonationRequestsNestedInput = {
    create?: XOR<UserCreateWithoutDonationRequestsInput, UserUncheckedCreateWithoutDonationRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDonationRequestsInput
    upsert?: UserUpsertWithoutDonationRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDonationRequestsInput, UserUpdateWithoutDonationRequestsInput>, UserUncheckedUpdateWithoutDonationRequestsInput>
  }

  export type DonationDistributionUpdateManyWithoutDonationRequestNestedInput = {
    create?: XOR<DonationDistributionCreateWithoutDonationRequestInput, DonationDistributionUncheckedCreateWithoutDonationRequestInput> | DonationDistributionCreateWithoutDonationRequestInput[] | DonationDistributionUncheckedCreateWithoutDonationRequestInput[]
    connectOrCreate?: DonationDistributionCreateOrConnectWithoutDonationRequestInput | DonationDistributionCreateOrConnectWithoutDonationRequestInput[]
    upsert?: DonationDistributionUpsertWithWhereUniqueWithoutDonationRequestInput | DonationDistributionUpsertWithWhereUniqueWithoutDonationRequestInput[]
    createMany?: DonationDistributionCreateManyDonationRequestInputEnvelope
    set?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    disconnect?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    delete?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    connect?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    update?: DonationDistributionUpdateWithWhereUniqueWithoutDonationRequestInput | DonationDistributionUpdateWithWhereUniqueWithoutDonationRequestInput[]
    updateMany?: DonationDistributionUpdateManyWithWhereWithoutDonationRequestInput | DonationDistributionUpdateManyWithWhereWithoutDonationRequestInput[]
    deleteMany?: DonationDistributionScalarWhereInput | DonationDistributionScalarWhereInput[]
  }

  export type DonationDistributionUncheckedUpdateManyWithoutDonationRequestNestedInput = {
    create?: XOR<DonationDistributionCreateWithoutDonationRequestInput, DonationDistributionUncheckedCreateWithoutDonationRequestInput> | DonationDistributionCreateWithoutDonationRequestInput[] | DonationDistributionUncheckedCreateWithoutDonationRequestInput[]
    connectOrCreate?: DonationDistributionCreateOrConnectWithoutDonationRequestInput | DonationDistributionCreateOrConnectWithoutDonationRequestInput[]
    upsert?: DonationDistributionUpsertWithWhereUniqueWithoutDonationRequestInput | DonationDistributionUpsertWithWhereUniqueWithoutDonationRequestInput[]
    createMany?: DonationDistributionCreateManyDonationRequestInputEnvelope
    set?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    disconnect?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    delete?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    connect?: DonationDistributionWhereUniqueInput | DonationDistributionWhereUniqueInput[]
    update?: DonationDistributionUpdateWithWhereUniqueWithoutDonationRequestInput | DonationDistributionUpdateWithWhereUniqueWithoutDonationRequestInput[]
    updateMany?: DonationDistributionUpdateManyWithWhereWithoutDonationRequestInput | DonationDistributionUpdateManyWithWhereWithoutDonationRequestInput[]
    deleteMany?: DonationDistributionScalarWhereInput | DonationDistributionScalarWhereInput[]
  }

  export type DonationRequestCreateNestedOneWithoutDonationDistributionsInput = {
    create?: XOR<DonationRequestCreateWithoutDonationDistributionsInput, DonationRequestUncheckedCreateWithoutDonationDistributionsInput>
    connectOrCreate?: DonationRequestCreateOrConnectWithoutDonationDistributionsInput
    connect?: DonationRequestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDonationDistributionsInput = {
    create?: XOR<UserCreateWithoutDonationDistributionsInput, UserUncheckedCreateWithoutDonationDistributionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDonationDistributionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumDistributionStatusFieldUpdateOperationsInput = {
    set?: $Enums.DistributionStatus
  }

  export type DonationRequestUpdateOneWithoutDonationDistributionsNestedInput = {
    create?: XOR<DonationRequestCreateWithoutDonationDistributionsInput, DonationRequestUncheckedCreateWithoutDonationDistributionsInput>
    connectOrCreate?: DonationRequestCreateOrConnectWithoutDonationDistributionsInput
    upsert?: DonationRequestUpsertWithoutDonationDistributionsInput
    disconnect?: DonationRequestWhereInput | boolean
    delete?: DonationRequestWhereInput | boolean
    connect?: DonationRequestWhereUniqueInput
    update?: XOR<XOR<DonationRequestUpdateToOneWithWhereWithoutDonationDistributionsInput, DonationRequestUpdateWithoutDonationDistributionsInput>, DonationRequestUncheckedUpdateWithoutDonationDistributionsInput>
  }

  export type UserUpdateOneRequiredWithoutDonationDistributionsNestedInput = {
    create?: XOR<UserCreateWithoutDonationDistributionsInput, UserUncheckedCreateWithoutDonationDistributionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDonationDistributionsInput
    upsert?: UserUpsertWithoutDonationDistributionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDonationDistributionsInput, UserUpdateWithoutDonationDistributionsInput>, UserUncheckedUpdateWithoutDonationDistributionsInput>
  }

  export type UserCreateNestedOneWithoutRecommendationsInput = {
    create?: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecommendationsInput
    connect?: UserWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutRecommendationsInput = {
    create?: XOR<ItemCreateWithoutRecommendationsInput, ItemUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutRecommendationsInput
    connect?: ItemWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumRecommendationReasonFieldUpdateOperationsInput = {
    set?: $Enums.RecommendationReason
  }

  export type UserUpdateOneRequiredWithoutRecommendationsNestedInput = {
    create?: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecommendationsInput
    upsert?: UserUpsertWithoutRecommendationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRecommendationsInput, UserUpdateWithoutRecommendationsInput>, UserUncheckedUpdateWithoutRecommendationsInput>
  }

  export type ItemUpdateOneRequiredWithoutRecommendationsNestedInput = {
    create?: XOR<ItemCreateWithoutRecommendationsInput, ItemUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutRecommendationsInput
    upsert?: ItemUpsertWithoutRecommendationsInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutRecommendationsInput, ItemUpdateWithoutRecommendationsInput>, ItemUncheckedUpdateWithoutRecommendationsInput>
  }

  export type UserCreateNestedOneWithoutAcademicPreferencesInput = {
    create?: XOR<UserCreateWithoutAcademicPreferencesInput, UserUncheckedCreateWithoutAcademicPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAcademicPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type AcademicDataCreateNestedOneWithoutAcademicPreferencesInput = {
    create?: XOR<AcademicDataCreateWithoutAcademicPreferencesInput, AcademicDataUncheckedCreateWithoutAcademicPreferencesInput>
    connectOrCreate?: AcademicDataCreateOrConnectWithoutAcademicPreferencesInput
    connect?: AcademicDataWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAcademicPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutAcademicPreferencesInput, UserUncheckedCreateWithoutAcademicPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAcademicPreferencesInput
    upsert?: UserUpsertWithoutAcademicPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAcademicPreferencesInput, UserUpdateWithoutAcademicPreferencesInput>, UserUncheckedUpdateWithoutAcademicPreferencesInput>
  }

  export type AcademicDataUpdateOneRequiredWithoutAcademicPreferencesNestedInput = {
    create?: XOR<AcademicDataCreateWithoutAcademicPreferencesInput, AcademicDataUncheckedCreateWithoutAcademicPreferencesInput>
    connectOrCreate?: AcademicDataCreateOrConnectWithoutAcademicPreferencesInput
    upsert?: AcademicDataUpsertWithoutAcademicPreferencesInput
    connect?: AcademicDataWhereUniqueInput
    update?: XOR<XOR<AcademicDataUpdateToOneWithWhereWithoutAcademicPreferencesInput, AcademicDataUpdateWithoutAcademicPreferencesInput>, AcademicDataUncheckedUpdateWithoutAcademicPreferencesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumItemConditionFilter<$PrismaModel = never> = {
    equals?: $Enums.ItemCondition | EnumItemConditionFieldRefInput<$PrismaModel>
    in?: $Enums.ItemCondition[]
    notIn?: $Enums.ItemCondition[]
    not?: NestedEnumItemConditionFilter<$PrismaModel> | $Enums.ItemCondition
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumItemConditionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ItemCondition | EnumItemConditionFieldRefInput<$PrismaModel>
    in?: $Enums.ItemCondition[]
    notIn?: $Enums.ItemCondition[]
    not?: NestedEnumItemConditionWithAggregatesFilter<$PrismaModel> | $Enums.ItemCondition
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumItemConditionFilter<$PrismaModel>
    _max?: NestedEnumItemConditionFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[]
    notIn?: $Enums.TransactionStatus[]
    not?: NestedEnumTransactionStatusFilter<$PrismaModel> | $Enums.TransactionStatus
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[]
    notIn?: $Enums.TransactionStatus[]
    not?: NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransactionStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumBarterStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BarterStatus | EnumBarterStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BarterStatus[]
    notIn?: $Enums.BarterStatus[]
    not?: NestedEnumBarterStatusFilter<$PrismaModel> | $Enums.BarterStatus
  }

  export type NestedEnumBarterStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BarterStatus | EnumBarterStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BarterStatus[]
    notIn?: $Enums.BarterStatus[]
    not?: NestedEnumBarterStatusWithAggregatesFilter<$PrismaModel> | $Enums.BarterStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBarterStatusFilter<$PrismaModel>
    _max?: NestedEnumBarterStatusFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumWtbUrgencyFilter<$PrismaModel = never> = {
    equals?: $Enums.WtbUrgency | EnumWtbUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.WtbUrgency[]
    notIn?: $Enums.WtbUrgency[]
    not?: NestedEnumWtbUrgencyFilter<$PrismaModel> | $Enums.WtbUrgency
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumWtbUrgencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WtbUrgency | EnumWtbUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.WtbUrgency[]
    notIn?: $Enums.WtbUrgency[]
    not?: NestedEnumWtbUrgencyWithAggregatesFilter<$PrismaModel> | $Enums.WtbUrgency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWtbUrgencyFilter<$PrismaModel>
    _max?: NestedEnumWtbUrgencyFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumBadgeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeType | EnumBadgeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeType[]
    notIn?: $Enums.BadgeType[]
    not?: NestedEnumBadgeTypeFilter<$PrismaModel> | $Enums.BadgeType
  }

  export type NestedEnumBadgeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeType | EnumBadgeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeType[]
    notIn?: $Enums.BadgeType[]
    not?: NestedEnumBadgeTypeWithAggregatesFilter<$PrismaModel> | $Enums.BadgeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBadgeTypeFilter<$PrismaModel>
    _max?: NestedEnumBadgeTypeFilter<$PrismaModel>
  }

  export type NestedEnumDonationUrgencyFilter<$PrismaModel = never> = {
    equals?: $Enums.DonationUrgency | EnumDonationUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.DonationUrgency[]
    notIn?: $Enums.DonationUrgency[]
    not?: NestedEnumDonationUrgencyFilter<$PrismaModel> | $Enums.DonationUrgency
  }

  export type NestedEnumDonationRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DonationRequestStatus | EnumDonationRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DonationRequestStatus[]
    notIn?: $Enums.DonationRequestStatus[]
    not?: NestedEnumDonationRequestStatusFilter<$PrismaModel> | $Enums.DonationRequestStatus
  }

  export type NestedEnumDonationUrgencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DonationUrgency | EnumDonationUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.DonationUrgency[]
    notIn?: $Enums.DonationUrgency[]
    not?: NestedEnumDonationUrgencyWithAggregatesFilter<$PrismaModel> | $Enums.DonationUrgency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDonationUrgencyFilter<$PrismaModel>
    _max?: NestedEnumDonationUrgencyFilter<$PrismaModel>
  }

  export type NestedEnumDonationRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DonationRequestStatus | EnumDonationRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DonationRequestStatus[]
    notIn?: $Enums.DonationRequestStatus[]
    not?: NestedEnumDonationRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.DonationRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDonationRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumDonationRequestStatusFilter<$PrismaModel>
  }

  export type NestedEnumDistributionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DistributionStatus | EnumDistributionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DistributionStatus[]
    notIn?: $Enums.DistributionStatus[]
    not?: NestedEnumDistributionStatusFilter<$PrismaModel> | $Enums.DistributionStatus
  }

  export type NestedEnumDistributionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DistributionStatus | EnumDistributionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DistributionStatus[]
    notIn?: $Enums.DistributionStatus[]
    not?: NestedEnumDistributionStatusWithAggregatesFilter<$PrismaModel> | $Enums.DistributionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDistributionStatusFilter<$PrismaModel>
    _max?: NestedEnumDistributionStatusFilter<$PrismaModel>
  }

  export type NestedEnumRecommendationReasonFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationReason | EnumRecommendationReasonFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationReason[]
    notIn?: $Enums.RecommendationReason[]
    not?: NestedEnumRecommendationReasonFilter<$PrismaModel> | $Enums.RecommendationReason
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumRecommendationReasonWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationReason | EnumRecommendationReasonFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationReason[]
    notIn?: $Enums.RecommendationReason[]
    not?: NestedEnumRecommendationReasonWithAggregatesFilter<$PrismaModel> | $Enums.RecommendationReason
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRecommendationReasonFilter<$PrismaModel>
    _max?: NestedEnumRecommendationReasonFilter<$PrismaModel>
  }

  export type UserCreateWithoutCartsInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCartsInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCartsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCartsInput, UserUncheckedCreateWithoutCartsInput>
  }

  export type ItemCreateWithoutCartsInput = {
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutItemsInput
    itemImages?: ItemImageCreateNestedManyWithoutItemInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequestedItemInput
    wishlists?: WishlistCreateNestedManyWithoutItemInput
    transactions?: TransactionCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryCreateNestedManyWithoutItemInput
    recommendations?: RecommendationCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutCartsInput = {
    id?: number
    userId: number
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    itemImages?: ItemImageUncheckedCreateNestedManyWithoutItemInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequestedItemInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutItemInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryUncheckedCreateNestedManyWithoutItemInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutCartsInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutCartsInput, ItemUncheckedCreateWithoutCartsInput>
  }

  export type UserUpsertWithoutCartsInput = {
    update: XOR<UserUpdateWithoutCartsInput, UserUncheckedUpdateWithoutCartsInput>
    create: XOR<UserCreateWithoutCartsInput, UserUncheckedCreateWithoutCartsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCartsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCartsInput, UserUncheckedUpdateWithoutCartsInput>
  }

  export type UserUpdateWithoutCartsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCartsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ItemUpsertWithoutCartsInput = {
    update: XOR<ItemUpdateWithoutCartsInput, ItemUncheckedUpdateWithoutCartsInput>
    create: XOR<ItemCreateWithoutCartsInput, ItemUncheckedCreateWithoutCartsInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutCartsInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutCartsInput, ItemUncheckedUpdateWithoutCartsInput>
  }

  export type ItemUpdateWithoutCartsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutItemsNestedInput
    itemImages?: ItemImageUpdateManyWithoutItemNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequestedItemNestedInput
    wishlists?: WishlistUpdateManyWithoutItemNestedInput
    transactions?: TransactionUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutCartsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    itemImages?: ItemImageUncheckedUpdateManyWithoutItemNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequestedItemNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutItemNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUncheckedUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemCreateWithoutUserInput = {
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    itemImages?: ItemImageCreateNestedManyWithoutItemInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequestedItemInput
    wishlists?: WishlistCreateNestedManyWithoutItemInput
    transactions?: TransactionCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryCreateNestedManyWithoutItemInput
    recommendations?: RecommendationCreateNestedManyWithoutItemInput
    carts?: CartCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    itemImages?: ItemImageUncheckedCreateNestedManyWithoutItemInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequestedItemInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutItemInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryUncheckedCreateNestedManyWithoutItemInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutItemInput
    carts?: CartUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutUserInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutUserInput, ItemUncheckedCreateWithoutUserInput>
  }

  export type ItemCreateManyUserInputEnvelope = {
    data: ItemCreateManyUserInput | ItemCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BarterRequestCreateWithoutRequesterInput = {
    itemOwnerId: number
    offeredItemIds: string
    message?: string | null
    status?: $Enums.BarterStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requestedItem: ItemCreateNestedOneWithoutBarterRequestsInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutBarterRequestInput
  }

  export type BarterRequestUncheckedCreateWithoutRequesterInput = {
    id?: number
    itemOwnerId: number
    requestedItemId: number
    offeredItemIds: string
    message?: string | null
    status?: $Enums.BarterStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutBarterRequestInput
  }

  export type BarterRequestCreateOrConnectWithoutRequesterInput = {
    where: BarterRequestWhereUniqueInput
    create: XOR<BarterRequestCreateWithoutRequesterInput, BarterRequestUncheckedCreateWithoutRequesterInput>
  }

  export type BarterRequestCreateManyRequesterInputEnvelope = {
    data: BarterRequestCreateManyRequesterInput | BarterRequestCreateManyRequesterInput[]
    skipDuplicates?: boolean
  }

  export type BarterNegotiationCreateWithoutSenderInput = {
    message: string
    isRead?: boolean
    createdAt?: Date | string
    barterRequest: BarterRequestCreateNestedOneWithoutBarterNegotiationsInput
  }

  export type BarterNegotiationUncheckedCreateWithoutSenderInput = {
    id?: number
    barterRequestId: number
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type BarterNegotiationCreateOrConnectWithoutSenderInput = {
    where: BarterNegotiationWhereUniqueInput
    create: XOR<BarterNegotiationCreateWithoutSenderInput, BarterNegotiationUncheckedCreateWithoutSenderInput>
  }

  export type BarterNegotiationCreateManySenderInputEnvelope = {
    data: BarterNegotiationCreateManySenderInput | BarterNegotiationCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type WishlistCreateWithoutUserInput = {
    createdAt?: Date | string
    item: ItemCreateNestedOneWithoutWishlistsInput
  }

  export type WishlistUncheckedCreateWithoutUserInput = {
    id?: number
    itemId: number
    createdAt?: Date | string
  }

  export type WishlistCreateOrConnectWithoutUserInput = {
    where: WishlistWhereUniqueInput
    create: XOR<WishlistCreateWithoutUserInput, WishlistUncheckedCreateWithoutUserInput>
  }

  export type WishlistCreateManyUserInputEnvelope = {
    data: WishlistCreateManyUserInput | WishlistCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WtbRequestCreateWithoutUserInput = {
    title: string
    description: string
    maxPrice?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    preferredCondition?: string | null
    location?: string | null
    urgency?: $Enums.WtbUrgency
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wtbResponses?: WtbResponseCreateNestedManyWithoutWtbRequestInput
  }

  export type WtbRequestUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    description: string
    maxPrice?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    preferredCondition?: string | null
    location?: string | null
    urgency?: $Enums.WtbUrgency
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutWtbRequestInput
  }

  export type WtbRequestCreateOrConnectWithoutUserInput = {
    where: WtbRequestWhereUniqueInput
    create: XOR<WtbRequestCreateWithoutUserInput, WtbRequestUncheckedCreateWithoutUserInput>
  }

  export type WtbRequestCreateManyUserInputEnvelope = {
    data: WtbRequestCreateManyUserInput | WtbRequestCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WtbResponseCreateWithoutResponderInput = {
    message: string
    offeredPrice?: Decimal | DecimalJsLike | number | string | null
    itemImages?: string | null
    contactInfo?: string | null
    isRead?: boolean
    createdAt?: Date | string
    wtbRequest: WtbRequestCreateNestedOneWithoutWtbResponsesInput
  }

  export type WtbResponseUncheckedCreateWithoutResponderInput = {
    id?: number
    wtbRequestId: number
    message: string
    offeredPrice?: Decimal | DecimalJsLike | number | string | null
    itemImages?: string | null
    contactInfo?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type WtbResponseCreateOrConnectWithoutResponderInput = {
    where: WtbResponseWhereUniqueInput
    create: XOR<WtbResponseCreateWithoutResponderInput, WtbResponseUncheckedCreateWithoutResponderInput>
  }

  export type WtbResponseCreateManyResponderInputEnvelope = {
    data: WtbResponseCreateManyResponderInput | WtbResponseCreateManyResponderInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutBuyerInput = {
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.TransactionStatus
    paymentMethod?: string | null
    paymentStatus?: $Enums.PaymentStatus
    codLocation?: string | null
    notes?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    seller: UserCreateNestedOneWithoutSellerTransactionsInput
    item: ItemCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutBuyerInput = {
    id?: number
    sellerId: number
    itemId: number
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.TransactionStatus
    paymentMethod?: string | null
    paymentStatus?: $Enums.PaymentStatus
    codLocation?: string | null
    notes?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutBuyerInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutBuyerInput, TransactionUncheckedCreateWithoutBuyerInput>
  }

  export type TransactionCreateManyBuyerInputEnvelope = {
    data: TransactionCreateManyBuyerInput | TransactionCreateManyBuyerInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutSellerInput = {
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.TransactionStatus
    paymentMethod?: string | null
    paymentStatus?: $Enums.PaymentStatus
    codLocation?: string | null
    notes?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer: UserCreateNestedOneWithoutBuyerTransactionsInput
    item: ItemCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutSellerInput = {
    id?: number
    buyerId: number
    itemId: number
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.TransactionStatus
    paymentMethod?: string | null
    paymentStatus?: $Enums.PaymentStatus
    codLocation?: string | null
    notes?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutSellerInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutSellerInput, TransactionUncheckedCreateWithoutSellerInput>
  }

  export type TransactionCreateManySellerInputEnvelope = {
    data: TransactionCreateManySellerInput | TransactionCreateManySellerInput[]
    skipDuplicates?: boolean
  }

  export type DiscussionCreateWithoutUserInput = {
    title: string
    content: string
    category?: string | null
    tags?: string | null
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    academicData?: AcademicDataCreateNestedOneWithoutDiscussionsInput
    comments?: CommentCreateNestedManyWithoutDiscussionInput
  }

  export type DiscussionUncheckedCreateWithoutUserInput = {
    id?: number
    academicDataId?: number | null
    title: string
    content: string
    category?: string | null
    tags?: string | null
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutDiscussionInput
  }

  export type DiscussionCreateOrConnectWithoutUserInput = {
    where: DiscussionWhereUniqueInput
    create: XOR<DiscussionCreateWithoutUserInput, DiscussionUncheckedCreateWithoutUserInput>
  }

  export type DiscussionCreateManyUserInputEnvelope = {
    data: DiscussionCreateManyUserInput | DiscussionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    content: string
    isEdited?: boolean
    editedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    discussion: DiscussionCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: number
    discussionId: number
    parentId?: number | null
    content: string
    isEdited?: boolean
    editedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    type: $Enums.NotificationType
    title: string
    message: string
    relatedId?: number | null
    relatedType?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    type: $Enums.NotificationType
    title: string
    message: string
    relatedId?: number | null
    relatedType?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserBadgeCreateWithoutUserInput = {
    badgeType: $Enums.BadgeType
    title: string
    description?: string | null
    iconUrl?: string | null
    earnedAt?: Date | string
  }

  export type UserBadgeUncheckedCreateWithoutUserInput = {
    id?: number
    badgeType: $Enums.BadgeType
    title: string
    description?: string | null
    iconUrl?: string | null
    earnedAt?: Date | string
  }

  export type UserBadgeCreateOrConnectWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    create: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeCreateManyUserInputEnvelope = {
    data: UserBadgeCreateManyUserInput | UserBadgeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DonationRequestCreateWithoutUserInput = {
    title: string
    description: string
    category?: string | null
    urgency?: $Enums.DonationUrgency
    status?: $Enums.DonationRequestStatus
    maxQuantity?: number | null
    receivedCount?: number
    location?: string | null
    contactInfo?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonationRequestInput
  }

  export type DonationRequestUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    description: string
    category?: string | null
    urgency?: $Enums.DonationUrgency
    status?: $Enums.DonationRequestStatus
    maxQuantity?: number | null
    receivedCount?: number
    location?: string | null
    contactInfo?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonationRequestInput
  }

  export type DonationRequestCreateOrConnectWithoutUserInput = {
    where: DonationRequestWhereUniqueInput
    create: XOR<DonationRequestCreateWithoutUserInput, DonationRequestUncheckedCreateWithoutUserInput>
  }

  export type DonationRequestCreateManyUserInputEnvelope = {
    data: DonationRequestCreateManyUserInput | DonationRequestCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DonationDistributionCreateWithoutDonorInput = {
    recipientId: number
    itemTitle: string
    itemDescription?: string | null
    quantity?: number
    status?: $Enums.DistributionStatus
    distributedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    donationRequest?: DonationRequestCreateNestedOneWithoutDonationDistributionsInput
  }

  export type DonationDistributionUncheckedCreateWithoutDonorInput = {
    id?: number
    donationRequestId?: number | null
    recipientId: number
    itemTitle: string
    itemDescription?: string | null
    quantity?: number
    status?: $Enums.DistributionStatus
    distributedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DonationDistributionCreateOrConnectWithoutDonorInput = {
    where: DonationDistributionWhereUniqueInput
    create: XOR<DonationDistributionCreateWithoutDonorInput, DonationDistributionUncheckedCreateWithoutDonorInput>
  }

  export type DonationDistributionCreateManyDonorInputEnvelope = {
    data: DonationDistributionCreateManyDonorInput | DonationDistributionCreateManyDonorInput[]
    skipDuplicates?: boolean
  }

  export type RecommendationCreateWithoutUserInput = {
    score: number
    reason: $Enums.RecommendationReason
    createdAt?: Date | string
    item: ItemCreateNestedOneWithoutRecommendationsInput
  }

  export type RecommendationUncheckedCreateWithoutUserInput = {
    id?: number
    itemId: number
    score: number
    reason: $Enums.RecommendationReason
    createdAt?: Date | string
  }

  export type RecommendationCreateOrConnectWithoutUserInput = {
    where: RecommendationWhereUniqueInput
    create: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput>
  }

  export type RecommendationCreateManyUserInputEnvelope = {
    data: RecommendationCreateManyUserInput | RecommendationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AcademicPreferenceCreateWithoutUserInput = {
    priority?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    academicData: AcademicDataCreateNestedOneWithoutAcademicPreferencesInput
  }

  export type AcademicPreferenceUncheckedCreateWithoutUserInput = {
    id?: number
    academicDataId: number
    priority?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicPreferenceCreateOrConnectWithoutUserInput = {
    where: AcademicPreferenceWhereUniqueInput
    create: XOR<AcademicPreferenceCreateWithoutUserInput, AcademicPreferenceUncheckedCreateWithoutUserInput>
  }

  export type AcademicPreferenceCreateManyUserInputEnvelope = {
    data: AcademicPreferenceCreateManyUserInput | AcademicPreferenceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CartCreateWithoutUserInput = {
    quantity: number
    item: ItemCreateNestedOneWithoutCartsInput
  }

  export type CartUncheckedCreateWithoutUserInput = {
    id?: number
    itemId: number
    quantity: number
  }

  export type CartCreateOrConnectWithoutUserInput = {
    where: CartWhereUniqueInput
    create: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput>
  }

  export type CartCreateManyUserInputEnvelope = {
    data: CartCreateManyUserInput | CartCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ItemUpsertWithWhereUniqueWithoutUserInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutUserInput, ItemUncheckedUpdateWithoutUserInput>
    create: XOR<ItemCreateWithoutUserInput, ItemUncheckedCreateWithoutUserInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutUserInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutUserInput, ItemUncheckedUpdateWithoutUserInput>
  }

  export type ItemUpdateManyWithWhereWithoutUserInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutUserInput>
  }

  export type ItemScalarWhereInput = {
    AND?: ItemScalarWhereInput | ItemScalarWhereInput[]
    OR?: ItemScalarWhereInput[]
    NOT?: ItemScalarWhereInput | ItemScalarWhereInput[]
    id?: IntFilter<"Item"> | number
    userId?: IntFilter<"Item"> | number
    title?: StringFilter<"Item"> | string
    description?: StringFilter<"Item"> | string
    price?: DecimalFilter<"Item"> | Decimal | DecimalJsLike | number | string
    category?: StringFilter<"Item"> | string
    condition?: EnumItemConditionFilter<"Item"> | $Enums.ItemCondition
    conditionDetail?: StringNullableFilter<"Item"> | string | null
    isDonation?: BoolFilter<"Item"> | boolean
    isBundle?: BoolFilter<"Item"> | boolean
    bundleItems?: StringNullableFilter<"Item"> | string | null
    location?: StringNullableFilter<"Item"> | string | null
    isAvailable?: BoolFilter<"Item"> | boolean
    viewCount?: IntFilter<"Item"> | number
    favoriteCount?: IntFilter<"Item"> | number
    isActive?: BoolFilter<"Item"> | boolean
    createdAt?: DateTimeFilter<"Item"> | Date | string
    updatedAt?: DateTimeFilter<"Item"> | Date | string
  }

  export type BarterRequestUpsertWithWhereUniqueWithoutRequesterInput = {
    where: BarterRequestWhereUniqueInput
    update: XOR<BarterRequestUpdateWithoutRequesterInput, BarterRequestUncheckedUpdateWithoutRequesterInput>
    create: XOR<BarterRequestCreateWithoutRequesterInput, BarterRequestUncheckedCreateWithoutRequesterInput>
  }

  export type BarterRequestUpdateWithWhereUniqueWithoutRequesterInput = {
    where: BarterRequestWhereUniqueInput
    data: XOR<BarterRequestUpdateWithoutRequesterInput, BarterRequestUncheckedUpdateWithoutRequesterInput>
  }

  export type BarterRequestUpdateManyWithWhereWithoutRequesterInput = {
    where: BarterRequestScalarWhereInput
    data: XOR<BarterRequestUpdateManyMutationInput, BarterRequestUncheckedUpdateManyWithoutRequesterInput>
  }

  export type BarterRequestScalarWhereInput = {
    AND?: BarterRequestScalarWhereInput | BarterRequestScalarWhereInput[]
    OR?: BarterRequestScalarWhereInput[]
    NOT?: BarterRequestScalarWhereInput | BarterRequestScalarWhereInput[]
    id?: IntFilter<"BarterRequest"> | number
    requesterId?: IntFilter<"BarterRequest"> | number
    itemOwnerId?: IntFilter<"BarterRequest"> | number
    requestedItemId?: IntFilter<"BarterRequest"> | number
    offeredItemIds?: StringFilter<"BarterRequest"> | string
    message?: StringNullableFilter<"BarterRequest"> | string | null
    status?: EnumBarterStatusFilter<"BarterRequest"> | $Enums.BarterStatus
    createdAt?: DateTimeFilter<"BarterRequest"> | Date | string
    updatedAt?: DateTimeFilter<"BarterRequest"> | Date | string
  }

  export type BarterNegotiationUpsertWithWhereUniqueWithoutSenderInput = {
    where: BarterNegotiationWhereUniqueInput
    update: XOR<BarterNegotiationUpdateWithoutSenderInput, BarterNegotiationUncheckedUpdateWithoutSenderInput>
    create: XOR<BarterNegotiationCreateWithoutSenderInput, BarterNegotiationUncheckedCreateWithoutSenderInput>
  }

  export type BarterNegotiationUpdateWithWhereUniqueWithoutSenderInput = {
    where: BarterNegotiationWhereUniqueInput
    data: XOR<BarterNegotiationUpdateWithoutSenderInput, BarterNegotiationUncheckedUpdateWithoutSenderInput>
  }

  export type BarterNegotiationUpdateManyWithWhereWithoutSenderInput = {
    where: BarterNegotiationScalarWhereInput
    data: XOR<BarterNegotiationUpdateManyMutationInput, BarterNegotiationUncheckedUpdateManyWithoutSenderInput>
  }

  export type BarterNegotiationScalarWhereInput = {
    AND?: BarterNegotiationScalarWhereInput | BarterNegotiationScalarWhereInput[]
    OR?: BarterNegotiationScalarWhereInput[]
    NOT?: BarterNegotiationScalarWhereInput | BarterNegotiationScalarWhereInput[]
    id?: IntFilter<"BarterNegotiation"> | number
    barterRequestId?: IntFilter<"BarterNegotiation"> | number
    senderId?: IntFilter<"BarterNegotiation"> | number
    message?: StringFilter<"BarterNegotiation"> | string
    isRead?: BoolFilter<"BarterNegotiation"> | boolean
    createdAt?: DateTimeFilter<"BarterNegotiation"> | Date | string
  }

  export type WishlistUpsertWithWhereUniqueWithoutUserInput = {
    where: WishlistWhereUniqueInput
    update: XOR<WishlistUpdateWithoutUserInput, WishlistUncheckedUpdateWithoutUserInput>
    create: XOR<WishlistCreateWithoutUserInput, WishlistUncheckedCreateWithoutUserInput>
  }

  export type WishlistUpdateWithWhereUniqueWithoutUserInput = {
    where: WishlistWhereUniqueInput
    data: XOR<WishlistUpdateWithoutUserInput, WishlistUncheckedUpdateWithoutUserInput>
  }

  export type WishlistUpdateManyWithWhereWithoutUserInput = {
    where: WishlistScalarWhereInput
    data: XOR<WishlistUpdateManyMutationInput, WishlistUncheckedUpdateManyWithoutUserInput>
  }

  export type WishlistScalarWhereInput = {
    AND?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
    OR?: WishlistScalarWhereInput[]
    NOT?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
    id?: IntFilter<"Wishlist"> | number
    userId?: IntFilter<"Wishlist"> | number
    itemId?: IntFilter<"Wishlist"> | number
    createdAt?: DateTimeFilter<"Wishlist"> | Date | string
  }

  export type WtbRequestUpsertWithWhereUniqueWithoutUserInput = {
    where: WtbRequestWhereUniqueInput
    update: XOR<WtbRequestUpdateWithoutUserInput, WtbRequestUncheckedUpdateWithoutUserInput>
    create: XOR<WtbRequestCreateWithoutUserInput, WtbRequestUncheckedCreateWithoutUserInput>
  }

  export type WtbRequestUpdateWithWhereUniqueWithoutUserInput = {
    where: WtbRequestWhereUniqueInput
    data: XOR<WtbRequestUpdateWithoutUserInput, WtbRequestUncheckedUpdateWithoutUserInput>
  }

  export type WtbRequestUpdateManyWithWhereWithoutUserInput = {
    where: WtbRequestScalarWhereInput
    data: XOR<WtbRequestUpdateManyMutationInput, WtbRequestUncheckedUpdateManyWithoutUserInput>
  }

  export type WtbRequestScalarWhereInput = {
    AND?: WtbRequestScalarWhereInput | WtbRequestScalarWhereInput[]
    OR?: WtbRequestScalarWhereInput[]
    NOT?: WtbRequestScalarWhereInput | WtbRequestScalarWhereInput[]
    id?: IntFilter<"WtbRequest"> | number
    userId?: IntFilter<"WtbRequest"> | number
    title?: StringFilter<"WtbRequest"> | string
    description?: StringFilter<"WtbRequest"> | string
    maxPrice?: DecimalNullableFilter<"WtbRequest"> | Decimal | DecimalJsLike | number | string | null
    category?: StringNullableFilter<"WtbRequest"> | string | null
    preferredCondition?: StringNullableFilter<"WtbRequest"> | string | null
    location?: StringNullableFilter<"WtbRequest"> | string | null
    urgency?: EnumWtbUrgencyFilter<"WtbRequest"> | $Enums.WtbUrgency
    isActive?: BoolFilter<"WtbRequest"> | boolean
    expiresAt?: DateTimeNullableFilter<"WtbRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"WtbRequest"> | Date | string
    updatedAt?: DateTimeFilter<"WtbRequest"> | Date | string
  }

  export type WtbResponseUpsertWithWhereUniqueWithoutResponderInput = {
    where: WtbResponseWhereUniqueInput
    update: XOR<WtbResponseUpdateWithoutResponderInput, WtbResponseUncheckedUpdateWithoutResponderInput>
    create: XOR<WtbResponseCreateWithoutResponderInput, WtbResponseUncheckedCreateWithoutResponderInput>
  }

  export type WtbResponseUpdateWithWhereUniqueWithoutResponderInput = {
    where: WtbResponseWhereUniqueInput
    data: XOR<WtbResponseUpdateWithoutResponderInput, WtbResponseUncheckedUpdateWithoutResponderInput>
  }

  export type WtbResponseUpdateManyWithWhereWithoutResponderInput = {
    where: WtbResponseScalarWhereInput
    data: XOR<WtbResponseUpdateManyMutationInput, WtbResponseUncheckedUpdateManyWithoutResponderInput>
  }

  export type WtbResponseScalarWhereInput = {
    AND?: WtbResponseScalarWhereInput | WtbResponseScalarWhereInput[]
    OR?: WtbResponseScalarWhereInput[]
    NOT?: WtbResponseScalarWhereInput | WtbResponseScalarWhereInput[]
    id?: IntFilter<"WtbResponse"> | number
    wtbRequestId?: IntFilter<"WtbResponse"> | number
    responderId?: IntFilter<"WtbResponse"> | number
    message?: StringFilter<"WtbResponse"> | string
    offeredPrice?: DecimalNullableFilter<"WtbResponse"> | Decimal | DecimalJsLike | number | string | null
    itemImages?: StringNullableFilter<"WtbResponse"> | string | null
    contactInfo?: StringNullableFilter<"WtbResponse"> | string | null
    isRead?: BoolFilter<"WtbResponse"> | boolean
    createdAt?: DateTimeFilter<"WtbResponse"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutBuyerInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutBuyerInput, TransactionUncheckedUpdateWithoutBuyerInput>
    create: XOR<TransactionCreateWithoutBuyerInput, TransactionUncheckedCreateWithoutBuyerInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutBuyerInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutBuyerInput, TransactionUncheckedUpdateWithoutBuyerInput>
  }

  export type TransactionUpdateManyWithWhereWithoutBuyerInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutBuyerInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: IntFilter<"Transaction"> | number
    buyerId?: IntFilter<"Transaction"> | number
    sellerId?: IntFilter<"Transaction"> | number
    itemId?: IntFilter<"Transaction"> | number
    amount?: DecimalFilter<"Transaction"> | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFilter<"Transaction"> | $Enums.TransactionStatus
    paymentMethod?: StringNullableFilter<"Transaction"> | string | null
    paymentStatus?: EnumPaymentStatusFilter<"Transaction"> | $Enums.PaymentStatus
    codLocation?: StringNullableFilter<"Transaction"> | string | null
    notes?: StringNullableFilter<"Transaction"> | string | null
    completedAt?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutSellerInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutSellerInput, TransactionUncheckedUpdateWithoutSellerInput>
    create: XOR<TransactionCreateWithoutSellerInput, TransactionUncheckedCreateWithoutSellerInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutSellerInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutSellerInput, TransactionUncheckedUpdateWithoutSellerInput>
  }

  export type TransactionUpdateManyWithWhereWithoutSellerInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutSellerInput>
  }

  export type DiscussionUpsertWithWhereUniqueWithoutUserInput = {
    where: DiscussionWhereUniqueInput
    update: XOR<DiscussionUpdateWithoutUserInput, DiscussionUncheckedUpdateWithoutUserInput>
    create: XOR<DiscussionCreateWithoutUserInput, DiscussionUncheckedCreateWithoutUserInput>
  }

  export type DiscussionUpdateWithWhereUniqueWithoutUserInput = {
    where: DiscussionWhereUniqueInput
    data: XOR<DiscussionUpdateWithoutUserInput, DiscussionUncheckedUpdateWithoutUserInput>
  }

  export type DiscussionUpdateManyWithWhereWithoutUserInput = {
    where: DiscussionScalarWhereInput
    data: XOR<DiscussionUpdateManyMutationInput, DiscussionUncheckedUpdateManyWithoutUserInput>
  }

  export type DiscussionScalarWhereInput = {
    AND?: DiscussionScalarWhereInput | DiscussionScalarWhereInput[]
    OR?: DiscussionScalarWhereInput[]
    NOT?: DiscussionScalarWhereInput | DiscussionScalarWhereInput[]
    id?: IntFilter<"Discussion"> | number
    userId?: IntFilter<"Discussion"> | number
    academicDataId?: IntNullableFilter<"Discussion"> | number | null
    title?: StringFilter<"Discussion"> | string
    content?: StringFilter<"Discussion"> | string
    category?: StringNullableFilter<"Discussion"> | string | null
    tags?: StringNullableFilter<"Discussion"> | string | null
    isPinned?: BoolFilter<"Discussion"> | boolean
    isLocked?: BoolFilter<"Discussion"> | boolean
    viewCount?: IntFilter<"Discussion"> | number
    replyCount?: IntFilter<"Discussion"> | number
    lastReplyAt?: DateTimeNullableFilter<"Discussion"> | Date | string | null
    createdAt?: DateTimeFilter<"Discussion"> | Date | string
    updatedAt?: DateTimeFilter<"Discussion"> | Date | string
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: IntFilter<"Comment"> | number
    discussionId?: IntFilter<"Comment"> | number
    userId?: IntFilter<"Comment"> | number
    parentId?: IntNullableFilter<"Comment"> | number | null
    content?: StringFilter<"Comment"> | string
    isEdited?: BoolFilter<"Comment"> | boolean
    editedAt?: DateTimeNullableFilter<"Comment"> | Date | string | null
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    relatedId?: IntNullableFilter<"Notification"> | number | null
    relatedType?: StringNullableFilter<"Notification"> | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type UserBadgeUpsertWithWhereUniqueWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    update: XOR<UserBadgeUpdateWithoutUserInput, UserBadgeUncheckedUpdateWithoutUserInput>
    create: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeUpdateWithWhereUniqueWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    data: XOR<UserBadgeUpdateWithoutUserInput, UserBadgeUncheckedUpdateWithoutUserInput>
  }

  export type UserBadgeUpdateManyWithWhereWithoutUserInput = {
    where: UserBadgeScalarWhereInput
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyWithoutUserInput>
  }

  export type UserBadgeScalarWhereInput = {
    AND?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
    OR?: UserBadgeScalarWhereInput[]
    NOT?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
    id?: IntFilter<"UserBadge"> | number
    userId?: IntFilter<"UserBadge"> | number
    badgeType?: EnumBadgeTypeFilter<"UserBadge"> | $Enums.BadgeType
    title?: StringFilter<"UserBadge"> | string
    description?: StringNullableFilter<"UserBadge"> | string | null
    iconUrl?: StringNullableFilter<"UserBadge"> | string | null
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
  }

  export type DonationRequestUpsertWithWhereUniqueWithoutUserInput = {
    where: DonationRequestWhereUniqueInput
    update: XOR<DonationRequestUpdateWithoutUserInput, DonationRequestUncheckedUpdateWithoutUserInput>
    create: XOR<DonationRequestCreateWithoutUserInput, DonationRequestUncheckedCreateWithoutUserInput>
  }

  export type DonationRequestUpdateWithWhereUniqueWithoutUserInput = {
    where: DonationRequestWhereUniqueInput
    data: XOR<DonationRequestUpdateWithoutUserInput, DonationRequestUncheckedUpdateWithoutUserInput>
  }

  export type DonationRequestUpdateManyWithWhereWithoutUserInput = {
    where: DonationRequestScalarWhereInput
    data: XOR<DonationRequestUpdateManyMutationInput, DonationRequestUncheckedUpdateManyWithoutUserInput>
  }

  export type DonationRequestScalarWhereInput = {
    AND?: DonationRequestScalarWhereInput | DonationRequestScalarWhereInput[]
    OR?: DonationRequestScalarWhereInput[]
    NOT?: DonationRequestScalarWhereInput | DonationRequestScalarWhereInput[]
    id?: IntFilter<"DonationRequest"> | number
    userId?: IntFilter<"DonationRequest"> | number
    title?: StringFilter<"DonationRequest"> | string
    description?: StringFilter<"DonationRequest"> | string
    category?: StringNullableFilter<"DonationRequest"> | string | null
    urgency?: EnumDonationUrgencyFilter<"DonationRequest"> | $Enums.DonationUrgency
    status?: EnumDonationRequestStatusFilter<"DonationRequest"> | $Enums.DonationRequestStatus
    maxQuantity?: IntNullableFilter<"DonationRequest"> | number | null
    receivedCount?: IntFilter<"DonationRequest"> | number
    location?: StringNullableFilter<"DonationRequest"> | string | null
    contactInfo?: StringNullableFilter<"DonationRequest"> | string | null
    expiresAt?: DateTimeNullableFilter<"DonationRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"DonationRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DonationRequest"> | Date | string
  }

  export type DonationDistributionUpsertWithWhereUniqueWithoutDonorInput = {
    where: DonationDistributionWhereUniqueInput
    update: XOR<DonationDistributionUpdateWithoutDonorInput, DonationDistributionUncheckedUpdateWithoutDonorInput>
    create: XOR<DonationDistributionCreateWithoutDonorInput, DonationDistributionUncheckedCreateWithoutDonorInput>
  }

  export type DonationDistributionUpdateWithWhereUniqueWithoutDonorInput = {
    where: DonationDistributionWhereUniqueInput
    data: XOR<DonationDistributionUpdateWithoutDonorInput, DonationDistributionUncheckedUpdateWithoutDonorInput>
  }

  export type DonationDistributionUpdateManyWithWhereWithoutDonorInput = {
    where: DonationDistributionScalarWhereInput
    data: XOR<DonationDistributionUpdateManyMutationInput, DonationDistributionUncheckedUpdateManyWithoutDonorInput>
  }

  export type DonationDistributionScalarWhereInput = {
    AND?: DonationDistributionScalarWhereInput | DonationDistributionScalarWhereInput[]
    OR?: DonationDistributionScalarWhereInput[]
    NOT?: DonationDistributionScalarWhereInput | DonationDistributionScalarWhereInput[]
    id?: IntFilter<"DonationDistribution"> | number
    donationRequestId?: IntNullableFilter<"DonationDistribution"> | number | null
    donorId?: IntFilter<"DonationDistribution"> | number
    recipientId?: IntFilter<"DonationDistribution"> | number
    itemTitle?: StringFilter<"DonationDistribution"> | string
    itemDescription?: StringNullableFilter<"DonationDistribution"> | string | null
    quantity?: IntFilter<"DonationDistribution"> | number
    status?: EnumDistributionStatusFilter<"DonationDistribution"> | $Enums.DistributionStatus
    distributedAt?: DateTimeNullableFilter<"DonationDistribution"> | Date | string | null
    notes?: StringNullableFilter<"DonationDistribution"> | string | null
    createdAt?: DateTimeFilter<"DonationDistribution"> | Date | string
    updatedAt?: DateTimeFilter<"DonationDistribution"> | Date | string
  }

  export type RecommendationUpsertWithWhereUniqueWithoutUserInput = {
    where: RecommendationWhereUniqueInput
    update: XOR<RecommendationUpdateWithoutUserInput, RecommendationUncheckedUpdateWithoutUserInput>
    create: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput>
  }

  export type RecommendationUpdateWithWhereUniqueWithoutUserInput = {
    where: RecommendationWhereUniqueInput
    data: XOR<RecommendationUpdateWithoutUserInput, RecommendationUncheckedUpdateWithoutUserInput>
  }

  export type RecommendationUpdateManyWithWhereWithoutUserInput = {
    where: RecommendationScalarWhereInput
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyWithoutUserInput>
  }

  export type RecommendationScalarWhereInput = {
    AND?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
    OR?: RecommendationScalarWhereInput[]
    NOT?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
    id?: IntFilter<"Recommendation"> | number
    userId?: IntFilter<"Recommendation"> | number
    itemId?: IntFilter<"Recommendation"> | number
    score?: FloatFilter<"Recommendation"> | number
    reason?: EnumRecommendationReasonFilter<"Recommendation"> | $Enums.RecommendationReason
    createdAt?: DateTimeFilter<"Recommendation"> | Date | string
  }

  export type AcademicPreferenceUpsertWithWhereUniqueWithoutUserInput = {
    where: AcademicPreferenceWhereUniqueInput
    update: XOR<AcademicPreferenceUpdateWithoutUserInput, AcademicPreferenceUncheckedUpdateWithoutUserInput>
    create: XOR<AcademicPreferenceCreateWithoutUserInput, AcademicPreferenceUncheckedCreateWithoutUserInput>
  }

  export type AcademicPreferenceUpdateWithWhereUniqueWithoutUserInput = {
    where: AcademicPreferenceWhereUniqueInput
    data: XOR<AcademicPreferenceUpdateWithoutUserInput, AcademicPreferenceUncheckedUpdateWithoutUserInput>
  }

  export type AcademicPreferenceUpdateManyWithWhereWithoutUserInput = {
    where: AcademicPreferenceScalarWhereInput
    data: XOR<AcademicPreferenceUpdateManyMutationInput, AcademicPreferenceUncheckedUpdateManyWithoutUserInput>
  }

  export type AcademicPreferenceScalarWhereInput = {
    AND?: AcademicPreferenceScalarWhereInput | AcademicPreferenceScalarWhereInput[]
    OR?: AcademicPreferenceScalarWhereInput[]
    NOT?: AcademicPreferenceScalarWhereInput | AcademicPreferenceScalarWhereInput[]
    id?: IntFilter<"AcademicPreference"> | number
    userId?: IntFilter<"AcademicPreference"> | number
    academicDataId?: IntFilter<"AcademicPreference"> | number
    priority?: IntFilter<"AcademicPreference"> | number
    isActive?: BoolFilter<"AcademicPreference"> | boolean
    createdAt?: DateTimeFilter<"AcademicPreference"> | Date | string
    updatedAt?: DateTimeFilter<"AcademicPreference"> | Date | string
  }

  export type CartUpsertWithWhereUniqueWithoutUserInput = {
    where: CartWhereUniqueInput
    update: XOR<CartUpdateWithoutUserInput, CartUncheckedUpdateWithoutUserInput>
    create: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput>
  }

  export type CartUpdateWithWhereUniqueWithoutUserInput = {
    where: CartWhereUniqueInput
    data: XOR<CartUpdateWithoutUserInput, CartUncheckedUpdateWithoutUserInput>
  }

  export type CartUpdateManyWithWhereWithoutUserInput = {
    where: CartScalarWhereInput
    data: XOR<CartUpdateManyMutationInput, CartUncheckedUpdateManyWithoutUserInput>
  }

  export type CartScalarWhereInput = {
    AND?: CartScalarWhereInput | CartScalarWhereInput[]
    OR?: CartScalarWhereInput[]
    NOT?: CartScalarWhereInput | CartScalarWhereInput[]
    id?: IntFilter<"Cart"> | number
    userId?: IntFilter<"Cart"> | number
    itemId?: IntFilter<"Cart"> | number
    quantity?: IntFilter<"Cart"> | number
  }

  export type UserCreateWithoutItemsInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutItemsInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutItemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutItemsInput, UserUncheckedCreateWithoutItemsInput>
  }

  export type ItemImageCreateWithoutItemInput = {
    imageUrl: string
    isPrimary?: boolean
    caption?: string | null
    sortOrder?: number
    createdAt?: Date | string
  }

  export type ItemImageUncheckedCreateWithoutItemInput = {
    id?: number
    imageUrl: string
    isPrimary?: boolean
    caption?: string | null
    sortOrder?: number
    createdAt?: Date | string
  }

  export type ItemImageCreateOrConnectWithoutItemInput = {
    where: ItemImageWhereUniqueInput
    create: XOR<ItemImageCreateWithoutItemInput, ItemImageUncheckedCreateWithoutItemInput>
  }

  export type ItemImageCreateManyItemInputEnvelope = {
    data: ItemImageCreateManyItemInput | ItemImageCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type BarterRequestCreateWithoutRequestedItemInput = {
    itemOwnerId: number
    offeredItemIds: string
    message?: string | null
    status?: $Enums.BarterStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutBarterRequestsInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutBarterRequestInput
  }

  export type BarterRequestUncheckedCreateWithoutRequestedItemInput = {
    id?: number
    requesterId: number
    itemOwnerId: number
    offeredItemIds: string
    message?: string | null
    status?: $Enums.BarterStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutBarterRequestInput
  }

  export type BarterRequestCreateOrConnectWithoutRequestedItemInput = {
    where: BarterRequestWhereUniqueInput
    create: XOR<BarterRequestCreateWithoutRequestedItemInput, BarterRequestUncheckedCreateWithoutRequestedItemInput>
  }

  export type BarterRequestCreateManyRequestedItemInputEnvelope = {
    data: BarterRequestCreateManyRequestedItemInput | BarterRequestCreateManyRequestedItemInput[]
    skipDuplicates?: boolean
  }

  export type WishlistCreateWithoutItemInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutWishlistsInput
  }

  export type WishlistUncheckedCreateWithoutItemInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type WishlistCreateOrConnectWithoutItemInput = {
    where: WishlistWhereUniqueInput
    create: XOR<WishlistCreateWithoutItemInput, WishlistUncheckedCreateWithoutItemInput>
  }

  export type WishlistCreateManyItemInputEnvelope = {
    data: WishlistCreateManyItemInput | WishlistCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutItemInput = {
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.TransactionStatus
    paymentMethod?: string | null
    paymentStatus?: $Enums.PaymentStatus
    codLocation?: string | null
    notes?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    buyer: UserCreateNestedOneWithoutBuyerTransactionsInput
    seller: UserCreateNestedOneWithoutSellerTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutItemInput = {
    id?: number
    buyerId: number
    sellerId: number
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.TransactionStatus
    paymentMethod?: string | null
    paymentStatus?: $Enums.PaymentStatus
    codLocation?: string | null
    notes?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutItemInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutItemInput, TransactionUncheckedCreateWithoutItemInput>
  }

  export type TransactionCreateManyItemInputEnvelope = {
    data: TransactionCreateManyItemInput | TransactionCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type PriceHistoryCreateWithoutItemInput = {
    price: Decimal | DecimalJsLike | number | string
    condition: $Enums.ItemCondition
    category: string
    recordedAt?: Date | string
  }

  export type PriceHistoryUncheckedCreateWithoutItemInput = {
    id?: number
    price: Decimal | DecimalJsLike | number | string
    condition: $Enums.ItemCondition
    category: string
    recordedAt?: Date | string
  }

  export type PriceHistoryCreateOrConnectWithoutItemInput = {
    where: PriceHistoryWhereUniqueInput
    create: XOR<PriceHistoryCreateWithoutItemInput, PriceHistoryUncheckedCreateWithoutItemInput>
  }

  export type PriceHistoryCreateManyItemInputEnvelope = {
    data: PriceHistoryCreateManyItemInput | PriceHistoryCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type RecommendationCreateWithoutItemInput = {
    score: number
    reason: $Enums.RecommendationReason
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRecommendationsInput
  }

  export type RecommendationUncheckedCreateWithoutItemInput = {
    id?: number
    userId: number
    score: number
    reason: $Enums.RecommendationReason
    createdAt?: Date | string
  }

  export type RecommendationCreateOrConnectWithoutItemInput = {
    where: RecommendationWhereUniqueInput
    create: XOR<RecommendationCreateWithoutItemInput, RecommendationUncheckedCreateWithoutItemInput>
  }

  export type RecommendationCreateManyItemInputEnvelope = {
    data: RecommendationCreateManyItemInput | RecommendationCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type CartCreateWithoutItemInput = {
    quantity: number
    user: UserCreateNestedOneWithoutCartsInput
  }

  export type CartUncheckedCreateWithoutItemInput = {
    id?: number
    userId: number
    quantity: number
  }

  export type CartCreateOrConnectWithoutItemInput = {
    where: CartWhereUniqueInput
    create: XOR<CartCreateWithoutItemInput, CartUncheckedCreateWithoutItemInput>
  }

  export type CartCreateManyItemInputEnvelope = {
    data: CartCreateManyItemInput | CartCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutItemsInput = {
    update: XOR<UserUpdateWithoutItemsInput, UserUncheckedUpdateWithoutItemsInput>
    create: XOR<UserCreateWithoutItemsInput, UserUncheckedCreateWithoutItemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutItemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutItemsInput, UserUncheckedUpdateWithoutItemsInput>
  }

  export type UserUpdateWithoutItemsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ItemImageUpsertWithWhereUniqueWithoutItemInput = {
    where: ItemImageWhereUniqueInput
    update: XOR<ItemImageUpdateWithoutItemInput, ItemImageUncheckedUpdateWithoutItemInput>
    create: XOR<ItemImageCreateWithoutItemInput, ItemImageUncheckedCreateWithoutItemInput>
  }

  export type ItemImageUpdateWithWhereUniqueWithoutItemInput = {
    where: ItemImageWhereUniqueInput
    data: XOR<ItemImageUpdateWithoutItemInput, ItemImageUncheckedUpdateWithoutItemInput>
  }

  export type ItemImageUpdateManyWithWhereWithoutItemInput = {
    where: ItemImageScalarWhereInput
    data: XOR<ItemImageUpdateManyMutationInput, ItemImageUncheckedUpdateManyWithoutItemInput>
  }

  export type ItemImageScalarWhereInput = {
    AND?: ItemImageScalarWhereInput | ItemImageScalarWhereInput[]
    OR?: ItemImageScalarWhereInput[]
    NOT?: ItemImageScalarWhereInput | ItemImageScalarWhereInput[]
    id?: IntFilter<"ItemImage"> | number
    itemId?: IntFilter<"ItemImage"> | number
    imageUrl?: StringFilter<"ItemImage"> | string
    isPrimary?: BoolFilter<"ItemImage"> | boolean
    caption?: StringNullableFilter<"ItemImage"> | string | null
    sortOrder?: IntFilter<"ItemImage"> | number
    createdAt?: DateTimeFilter<"ItemImage"> | Date | string
  }

  export type BarterRequestUpsertWithWhereUniqueWithoutRequestedItemInput = {
    where: BarterRequestWhereUniqueInput
    update: XOR<BarterRequestUpdateWithoutRequestedItemInput, BarterRequestUncheckedUpdateWithoutRequestedItemInput>
    create: XOR<BarterRequestCreateWithoutRequestedItemInput, BarterRequestUncheckedCreateWithoutRequestedItemInput>
  }

  export type BarterRequestUpdateWithWhereUniqueWithoutRequestedItemInput = {
    where: BarterRequestWhereUniqueInput
    data: XOR<BarterRequestUpdateWithoutRequestedItemInput, BarterRequestUncheckedUpdateWithoutRequestedItemInput>
  }

  export type BarterRequestUpdateManyWithWhereWithoutRequestedItemInput = {
    where: BarterRequestScalarWhereInput
    data: XOR<BarterRequestUpdateManyMutationInput, BarterRequestUncheckedUpdateManyWithoutRequestedItemInput>
  }

  export type WishlistUpsertWithWhereUniqueWithoutItemInput = {
    where: WishlistWhereUniqueInput
    update: XOR<WishlistUpdateWithoutItemInput, WishlistUncheckedUpdateWithoutItemInput>
    create: XOR<WishlistCreateWithoutItemInput, WishlistUncheckedCreateWithoutItemInput>
  }

  export type WishlistUpdateWithWhereUniqueWithoutItemInput = {
    where: WishlistWhereUniqueInput
    data: XOR<WishlistUpdateWithoutItemInput, WishlistUncheckedUpdateWithoutItemInput>
  }

  export type WishlistUpdateManyWithWhereWithoutItemInput = {
    where: WishlistScalarWhereInput
    data: XOR<WishlistUpdateManyMutationInput, WishlistUncheckedUpdateManyWithoutItemInput>
  }

  export type TransactionUpsertWithWhereUniqueWithoutItemInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutItemInput, TransactionUncheckedUpdateWithoutItemInput>
    create: XOR<TransactionCreateWithoutItemInput, TransactionUncheckedCreateWithoutItemInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutItemInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutItemInput, TransactionUncheckedUpdateWithoutItemInput>
  }

  export type TransactionUpdateManyWithWhereWithoutItemInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutItemInput>
  }

  export type PriceHistoryUpsertWithWhereUniqueWithoutItemInput = {
    where: PriceHistoryWhereUniqueInput
    update: XOR<PriceHistoryUpdateWithoutItemInput, PriceHistoryUncheckedUpdateWithoutItemInput>
    create: XOR<PriceHistoryCreateWithoutItemInput, PriceHistoryUncheckedCreateWithoutItemInput>
  }

  export type PriceHistoryUpdateWithWhereUniqueWithoutItemInput = {
    where: PriceHistoryWhereUniqueInput
    data: XOR<PriceHistoryUpdateWithoutItemInput, PriceHistoryUncheckedUpdateWithoutItemInput>
  }

  export type PriceHistoryUpdateManyWithWhereWithoutItemInput = {
    where: PriceHistoryScalarWhereInput
    data: XOR<PriceHistoryUpdateManyMutationInput, PriceHistoryUncheckedUpdateManyWithoutItemInput>
  }

  export type PriceHistoryScalarWhereInput = {
    AND?: PriceHistoryScalarWhereInput | PriceHistoryScalarWhereInput[]
    OR?: PriceHistoryScalarWhereInput[]
    NOT?: PriceHistoryScalarWhereInput | PriceHistoryScalarWhereInput[]
    id?: IntFilter<"PriceHistory"> | number
    itemId?: IntFilter<"PriceHistory"> | number
    price?: DecimalFilter<"PriceHistory"> | Decimal | DecimalJsLike | number | string
    condition?: EnumItemConditionFilter<"PriceHistory"> | $Enums.ItemCondition
    category?: StringFilter<"PriceHistory"> | string
    recordedAt?: DateTimeFilter<"PriceHistory"> | Date | string
  }

  export type RecommendationUpsertWithWhereUniqueWithoutItemInput = {
    where: RecommendationWhereUniqueInput
    update: XOR<RecommendationUpdateWithoutItemInput, RecommendationUncheckedUpdateWithoutItemInput>
    create: XOR<RecommendationCreateWithoutItemInput, RecommendationUncheckedCreateWithoutItemInput>
  }

  export type RecommendationUpdateWithWhereUniqueWithoutItemInput = {
    where: RecommendationWhereUniqueInput
    data: XOR<RecommendationUpdateWithoutItemInput, RecommendationUncheckedUpdateWithoutItemInput>
  }

  export type RecommendationUpdateManyWithWhereWithoutItemInput = {
    where: RecommendationScalarWhereInput
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyWithoutItemInput>
  }

  export type CartUpsertWithWhereUniqueWithoutItemInput = {
    where: CartWhereUniqueInput
    update: XOR<CartUpdateWithoutItemInput, CartUncheckedUpdateWithoutItemInput>
    create: XOR<CartCreateWithoutItemInput, CartUncheckedCreateWithoutItemInput>
  }

  export type CartUpdateWithWhereUniqueWithoutItemInput = {
    where: CartWhereUniqueInput
    data: XOR<CartUpdateWithoutItemInput, CartUncheckedUpdateWithoutItemInput>
  }

  export type CartUpdateManyWithWhereWithoutItemInput = {
    where: CartScalarWhereInput
    data: XOR<CartUpdateManyMutationInput, CartUncheckedUpdateManyWithoutItemInput>
  }

  export type DiscussionCreateWithoutAcademicDataInput = {
    title: string
    content: string
    category?: string | null
    tags?: string | null
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDiscussionsInput
    comments?: CommentCreateNestedManyWithoutDiscussionInput
  }

  export type DiscussionUncheckedCreateWithoutAcademicDataInput = {
    id?: number
    userId: number
    title: string
    content: string
    category?: string | null
    tags?: string | null
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutDiscussionInput
  }

  export type DiscussionCreateOrConnectWithoutAcademicDataInput = {
    where: DiscussionWhereUniqueInput
    create: XOR<DiscussionCreateWithoutAcademicDataInput, DiscussionUncheckedCreateWithoutAcademicDataInput>
  }

  export type DiscussionCreateManyAcademicDataInputEnvelope = {
    data: DiscussionCreateManyAcademicDataInput | DiscussionCreateManyAcademicDataInput[]
    skipDuplicates?: boolean
  }

  export type AcademicPreferenceCreateWithoutAcademicDataInput = {
    priority?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAcademicPreferencesInput
  }

  export type AcademicPreferenceUncheckedCreateWithoutAcademicDataInput = {
    id?: number
    userId: number
    priority?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicPreferenceCreateOrConnectWithoutAcademicDataInput = {
    where: AcademicPreferenceWhereUniqueInput
    create: XOR<AcademicPreferenceCreateWithoutAcademicDataInput, AcademicPreferenceUncheckedCreateWithoutAcademicDataInput>
  }

  export type AcademicPreferenceCreateManyAcademicDataInputEnvelope = {
    data: AcademicPreferenceCreateManyAcademicDataInput | AcademicPreferenceCreateManyAcademicDataInput[]
    skipDuplicates?: boolean
  }

  export type DiscussionUpsertWithWhereUniqueWithoutAcademicDataInput = {
    where: DiscussionWhereUniqueInput
    update: XOR<DiscussionUpdateWithoutAcademicDataInput, DiscussionUncheckedUpdateWithoutAcademicDataInput>
    create: XOR<DiscussionCreateWithoutAcademicDataInput, DiscussionUncheckedCreateWithoutAcademicDataInput>
  }

  export type DiscussionUpdateWithWhereUniqueWithoutAcademicDataInput = {
    where: DiscussionWhereUniqueInput
    data: XOR<DiscussionUpdateWithoutAcademicDataInput, DiscussionUncheckedUpdateWithoutAcademicDataInput>
  }

  export type DiscussionUpdateManyWithWhereWithoutAcademicDataInput = {
    where: DiscussionScalarWhereInput
    data: XOR<DiscussionUpdateManyMutationInput, DiscussionUncheckedUpdateManyWithoutAcademicDataInput>
  }

  export type AcademicPreferenceUpsertWithWhereUniqueWithoutAcademicDataInput = {
    where: AcademicPreferenceWhereUniqueInput
    update: XOR<AcademicPreferenceUpdateWithoutAcademicDataInput, AcademicPreferenceUncheckedUpdateWithoutAcademicDataInput>
    create: XOR<AcademicPreferenceCreateWithoutAcademicDataInput, AcademicPreferenceUncheckedCreateWithoutAcademicDataInput>
  }

  export type AcademicPreferenceUpdateWithWhereUniqueWithoutAcademicDataInput = {
    where: AcademicPreferenceWhereUniqueInput
    data: XOR<AcademicPreferenceUpdateWithoutAcademicDataInput, AcademicPreferenceUncheckedUpdateWithoutAcademicDataInput>
  }

  export type AcademicPreferenceUpdateManyWithWhereWithoutAcademicDataInput = {
    where: AcademicPreferenceScalarWhereInput
    data: XOR<AcademicPreferenceUpdateManyMutationInput, AcademicPreferenceUncheckedUpdateManyWithoutAcademicDataInput>
  }

  export type UserCreateWithoutBuyerTransactionsInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBuyerTransactionsInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBuyerTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBuyerTransactionsInput, UserUncheckedCreateWithoutBuyerTransactionsInput>
  }

  export type UserCreateWithoutSellerTransactionsInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSellerTransactionsInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSellerTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSellerTransactionsInput, UserUncheckedCreateWithoutSellerTransactionsInput>
  }

  export type ItemCreateWithoutTransactionsInput = {
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutItemsInput
    itemImages?: ItemImageCreateNestedManyWithoutItemInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequestedItemInput
    wishlists?: WishlistCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryCreateNestedManyWithoutItemInput
    recommendations?: RecommendationCreateNestedManyWithoutItemInput
    carts?: CartCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutTransactionsInput = {
    id?: number
    userId: number
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    itemImages?: ItemImageUncheckedCreateNestedManyWithoutItemInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequestedItemInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryUncheckedCreateNestedManyWithoutItemInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutItemInput
    carts?: CartUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutTransactionsInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutTransactionsInput, ItemUncheckedCreateWithoutTransactionsInput>
  }

  export type UserUpsertWithoutBuyerTransactionsInput = {
    update: XOR<UserUpdateWithoutBuyerTransactionsInput, UserUncheckedUpdateWithoutBuyerTransactionsInput>
    create: XOR<UserCreateWithoutBuyerTransactionsInput, UserUncheckedCreateWithoutBuyerTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBuyerTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBuyerTransactionsInput, UserUncheckedUpdateWithoutBuyerTransactionsInput>
  }

  export type UserUpdateWithoutBuyerTransactionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBuyerTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutSellerTransactionsInput = {
    update: XOR<UserUpdateWithoutSellerTransactionsInput, UserUncheckedUpdateWithoutSellerTransactionsInput>
    create: XOR<UserCreateWithoutSellerTransactionsInput, UserUncheckedCreateWithoutSellerTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSellerTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSellerTransactionsInput, UserUncheckedUpdateWithoutSellerTransactionsInput>
  }

  export type UserUpdateWithoutSellerTransactionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSellerTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ItemUpsertWithoutTransactionsInput = {
    update: XOR<ItemUpdateWithoutTransactionsInput, ItemUncheckedUpdateWithoutTransactionsInput>
    create: XOR<ItemCreateWithoutTransactionsInput, ItemUncheckedCreateWithoutTransactionsInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutTransactionsInput, ItemUncheckedUpdateWithoutTransactionsInput>
  }

  export type ItemUpdateWithoutTransactionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutItemsNestedInput
    itemImages?: ItemImageUpdateManyWithoutItemNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequestedItemNestedInput
    wishlists?: WishlistUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUpdateManyWithoutItemNestedInput
    carts?: CartUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    itemImages?: ItemImageUncheckedUpdateManyWithoutItemNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequestedItemNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUncheckedUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutItemNestedInput
    carts?: CartUncheckedUpdateManyWithoutItemNestedInput
  }

  export type UserCreateWithoutBarterRequestsInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBarterRequestsInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBarterRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBarterRequestsInput, UserUncheckedCreateWithoutBarterRequestsInput>
  }

  export type ItemCreateWithoutBarterRequestsInput = {
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutItemsInput
    itemImages?: ItemImageCreateNestedManyWithoutItemInput
    wishlists?: WishlistCreateNestedManyWithoutItemInput
    transactions?: TransactionCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryCreateNestedManyWithoutItemInput
    recommendations?: RecommendationCreateNestedManyWithoutItemInput
    carts?: CartCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutBarterRequestsInput = {
    id?: number
    userId: number
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    itemImages?: ItemImageUncheckedCreateNestedManyWithoutItemInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutItemInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryUncheckedCreateNestedManyWithoutItemInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutItemInput
    carts?: CartUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutBarterRequestsInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutBarterRequestsInput, ItemUncheckedCreateWithoutBarterRequestsInput>
  }

  export type BarterNegotiationCreateWithoutBarterRequestInput = {
    message: string
    isRead?: boolean
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutBarterNegotiationsInput
  }

  export type BarterNegotiationUncheckedCreateWithoutBarterRequestInput = {
    id?: number
    senderId: number
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type BarterNegotiationCreateOrConnectWithoutBarterRequestInput = {
    where: BarterNegotiationWhereUniqueInput
    create: XOR<BarterNegotiationCreateWithoutBarterRequestInput, BarterNegotiationUncheckedCreateWithoutBarterRequestInput>
  }

  export type BarterNegotiationCreateManyBarterRequestInputEnvelope = {
    data: BarterNegotiationCreateManyBarterRequestInput | BarterNegotiationCreateManyBarterRequestInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBarterRequestsInput = {
    update: XOR<UserUpdateWithoutBarterRequestsInput, UserUncheckedUpdateWithoutBarterRequestsInput>
    create: XOR<UserCreateWithoutBarterRequestsInput, UserUncheckedCreateWithoutBarterRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBarterRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBarterRequestsInput, UserUncheckedUpdateWithoutBarterRequestsInput>
  }

  export type UserUpdateWithoutBarterRequestsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBarterRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ItemUpsertWithoutBarterRequestsInput = {
    update: XOR<ItemUpdateWithoutBarterRequestsInput, ItemUncheckedUpdateWithoutBarterRequestsInput>
    create: XOR<ItemCreateWithoutBarterRequestsInput, ItemUncheckedCreateWithoutBarterRequestsInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutBarterRequestsInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutBarterRequestsInput, ItemUncheckedUpdateWithoutBarterRequestsInput>
  }

  export type ItemUpdateWithoutBarterRequestsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutItemsNestedInput
    itemImages?: ItemImageUpdateManyWithoutItemNestedInput
    wishlists?: WishlistUpdateManyWithoutItemNestedInput
    transactions?: TransactionUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUpdateManyWithoutItemNestedInput
    carts?: CartUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutBarterRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    itemImages?: ItemImageUncheckedUpdateManyWithoutItemNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutItemNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUncheckedUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutItemNestedInput
    carts?: CartUncheckedUpdateManyWithoutItemNestedInput
  }

  export type BarterNegotiationUpsertWithWhereUniqueWithoutBarterRequestInput = {
    where: BarterNegotiationWhereUniqueInput
    update: XOR<BarterNegotiationUpdateWithoutBarterRequestInput, BarterNegotiationUncheckedUpdateWithoutBarterRequestInput>
    create: XOR<BarterNegotiationCreateWithoutBarterRequestInput, BarterNegotiationUncheckedCreateWithoutBarterRequestInput>
  }

  export type BarterNegotiationUpdateWithWhereUniqueWithoutBarterRequestInput = {
    where: BarterNegotiationWhereUniqueInput
    data: XOR<BarterNegotiationUpdateWithoutBarterRequestInput, BarterNegotiationUncheckedUpdateWithoutBarterRequestInput>
  }

  export type BarterNegotiationUpdateManyWithWhereWithoutBarterRequestInput = {
    where: BarterNegotiationScalarWhereInput
    data: XOR<BarterNegotiationUpdateManyMutationInput, BarterNegotiationUncheckedUpdateManyWithoutBarterRequestInput>
  }

  export type BarterRequestCreateWithoutBarterNegotiationsInput = {
    itemOwnerId: number
    offeredItemIds: string
    message?: string | null
    status?: $Enums.BarterStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutBarterRequestsInput
    requestedItem: ItemCreateNestedOneWithoutBarterRequestsInput
  }

  export type BarterRequestUncheckedCreateWithoutBarterNegotiationsInput = {
    id?: number
    requesterId: number
    itemOwnerId: number
    requestedItemId: number
    offeredItemIds: string
    message?: string | null
    status?: $Enums.BarterStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BarterRequestCreateOrConnectWithoutBarterNegotiationsInput = {
    where: BarterRequestWhereUniqueInput
    create: XOR<BarterRequestCreateWithoutBarterNegotiationsInput, BarterRequestUncheckedCreateWithoutBarterNegotiationsInput>
  }

  export type UserCreateWithoutBarterNegotiationsInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBarterNegotiationsInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBarterNegotiationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBarterNegotiationsInput, UserUncheckedCreateWithoutBarterNegotiationsInput>
  }

  export type BarterRequestUpsertWithoutBarterNegotiationsInput = {
    update: XOR<BarterRequestUpdateWithoutBarterNegotiationsInput, BarterRequestUncheckedUpdateWithoutBarterNegotiationsInput>
    create: XOR<BarterRequestCreateWithoutBarterNegotiationsInput, BarterRequestUncheckedCreateWithoutBarterNegotiationsInput>
    where?: BarterRequestWhereInput
  }

  export type BarterRequestUpdateToOneWithWhereWithoutBarterNegotiationsInput = {
    where?: BarterRequestWhereInput
    data: XOR<BarterRequestUpdateWithoutBarterNegotiationsInput, BarterRequestUncheckedUpdateWithoutBarterNegotiationsInput>
  }

  export type BarterRequestUpdateWithoutBarterNegotiationsInput = {
    itemOwnerId?: IntFieldUpdateOperationsInput | number
    offeredItemIds?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBarterStatusFieldUpdateOperationsInput | $Enums.BarterStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutBarterRequestsNestedInput
    requestedItem?: ItemUpdateOneRequiredWithoutBarterRequestsNestedInput
  }

  export type BarterRequestUncheckedUpdateWithoutBarterNegotiationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    requesterId?: IntFieldUpdateOperationsInput | number
    itemOwnerId?: IntFieldUpdateOperationsInput | number
    requestedItemId?: IntFieldUpdateOperationsInput | number
    offeredItemIds?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBarterStatusFieldUpdateOperationsInput | $Enums.BarterStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutBarterNegotiationsInput = {
    update: XOR<UserUpdateWithoutBarterNegotiationsInput, UserUncheckedUpdateWithoutBarterNegotiationsInput>
    create: XOR<UserCreateWithoutBarterNegotiationsInput, UserUncheckedCreateWithoutBarterNegotiationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBarterNegotiationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBarterNegotiationsInput, UserUncheckedUpdateWithoutBarterNegotiationsInput>
  }

  export type UserUpdateWithoutBarterNegotiationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBarterNegotiationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutWtbRequestsInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWtbRequestsInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWtbRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWtbRequestsInput, UserUncheckedCreateWithoutWtbRequestsInput>
  }

  export type WtbResponseCreateWithoutWtbRequestInput = {
    message: string
    offeredPrice?: Decimal | DecimalJsLike | number | string | null
    itemImages?: string | null
    contactInfo?: string | null
    isRead?: boolean
    createdAt?: Date | string
    responder: UserCreateNestedOneWithoutWtbResponsesInput
  }

  export type WtbResponseUncheckedCreateWithoutWtbRequestInput = {
    id?: number
    responderId: number
    message: string
    offeredPrice?: Decimal | DecimalJsLike | number | string | null
    itemImages?: string | null
    contactInfo?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type WtbResponseCreateOrConnectWithoutWtbRequestInput = {
    where: WtbResponseWhereUniqueInput
    create: XOR<WtbResponseCreateWithoutWtbRequestInput, WtbResponseUncheckedCreateWithoutWtbRequestInput>
  }

  export type WtbResponseCreateManyWtbRequestInputEnvelope = {
    data: WtbResponseCreateManyWtbRequestInput | WtbResponseCreateManyWtbRequestInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWtbRequestsInput = {
    update: XOR<UserUpdateWithoutWtbRequestsInput, UserUncheckedUpdateWithoutWtbRequestsInput>
    create: XOR<UserCreateWithoutWtbRequestsInput, UserUncheckedCreateWithoutWtbRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWtbRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWtbRequestsInput, UserUncheckedUpdateWithoutWtbRequestsInput>
  }

  export type UserUpdateWithoutWtbRequestsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWtbRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WtbResponseUpsertWithWhereUniqueWithoutWtbRequestInput = {
    where: WtbResponseWhereUniqueInput
    update: XOR<WtbResponseUpdateWithoutWtbRequestInput, WtbResponseUncheckedUpdateWithoutWtbRequestInput>
    create: XOR<WtbResponseCreateWithoutWtbRequestInput, WtbResponseUncheckedCreateWithoutWtbRequestInput>
  }

  export type WtbResponseUpdateWithWhereUniqueWithoutWtbRequestInput = {
    where: WtbResponseWhereUniqueInput
    data: XOR<WtbResponseUpdateWithoutWtbRequestInput, WtbResponseUncheckedUpdateWithoutWtbRequestInput>
  }

  export type WtbResponseUpdateManyWithWhereWithoutWtbRequestInput = {
    where: WtbResponseScalarWhereInput
    data: XOR<WtbResponseUpdateManyMutationInput, WtbResponseUncheckedUpdateManyWithoutWtbRequestInput>
  }

  export type WtbRequestCreateWithoutWtbResponsesInput = {
    title: string
    description: string
    maxPrice?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    preferredCondition?: string | null
    location?: string | null
    urgency?: $Enums.WtbUrgency
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWtbRequestsInput
  }

  export type WtbRequestUncheckedCreateWithoutWtbResponsesInput = {
    id?: number
    userId: number
    title: string
    description: string
    maxPrice?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    preferredCondition?: string | null
    location?: string | null
    urgency?: $Enums.WtbUrgency
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WtbRequestCreateOrConnectWithoutWtbResponsesInput = {
    where: WtbRequestWhereUniqueInput
    create: XOR<WtbRequestCreateWithoutWtbResponsesInput, WtbRequestUncheckedCreateWithoutWtbResponsesInput>
  }

  export type UserCreateWithoutWtbResponsesInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWtbResponsesInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWtbResponsesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWtbResponsesInput, UserUncheckedCreateWithoutWtbResponsesInput>
  }

  export type WtbRequestUpsertWithoutWtbResponsesInput = {
    update: XOR<WtbRequestUpdateWithoutWtbResponsesInput, WtbRequestUncheckedUpdateWithoutWtbResponsesInput>
    create: XOR<WtbRequestCreateWithoutWtbResponsesInput, WtbRequestUncheckedCreateWithoutWtbResponsesInput>
    where?: WtbRequestWhereInput
  }

  export type WtbRequestUpdateToOneWithWhereWithoutWtbResponsesInput = {
    where?: WtbRequestWhereInput
    data: XOR<WtbRequestUpdateWithoutWtbResponsesInput, WtbRequestUncheckedUpdateWithoutWtbResponsesInput>
  }

  export type WtbRequestUpdateWithoutWtbResponsesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCondition?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumWtbUrgencyFieldUpdateOperationsInput | $Enums.WtbUrgency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWtbRequestsNestedInput
  }

  export type WtbRequestUncheckedUpdateWithoutWtbResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCondition?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumWtbUrgencyFieldUpdateOperationsInput | $Enums.WtbUrgency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutWtbResponsesInput = {
    update: XOR<UserUpdateWithoutWtbResponsesInput, UserUncheckedUpdateWithoutWtbResponsesInput>
    create: XOR<UserCreateWithoutWtbResponsesInput, UserUncheckedCreateWithoutWtbResponsesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWtbResponsesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWtbResponsesInput, UserUncheckedUpdateWithoutWtbResponsesInput>
  }

  export type UserUpdateWithoutWtbResponsesInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWtbResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutWishlistsInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWishlistsInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWishlistsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWishlistsInput, UserUncheckedCreateWithoutWishlistsInput>
  }

  export type ItemCreateWithoutWishlistsInput = {
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutItemsInput
    itemImages?: ItemImageCreateNestedManyWithoutItemInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequestedItemInput
    transactions?: TransactionCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryCreateNestedManyWithoutItemInput
    recommendations?: RecommendationCreateNestedManyWithoutItemInput
    carts?: CartCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutWishlistsInput = {
    id?: number
    userId: number
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    itemImages?: ItemImageUncheckedCreateNestedManyWithoutItemInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequestedItemInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryUncheckedCreateNestedManyWithoutItemInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutItemInput
    carts?: CartUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutWishlistsInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutWishlistsInput, ItemUncheckedCreateWithoutWishlistsInput>
  }

  export type UserUpsertWithoutWishlistsInput = {
    update: XOR<UserUpdateWithoutWishlistsInput, UserUncheckedUpdateWithoutWishlistsInput>
    create: XOR<UserCreateWithoutWishlistsInput, UserUncheckedCreateWithoutWishlistsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWishlistsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWishlistsInput, UserUncheckedUpdateWithoutWishlistsInput>
  }

  export type UserUpdateWithoutWishlistsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWishlistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ItemUpsertWithoutWishlistsInput = {
    update: XOR<ItemUpdateWithoutWishlistsInput, ItemUncheckedUpdateWithoutWishlistsInput>
    create: XOR<ItemCreateWithoutWishlistsInput, ItemUncheckedCreateWithoutWishlistsInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutWishlistsInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutWishlistsInput, ItemUncheckedUpdateWithoutWishlistsInput>
  }

  export type ItemUpdateWithoutWishlistsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutItemsNestedInput
    itemImages?: ItemImageUpdateManyWithoutItemNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequestedItemNestedInput
    transactions?: TransactionUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUpdateManyWithoutItemNestedInput
    carts?: CartUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutWishlistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    itemImages?: ItemImageUncheckedUpdateManyWithoutItemNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequestedItemNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUncheckedUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutItemNestedInput
    carts?: CartUncheckedUpdateManyWithoutItemNestedInput
  }

  export type UserCreateWithoutDiscussionsInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDiscussionsInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDiscussionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDiscussionsInput, UserUncheckedCreateWithoutDiscussionsInput>
  }

  export type AcademicDataCreateWithoutDiscussionsInput = {
    courseCode: string
    courseName: string
    lecturerName?: string | null
    faculty: string
    semester?: number | null
    credits?: number | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutAcademicDataInput
  }

  export type AcademicDataUncheckedCreateWithoutDiscussionsInput = {
    id?: number
    courseCode: string
    courseName: string
    lecturerName?: string | null
    faculty: string
    semester?: number | null
    credits?: number | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutAcademicDataInput
  }

  export type AcademicDataCreateOrConnectWithoutDiscussionsInput = {
    where: AcademicDataWhereUniqueInput
    create: XOR<AcademicDataCreateWithoutDiscussionsInput, AcademicDataUncheckedCreateWithoutDiscussionsInput>
  }

  export type CommentCreateWithoutDiscussionInput = {
    content: string
    isEdited?: boolean
    editedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateWithoutDiscussionInput = {
    id?: number
    userId: number
    parentId?: number | null
    content: string
    isEdited?: boolean
    editedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentCreateOrConnectWithoutDiscussionInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutDiscussionInput, CommentUncheckedCreateWithoutDiscussionInput>
  }

  export type CommentCreateManyDiscussionInputEnvelope = {
    data: CommentCreateManyDiscussionInput | CommentCreateManyDiscussionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutDiscussionsInput = {
    update: XOR<UserUpdateWithoutDiscussionsInput, UserUncheckedUpdateWithoutDiscussionsInput>
    create: XOR<UserCreateWithoutDiscussionsInput, UserUncheckedCreateWithoutDiscussionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDiscussionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDiscussionsInput, UserUncheckedUpdateWithoutDiscussionsInput>
  }

  export type UserUpdateWithoutDiscussionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDiscussionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AcademicDataUpsertWithoutDiscussionsInput = {
    update: XOR<AcademicDataUpdateWithoutDiscussionsInput, AcademicDataUncheckedUpdateWithoutDiscussionsInput>
    create: XOR<AcademicDataCreateWithoutDiscussionsInput, AcademicDataUncheckedCreateWithoutDiscussionsInput>
    where?: AcademicDataWhereInput
  }

  export type AcademicDataUpdateToOneWithWhereWithoutDiscussionsInput = {
    where?: AcademicDataWhereInput
    data: XOR<AcademicDataUpdateWithoutDiscussionsInput, AcademicDataUncheckedUpdateWithoutDiscussionsInput>
  }

  export type AcademicDataUpdateWithoutDiscussionsInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    lecturerName?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: StringFieldUpdateOperationsInput | string
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicPreferences?: AcademicPreferenceUpdateManyWithoutAcademicDataNestedInput
  }

  export type AcademicDataUncheckedUpdateWithoutDiscussionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    lecturerName?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: StringFieldUpdateOperationsInput | string
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutAcademicDataNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutDiscussionInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutDiscussionInput, CommentUncheckedUpdateWithoutDiscussionInput>
    create: XOR<CommentCreateWithoutDiscussionInput, CommentUncheckedCreateWithoutDiscussionInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutDiscussionInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutDiscussionInput, CommentUncheckedUpdateWithoutDiscussionInput>
  }

  export type CommentUpdateManyWithWhereWithoutDiscussionInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutDiscussionInput>
  }

  export type DiscussionCreateWithoutCommentsInput = {
    title: string
    content: string
    category?: string | null
    tags?: string | null
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDiscussionsInput
    academicData?: AcademicDataCreateNestedOneWithoutDiscussionsInput
  }

  export type DiscussionUncheckedCreateWithoutCommentsInput = {
    id?: number
    userId: number
    academicDataId?: number | null
    title: string
    content: string
    category?: string | null
    tags?: string | null
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscussionCreateOrConnectWithoutCommentsInput = {
    where: DiscussionWhereUniqueInput
    create: XOR<DiscussionCreateWithoutCommentsInput, DiscussionUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type CommentCreateWithoutRepliesInput = {
    content: string
    isEdited?: boolean
    editedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    discussion: DiscussionCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
  }

  export type CommentUncheckedCreateWithoutRepliesInput = {
    id?: number
    discussionId: number
    userId: number
    parentId?: number | null
    content: string
    isEdited?: boolean
    editedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutRepliesInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
  }

  export type CommentCreateWithoutParentInput = {
    content: string
    isEdited?: boolean
    editedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    discussion: DiscussionCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateWithoutParentInput = {
    id?: number
    discussionId: number
    userId: number
    content: string
    isEdited?: boolean
    editedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentCreateOrConnectWithoutParentInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput>
  }

  export type CommentCreateManyParentInputEnvelope = {
    data: CommentCreateManyParentInput | CommentCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type DiscussionUpsertWithoutCommentsInput = {
    update: XOR<DiscussionUpdateWithoutCommentsInput, DiscussionUncheckedUpdateWithoutCommentsInput>
    create: XOR<DiscussionCreateWithoutCommentsInput, DiscussionUncheckedCreateWithoutCommentsInput>
    where?: DiscussionWhereInput
  }

  export type DiscussionUpdateToOneWithWhereWithoutCommentsInput = {
    where?: DiscussionWhereInput
    data: XOR<DiscussionUpdateWithoutCommentsInput, DiscussionUncheckedUpdateWithoutCommentsInput>
  }

  export type DiscussionUpdateWithoutCommentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDiscussionsNestedInput
    academicData?: AcademicDataUpdateOneWithoutDiscussionsNestedInput
  }

  export type DiscussionUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    academicDataId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentUpsertWithoutRepliesInput = {
    update: XOR<CommentUpdateWithoutRepliesInput, CommentUncheckedUpdateWithoutRepliesInput>
    create: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutRepliesInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutRepliesInput, CommentUncheckedUpdateWithoutRepliesInput>
  }

  export type CommentUpdateWithoutRepliesInput = {
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discussion?: DiscussionUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
  }

  export type CommentUncheckedUpdateWithoutRepliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    discussionId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpsertWithWhereUniqueWithoutParentInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutParentInput, CommentUncheckedUpdateWithoutParentInput>
    create: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutParentInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutParentInput, CommentUncheckedUpdateWithoutParentInput>
  }

  export type CommentUpdateManyWithWhereWithoutParentInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutParentInput>
  }

  export type UserCreateWithoutNotificationsInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ItemCreateWithoutPriceHistoriesInput = {
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutItemsInput
    itemImages?: ItemImageCreateNestedManyWithoutItemInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequestedItemInput
    wishlists?: WishlistCreateNestedManyWithoutItemInput
    transactions?: TransactionCreateNestedManyWithoutItemInput
    recommendations?: RecommendationCreateNestedManyWithoutItemInput
    carts?: CartCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutPriceHistoriesInput = {
    id?: number
    userId: number
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    itemImages?: ItemImageUncheckedCreateNestedManyWithoutItemInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequestedItemInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutItemInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutItemInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutItemInput
    carts?: CartUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutPriceHistoriesInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutPriceHistoriesInput, ItemUncheckedCreateWithoutPriceHistoriesInput>
  }

  export type ItemUpsertWithoutPriceHistoriesInput = {
    update: XOR<ItemUpdateWithoutPriceHistoriesInput, ItemUncheckedUpdateWithoutPriceHistoriesInput>
    create: XOR<ItemCreateWithoutPriceHistoriesInput, ItemUncheckedCreateWithoutPriceHistoriesInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutPriceHistoriesInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutPriceHistoriesInput, ItemUncheckedUpdateWithoutPriceHistoriesInput>
  }

  export type ItemUpdateWithoutPriceHistoriesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutItemsNestedInput
    itemImages?: ItemImageUpdateManyWithoutItemNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequestedItemNestedInput
    wishlists?: WishlistUpdateManyWithoutItemNestedInput
    transactions?: TransactionUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUpdateManyWithoutItemNestedInput
    carts?: CartUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutPriceHistoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    itemImages?: ItemImageUncheckedUpdateManyWithoutItemNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequestedItemNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutItemNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutItemNestedInput
    carts?: CartUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemCreateWithoutItemImagesInput = {
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutItemsInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequestedItemInput
    wishlists?: WishlistCreateNestedManyWithoutItemInput
    transactions?: TransactionCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryCreateNestedManyWithoutItemInput
    recommendations?: RecommendationCreateNestedManyWithoutItemInput
    carts?: CartCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutItemImagesInput = {
    id?: number
    userId: number
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequestedItemInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutItemInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryUncheckedCreateNestedManyWithoutItemInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutItemInput
    carts?: CartUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutItemImagesInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutItemImagesInput, ItemUncheckedCreateWithoutItemImagesInput>
  }

  export type ItemUpsertWithoutItemImagesInput = {
    update: XOR<ItemUpdateWithoutItemImagesInput, ItemUncheckedUpdateWithoutItemImagesInput>
    create: XOR<ItemCreateWithoutItemImagesInput, ItemUncheckedCreateWithoutItemImagesInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutItemImagesInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutItemImagesInput, ItemUncheckedUpdateWithoutItemImagesInput>
  }

  export type ItemUpdateWithoutItemImagesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutItemsNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequestedItemNestedInput
    wishlists?: WishlistUpdateManyWithoutItemNestedInput
    transactions?: TransactionUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUpdateManyWithoutItemNestedInput
    carts?: CartUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutItemImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequestedItemNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutItemNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUncheckedUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutItemNestedInput
    carts?: CartUncheckedUpdateManyWithoutItemNestedInput
  }

  export type UserCreateWithoutUserBadgesInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserBadgesInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserBadgesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
  }

  export type UserUpsertWithoutUserBadgesInput = {
    update: XOR<UserUpdateWithoutUserBadgesInput, UserUncheckedUpdateWithoutUserBadgesInput>
    create: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserBadgesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserBadgesInput, UserUncheckedUpdateWithoutUserBadgesInput>
  }

  export type UserUpdateWithoutUserBadgesInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserBadgesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutDonationRequestsInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDonationRequestsInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDonationRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDonationRequestsInput, UserUncheckedCreateWithoutDonationRequestsInput>
  }

  export type DonationDistributionCreateWithoutDonationRequestInput = {
    recipientId: number
    itemTitle: string
    itemDescription?: string | null
    quantity?: number
    status?: $Enums.DistributionStatus
    distributedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    donor: UserCreateNestedOneWithoutDonationDistributionsInput
  }

  export type DonationDistributionUncheckedCreateWithoutDonationRequestInput = {
    id?: number
    donorId: number
    recipientId: number
    itemTitle: string
    itemDescription?: string | null
    quantity?: number
    status?: $Enums.DistributionStatus
    distributedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DonationDistributionCreateOrConnectWithoutDonationRequestInput = {
    where: DonationDistributionWhereUniqueInput
    create: XOR<DonationDistributionCreateWithoutDonationRequestInput, DonationDistributionUncheckedCreateWithoutDonationRequestInput>
  }

  export type DonationDistributionCreateManyDonationRequestInputEnvelope = {
    data: DonationDistributionCreateManyDonationRequestInput | DonationDistributionCreateManyDonationRequestInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutDonationRequestsInput = {
    update: XOR<UserUpdateWithoutDonationRequestsInput, UserUncheckedUpdateWithoutDonationRequestsInput>
    create: XOR<UserCreateWithoutDonationRequestsInput, UserUncheckedCreateWithoutDonationRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDonationRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDonationRequestsInput, UserUncheckedUpdateWithoutDonationRequestsInput>
  }

  export type UserUpdateWithoutDonationRequestsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDonationRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DonationDistributionUpsertWithWhereUniqueWithoutDonationRequestInput = {
    where: DonationDistributionWhereUniqueInput
    update: XOR<DonationDistributionUpdateWithoutDonationRequestInput, DonationDistributionUncheckedUpdateWithoutDonationRequestInput>
    create: XOR<DonationDistributionCreateWithoutDonationRequestInput, DonationDistributionUncheckedCreateWithoutDonationRequestInput>
  }

  export type DonationDistributionUpdateWithWhereUniqueWithoutDonationRequestInput = {
    where: DonationDistributionWhereUniqueInput
    data: XOR<DonationDistributionUpdateWithoutDonationRequestInput, DonationDistributionUncheckedUpdateWithoutDonationRequestInput>
  }

  export type DonationDistributionUpdateManyWithWhereWithoutDonationRequestInput = {
    where: DonationDistributionScalarWhereInput
    data: XOR<DonationDistributionUpdateManyMutationInput, DonationDistributionUncheckedUpdateManyWithoutDonationRequestInput>
  }

  export type DonationRequestCreateWithoutDonationDistributionsInput = {
    title: string
    description: string
    category?: string | null
    urgency?: $Enums.DonationUrgency
    status?: $Enums.DonationRequestStatus
    maxQuantity?: number | null
    receivedCount?: number
    location?: string | null
    contactInfo?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDonationRequestsInput
  }

  export type DonationRequestUncheckedCreateWithoutDonationDistributionsInput = {
    id?: number
    userId: number
    title: string
    description: string
    category?: string | null
    urgency?: $Enums.DonationUrgency
    status?: $Enums.DonationRequestStatus
    maxQuantity?: number | null
    receivedCount?: number
    location?: string | null
    contactInfo?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DonationRequestCreateOrConnectWithoutDonationDistributionsInput = {
    where: DonationRequestWhereUniqueInput
    create: XOR<DonationRequestCreateWithoutDonationDistributionsInput, DonationRequestUncheckedCreateWithoutDonationDistributionsInput>
  }

  export type UserCreateWithoutDonationDistributionsInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDonationDistributionsInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDonationDistributionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDonationDistributionsInput, UserUncheckedCreateWithoutDonationDistributionsInput>
  }

  export type DonationRequestUpsertWithoutDonationDistributionsInput = {
    update: XOR<DonationRequestUpdateWithoutDonationDistributionsInput, DonationRequestUncheckedUpdateWithoutDonationDistributionsInput>
    create: XOR<DonationRequestCreateWithoutDonationDistributionsInput, DonationRequestUncheckedCreateWithoutDonationDistributionsInput>
    where?: DonationRequestWhereInput
  }

  export type DonationRequestUpdateToOneWithWhereWithoutDonationDistributionsInput = {
    where?: DonationRequestWhereInput
    data: XOR<DonationRequestUpdateWithoutDonationDistributionsInput, DonationRequestUncheckedUpdateWithoutDonationDistributionsInput>
  }

  export type DonationRequestUpdateWithoutDonationDistributionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumDonationUrgencyFieldUpdateOperationsInput | $Enums.DonationUrgency
    status?: EnumDonationRequestStatusFieldUpdateOperationsInput | $Enums.DonationRequestStatus
    maxQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    receivedCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDonationRequestsNestedInput
  }

  export type DonationRequestUncheckedUpdateWithoutDonationDistributionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumDonationUrgencyFieldUpdateOperationsInput | $Enums.DonationUrgency
    status?: EnumDonationRequestStatusFieldUpdateOperationsInput | $Enums.DonationRequestStatus
    maxQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    receivedCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutDonationDistributionsInput = {
    update: XOR<UserUpdateWithoutDonationDistributionsInput, UserUncheckedUpdateWithoutDonationDistributionsInput>
    create: XOR<UserCreateWithoutDonationDistributionsInput, UserUncheckedCreateWithoutDonationDistributionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDonationDistributionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDonationDistributionsInput, UserUncheckedUpdateWithoutDonationDistributionsInput>
  }

  export type UserUpdateWithoutDonationDistributionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDonationDistributionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutRecommendationsInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    academicPreferences?: AcademicPreferenceCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRecommendationsInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    academicPreferences?: AcademicPreferenceUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRecommendationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
  }

  export type ItemCreateWithoutRecommendationsInput = {
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutItemsInput
    itemImages?: ItemImageCreateNestedManyWithoutItemInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequestedItemInput
    wishlists?: WishlistCreateNestedManyWithoutItemInput
    transactions?: TransactionCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryCreateNestedManyWithoutItemInput
    carts?: CartCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutRecommendationsInput = {
    id?: number
    userId: number
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    itemImages?: ItemImageUncheckedCreateNestedManyWithoutItemInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequestedItemInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutItemInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutItemInput
    priceHistories?: PriceHistoryUncheckedCreateNestedManyWithoutItemInput
    carts?: CartUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutRecommendationsInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutRecommendationsInput, ItemUncheckedCreateWithoutRecommendationsInput>
  }

  export type UserUpsertWithoutRecommendationsInput = {
    update: XOR<UserUpdateWithoutRecommendationsInput, UserUncheckedUpdateWithoutRecommendationsInput>
    create: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRecommendationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRecommendationsInput, UserUncheckedUpdateWithoutRecommendationsInput>
  }

  export type UserUpdateWithoutRecommendationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    academicPreferences?: AcademicPreferenceUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRecommendationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    academicPreferences?: AcademicPreferenceUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ItemUpsertWithoutRecommendationsInput = {
    update: XOR<ItemUpdateWithoutRecommendationsInput, ItemUncheckedUpdateWithoutRecommendationsInput>
    create: XOR<ItemCreateWithoutRecommendationsInput, ItemUncheckedCreateWithoutRecommendationsInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutRecommendationsInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutRecommendationsInput, ItemUncheckedUpdateWithoutRecommendationsInput>
  }

  export type ItemUpdateWithoutRecommendationsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutItemsNestedInput
    itemImages?: ItemImageUpdateManyWithoutItemNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequestedItemNestedInput
    wishlists?: WishlistUpdateManyWithoutItemNestedInput
    transactions?: TransactionUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUpdateManyWithoutItemNestedInput
    carts?: CartUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutRecommendationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    itemImages?: ItemImageUncheckedUpdateManyWithoutItemNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequestedItemNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutItemNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUncheckedUpdateManyWithoutItemNestedInput
    carts?: CartUncheckedUpdateManyWithoutItemNestedInput
  }

  export type UserCreateWithoutAcademicPreferencesInput = {
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationCreateNestedManyWithoutSenderInput
    wishlists?: WishlistCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionCreateNestedManyWithoutSellerInput
    discussions?: DiscussionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    carts?: CartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAcademicPreferencesInput = {
    id?: number
    email: string
    username: string
    password: string
    fullName: string
    studentId?: string | null
    university?: string | null
    faculty?: string | null
    major?: string | null
    phoneNumber?: string | null
    profileImage?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetPasswordToken?: string | null
    reputation?: number
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUserInput
    barterRequests?: BarterRequestUncheckedCreateNestedManyWithoutRequesterInput
    barterNegotiations?: BarterNegotiationUncheckedCreateNestedManyWithoutSenderInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutUserInput
    wtbRequests?: WtbRequestUncheckedCreateNestedManyWithoutUserInput
    wtbResponses?: WtbResponseUncheckedCreateNestedManyWithoutResponderInput
    buyerTransactions?: TransactionUncheckedCreateNestedManyWithoutBuyerInput
    sellerTransactions?: TransactionUncheckedCreateNestedManyWithoutSellerInput
    discussions?: DiscussionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    donationRequests?: DonationRequestUncheckedCreateNestedManyWithoutUserInput
    donationDistributions?: DonationDistributionUncheckedCreateNestedManyWithoutDonorInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    carts?: CartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAcademicPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAcademicPreferencesInput, UserUncheckedCreateWithoutAcademicPreferencesInput>
  }

  export type AcademicDataCreateWithoutAcademicPreferencesInput = {
    courseCode: string
    courseName: string
    lecturerName?: string | null
    faculty: string
    semester?: number | null
    credits?: number | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    discussions?: DiscussionCreateNestedManyWithoutAcademicDataInput
  }

  export type AcademicDataUncheckedCreateWithoutAcademicPreferencesInput = {
    id?: number
    courseCode: string
    courseName: string
    lecturerName?: string | null
    faculty: string
    semester?: number | null
    credits?: number | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    discussions?: DiscussionUncheckedCreateNestedManyWithoutAcademicDataInput
  }

  export type AcademicDataCreateOrConnectWithoutAcademicPreferencesInput = {
    where: AcademicDataWhereUniqueInput
    create: XOR<AcademicDataCreateWithoutAcademicPreferencesInput, AcademicDataUncheckedCreateWithoutAcademicPreferencesInput>
  }

  export type UserUpsertWithoutAcademicPreferencesInput = {
    update: XOR<UserUpdateWithoutAcademicPreferencesInput, UserUncheckedUpdateWithoutAcademicPreferencesInput>
    create: XOR<UserCreateWithoutAcademicPreferencesInput, UserUncheckedCreateWithoutAcademicPreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAcademicPreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAcademicPreferencesInput, UserUncheckedUpdateWithoutAcademicPreferencesInput>
  }

  export type UserUpdateWithoutAcademicPreferencesInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    carts?: CartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAcademicPreferencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    university?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    reputation?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUserNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequesterNestedInput
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutSenderNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutUserNestedInput
    wtbRequests?: WtbRequestUncheckedUpdateManyWithoutUserNestedInput
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutResponderNestedInput
    buyerTransactions?: TransactionUncheckedUpdateManyWithoutBuyerNestedInput
    sellerTransactions?: TransactionUncheckedUpdateManyWithoutSellerNestedInput
    discussions?: DiscussionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    donationRequests?: DonationRequestUncheckedUpdateManyWithoutUserNestedInput
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonorNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    carts?: CartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AcademicDataUpsertWithoutAcademicPreferencesInput = {
    update: XOR<AcademicDataUpdateWithoutAcademicPreferencesInput, AcademicDataUncheckedUpdateWithoutAcademicPreferencesInput>
    create: XOR<AcademicDataCreateWithoutAcademicPreferencesInput, AcademicDataUncheckedCreateWithoutAcademicPreferencesInput>
    where?: AcademicDataWhereInput
  }

  export type AcademicDataUpdateToOneWithWhereWithoutAcademicPreferencesInput = {
    where?: AcademicDataWhereInput
    data: XOR<AcademicDataUpdateWithoutAcademicPreferencesInput, AcademicDataUncheckedUpdateWithoutAcademicPreferencesInput>
  }

  export type AcademicDataUpdateWithoutAcademicPreferencesInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    lecturerName?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: StringFieldUpdateOperationsInput | string
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discussions?: DiscussionUpdateManyWithoutAcademicDataNestedInput
  }

  export type AcademicDataUncheckedUpdateWithoutAcademicPreferencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    lecturerName?: NullableStringFieldUpdateOperationsInput | string | null
    faculty?: StringFieldUpdateOperationsInput | string
    semester?: NullableIntFieldUpdateOperationsInput | number | null
    credits?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discussions?: DiscussionUncheckedUpdateManyWithoutAcademicDataNestedInput
  }

  export type ItemCreateManyUserInput = {
    id?: number
    title: string
    description: string
    price: Decimal | DecimalJsLike | number | string
    category: string
    condition: $Enums.ItemCondition
    conditionDetail?: string | null
    isDonation?: boolean
    isBundle?: boolean
    bundleItems?: string | null
    location?: string | null
    isAvailable?: boolean
    viewCount?: number
    favoriteCount?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BarterRequestCreateManyRequesterInput = {
    id?: number
    itemOwnerId: number
    requestedItemId: number
    offeredItemIds: string
    message?: string | null
    status?: $Enums.BarterStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BarterNegotiationCreateManySenderInput = {
    id?: number
    barterRequestId: number
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type WishlistCreateManyUserInput = {
    id?: number
    itemId: number
    createdAt?: Date | string
  }

  export type WtbRequestCreateManyUserInput = {
    id?: number
    title: string
    description: string
    maxPrice?: Decimal | DecimalJsLike | number | string | null
    category?: string | null
    preferredCondition?: string | null
    location?: string | null
    urgency?: $Enums.WtbUrgency
    isActive?: boolean
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WtbResponseCreateManyResponderInput = {
    id?: number
    wtbRequestId: number
    message: string
    offeredPrice?: Decimal | DecimalJsLike | number | string | null
    itemImages?: string | null
    contactInfo?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type TransactionCreateManyBuyerInput = {
    id?: number
    sellerId: number
    itemId: number
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.TransactionStatus
    paymentMethod?: string | null
    paymentStatus?: $Enums.PaymentStatus
    codLocation?: string | null
    notes?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManySellerInput = {
    id?: number
    buyerId: number
    itemId: number
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.TransactionStatus
    paymentMethod?: string | null
    paymentStatus?: $Enums.PaymentStatus
    codLocation?: string | null
    notes?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscussionCreateManyUserInput = {
    id?: number
    academicDataId?: number | null
    title: string
    content: string
    category?: string | null
    tags?: string | null
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateManyUserInput = {
    id?: number
    discussionId: number
    parentId?: number | null
    content: string
    isEdited?: boolean
    editedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    type: $Enums.NotificationType
    title: string
    message: string
    relatedId?: number | null
    relatedType?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type UserBadgeCreateManyUserInput = {
    id?: number
    badgeType: $Enums.BadgeType
    title: string
    description?: string | null
    iconUrl?: string | null
    earnedAt?: Date | string
  }

  export type DonationRequestCreateManyUserInput = {
    id?: number
    title: string
    description: string
    category?: string | null
    urgency?: $Enums.DonationUrgency
    status?: $Enums.DonationRequestStatus
    maxQuantity?: number | null
    receivedCount?: number
    location?: string | null
    contactInfo?: string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DonationDistributionCreateManyDonorInput = {
    id?: number
    donationRequestId?: number | null
    recipientId: number
    itemTitle: string
    itemDescription?: string | null
    quantity?: number
    status?: $Enums.DistributionStatus
    distributedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecommendationCreateManyUserInput = {
    id?: number
    itemId: number
    score: number
    reason: $Enums.RecommendationReason
    createdAt?: Date | string
  }

  export type AcademicPreferenceCreateManyUserInput = {
    id?: number
    academicDataId: number
    priority?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CartCreateManyUserInput = {
    id?: number
    itemId: number
    quantity: number
  }

  export type ItemUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    itemImages?: ItemImageUpdateManyWithoutItemNestedInput
    barterRequests?: BarterRequestUpdateManyWithoutRequestedItemNestedInput
    wishlists?: WishlistUpdateManyWithoutItemNestedInput
    transactions?: TransactionUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUpdateManyWithoutItemNestedInput
    carts?: CartUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    itemImages?: ItemImageUncheckedUpdateManyWithoutItemNestedInput
    barterRequests?: BarterRequestUncheckedUpdateManyWithoutRequestedItemNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutItemNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutItemNestedInput
    priceHistories?: PriceHistoryUncheckedUpdateManyWithoutItemNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutItemNestedInput
    carts?: CartUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: StringFieldUpdateOperationsInput | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    conditionDetail?: NullableStringFieldUpdateOperationsInput | string | null
    isDonation?: BoolFieldUpdateOperationsInput | boolean
    isBundle?: BoolFieldUpdateOperationsInput | boolean
    bundleItems?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    favoriteCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarterRequestUpdateWithoutRequesterInput = {
    itemOwnerId?: IntFieldUpdateOperationsInput | number
    offeredItemIds?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBarterStatusFieldUpdateOperationsInput | $Enums.BarterStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestedItem?: ItemUpdateOneRequiredWithoutBarterRequestsNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutBarterRequestNestedInput
  }

  export type BarterRequestUncheckedUpdateWithoutRequesterInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemOwnerId?: IntFieldUpdateOperationsInput | number
    requestedItemId?: IntFieldUpdateOperationsInput | number
    offeredItemIds?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBarterStatusFieldUpdateOperationsInput | $Enums.BarterStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutBarterRequestNestedInput
  }

  export type BarterRequestUncheckedUpdateManyWithoutRequesterInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemOwnerId?: IntFieldUpdateOperationsInput | number
    requestedItemId?: IntFieldUpdateOperationsInput | number
    offeredItemIds?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBarterStatusFieldUpdateOperationsInput | $Enums.BarterStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarterNegotiationUpdateWithoutSenderInput = {
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barterRequest?: BarterRequestUpdateOneRequiredWithoutBarterNegotiationsNestedInput
  }

  export type BarterNegotiationUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    barterRequestId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarterNegotiationUncheckedUpdateManyWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    barterRequestId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneRequiredWithoutWishlistsNestedInput
  }

  export type WishlistUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WtbRequestUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCondition?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumWtbUrgencyFieldUpdateOperationsInput | $Enums.WtbUrgency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wtbResponses?: WtbResponseUpdateManyWithoutWtbRequestNestedInput
  }

  export type WtbRequestUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCondition?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumWtbUrgencyFieldUpdateOperationsInput | $Enums.WtbUrgency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wtbResponses?: WtbResponseUncheckedUpdateManyWithoutWtbRequestNestedInput
  }

  export type WtbRequestUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    maxPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    preferredCondition?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumWtbUrgencyFieldUpdateOperationsInput | $Enums.WtbUrgency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WtbResponseUpdateWithoutResponderInput = {
    message?: StringFieldUpdateOperationsInput | string
    offeredPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    itemImages?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wtbRequest?: WtbRequestUpdateOneRequiredWithoutWtbResponsesNestedInput
  }

  export type WtbResponseUncheckedUpdateWithoutResponderInput = {
    id?: IntFieldUpdateOperationsInput | number
    wtbRequestId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    offeredPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    itemImages?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WtbResponseUncheckedUpdateManyWithoutResponderInput = {
    id?: IntFieldUpdateOperationsInput | number
    wtbRequestId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    offeredPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    itemImages?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutBuyerInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    codLocation?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seller?: UserUpdateOneRequiredWithoutSellerTransactionsNestedInput
    item?: ItemUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellerId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    codLocation?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellerId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    codLocation?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutSellerInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    codLocation?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneRequiredWithoutBuyerTransactionsNestedInput
    item?: ItemUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutSellerInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyerId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    codLocation?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutSellerInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyerId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    codLocation?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicData?: AcademicDataUpdateOneWithoutDiscussionsNestedInput
    comments?: CommentUpdateManyWithoutDiscussionNestedInput
  }

  export type DiscussionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    academicDataId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutDiscussionNestedInput
  }

  export type DiscussionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    academicDataId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discussion?: DiscussionUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    discussionId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    discussionId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    relatedId?: NullableIntFieldUpdateOperationsInput | number | null
    relatedType?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    relatedId?: NullableIntFieldUpdateOperationsInput | number | null
    relatedType?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    relatedId?: NullableIntFieldUpdateOperationsInput | number | null
    relatedType?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUpdateWithoutUserInput = {
    badgeType?: EnumBadgeTypeFieldUpdateOperationsInput | $Enums.BadgeType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    badgeType?: EnumBadgeTypeFieldUpdateOperationsInput | $Enums.BadgeType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    badgeType?: EnumBadgeTypeFieldUpdateOperationsInput | $Enums.BadgeType
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DonationRequestUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumDonationUrgencyFieldUpdateOperationsInput | $Enums.DonationUrgency
    status?: EnumDonationRequestStatusFieldUpdateOperationsInput | $Enums.DonationRequestStatus
    maxQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    receivedCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    donationDistributions?: DonationDistributionUpdateManyWithoutDonationRequestNestedInput
  }

  export type DonationRequestUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumDonationUrgencyFieldUpdateOperationsInput | $Enums.DonationUrgency
    status?: EnumDonationRequestStatusFieldUpdateOperationsInput | $Enums.DonationRequestStatus
    maxQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    receivedCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    donationDistributions?: DonationDistributionUncheckedUpdateManyWithoutDonationRequestNestedInput
  }

  export type DonationRequestUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    urgency?: EnumDonationUrgencyFieldUpdateOperationsInput | $Enums.DonationUrgency
    status?: EnumDonationRequestStatusFieldUpdateOperationsInput | $Enums.DonationRequestStatus
    maxQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    receivedCount?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DonationDistributionUpdateWithoutDonorInput = {
    recipientId?: IntFieldUpdateOperationsInput | number
    itemTitle?: StringFieldUpdateOperationsInput | string
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumDistributionStatusFieldUpdateOperationsInput | $Enums.DistributionStatus
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    donationRequest?: DonationRequestUpdateOneWithoutDonationDistributionsNestedInput
  }

  export type DonationDistributionUncheckedUpdateWithoutDonorInput = {
    id?: IntFieldUpdateOperationsInput | number
    donationRequestId?: NullableIntFieldUpdateOperationsInput | number | null
    recipientId?: IntFieldUpdateOperationsInput | number
    itemTitle?: StringFieldUpdateOperationsInput | string
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumDistributionStatusFieldUpdateOperationsInput | $Enums.DistributionStatus
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DonationDistributionUncheckedUpdateManyWithoutDonorInput = {
    id?: IntFieldUpdateOperationsInput | number
    donationRequestId?: NullableIntFieldUpdateOperationsInput | number | null
    recipientId?: IntFieldUpdateOperationsInput | number
    itemTitle?: StringFieldUpdateOperationsInput | string
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumDistributionStatusFieldUpdateOperationsInput | $Enums.DistributionStatus
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationUpdateWithoutUserInput = {
    score?: FloatFieldUpdateOperationsInput | number
    reason?: EnumRecommendationReasonFieldUpdateOperationsInput | $Enums.RecommendationReason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneRequiredWithoutRecommendationsNestedInput
  }

  export type RecommendationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    reason?: EnumRecommendationReasonFieldUpdateOperationsInput | $Enums.RecommendationReason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    reason?: EnumRecommendationReasonFieldUpdateOperationsInput | $Enums.RecommendationReason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicPreferenceUpdateWithoutUserInput = {
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicData?: AcademicDataUpdateOneRequiredWithoutAcademicPreferencesNestedInput
  }

  export type AcademicPreferenceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    academicDataId?: IntFieldUpdateOperationsInput | number
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicPreferenceUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    academicDataId?: IntFieldUpdateOperationsInput | number
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartUpdateWithoutUserInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    item?: ItemUpdateOneRequiredWithoutCartsNestedInput
  }

  export type CartUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CartUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ItemImageCreateManyItemInput = {
    id?: number
    imageUrl: string
    isPrimary?: boolean
    caption?: string | null
    sortOrder?: number
    createdAt?: Date | string
  }

  export type BarterRequestCreateManyRequestedItemInput = {
    id?: number
    requesterId: number
    itemOwnerId: number
    offeredItemIds: string
    message?: string | null
    status?: $Enums.BarterStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WishlistCreateManyItemInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type TransactionCreateManyItemInput = {
    id?: number
    buyerId: number
    sellerId: number
    amount: Decimal | DecimalJsLike | number | string
    status?: $Enums.TransactionStatus
    paymentMethod?: string | null
    paymentStatus?: $Enums.PaymentStatus
    codLocation?: string | null
    notes?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PriceHistoryCreateManyItemInput = {
    id?: number
    price: Decimal | DecimalJsLike | number | string
    condition: $Enums.ItemCondition
    category: string
    recordedAt?: Date | string
  }

  export type RecommendationCreateManyItemInput = {
    id?: number
    userId: number
    score: number
    reason: $Enums.RecommendationReason
    createdAt?: Date | string
  }

  export type CartCreateManyItemInput = {
    id?: number
    userId: number
    quantity: number
  }

  export type ItemImageUpdateWithoutItemInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemImageUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemImageUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarterRequestUpdateWithoutRequestedItemInput = {
    itemOwnerId?: IntFieldUpdateOperationsInput | number
    offeredItemIds?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBarterStatusFieldUpdateOperationsInput | $Enums.BarterStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutBarterRequestsNestedInput
    barterNegotiations?: BarterNegotiationUpdateManyWithoutBarterRequestNestedInput
  }

  export type BarterRequestUncheckedUpdateWithoutRequestedItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    requesterId?: IntFieldUpdateOperationsInput | number
    itemOwnerId?: IntFieldUpdateOperationsInput | number
    offeredItemIds?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBarterStatusFieldUpdateOperationsInput | $Enums.BarterStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barterNegotiations?: BarterNegotiationUncheckedUpdateManyWithoutBarterRequestNestedInput
  }

  export type BarterRequestUncheckedUpdateManyWithoutRequestedItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    requesterId?: IntFieldUpdateOperationsInput | number
    itemOwnerId?: IntFieldUpdateOperationsInput | number
    offeredItemIds?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBarterStatusFieldUpdateOperationsInput | $Enums.BarterStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistUpdateWithoutItemInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWishlistsNestedInput
  }

  export type WishlistUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutItemInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    codLocation?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: UserUpdateOneRequiredWithoutBuyerTransactionsNestedInput
    seller?: UserUpdateOneRequiredWithoutSellerTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyerId?: IntFieldUpdateOperationsInput | number
    sellerId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    codLocation?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyerId?: IntFieldUpdateOperationsInput | number
    sellerId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    codLocation?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceHistoryUpdateWithoutItemInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    category?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceHistoryUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    category?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceHistoryUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    condition?: EnumItemConditionFieldUpdateOperationsInput | $Enums.ItemCondition
    category?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationUpdateWithoutItemInput = {
    score?: FloatFieldUpdateOperationsInput | number
    reason?: EnumRecommendationReasonFieldUpdateOperationsInput | $Enums.RecommendationReason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRecommendationsNestedInput
  }

  export type RecommendationUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    reason?: EnumRecommendationReasonFieldUpdateOperationsInput | $Enums.RecommendationReason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    reason?: EnumRecommendationReasonFieldUpdateOperationsInput | $Enums.RecommendationReason
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartUpdateWithoutItemInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutCartsNestedInput
  }

  export type CartUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CartUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type DiscussionCreateManyAcademicDataInput = {
    id?: number
    userId: number
    title: string
    content: string
    category?: string | null
    tags?: string | null
    isPinned?: boolean
    isLocked?: boolean
    viewCount?: number
    replyCount?: number
    lastReplyAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicPreferenceCreateManyAcademicDataInput = {
    id?: number
    userId: number
    priority?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscussionUpdateWithoutAcademicDataInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDiscussionsNestedInput
    comments?: CommentUpdateManyWithoutDiscussionNestedInput
  }

  export type DiscussionUncheckedUpdateWithoutAcademicDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutDiscussionNestedInput
  }

  export type DiscussionUncheckedUpdateManyWithoutAcademicDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    viewCount?: IntFieldUpdateOperationsInput | number
    replyCount?: IntFieldUpdateOperationsInput | number
    lastReplyAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicPreferenceUpdateWithoutAcademicDataInput = {
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAcademicPreferencesNestedInput
  }

  export type AcademicPreferenceUncheckedUpdateWithoutAcademicDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicPreferenceUncheckedUpdateManyWithoutAcademicDataInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarterNegotiationCreateManyBarterRequestInput = {
    id?: number
    senderId: number
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type BarterNegotiationUpdateWithoutBarterRequestInput = {
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutBarterNegotiationsNestedInput
  }

  export type BarterNegotiationUncheckedUpdateWithoutBarterRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BarterNegotiationUncheckedUpdateManyWithoutBarterRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WtbResponseCreateManyWtbRequestInput = {
    id?: number
    responderId: number
    message: string
    offeredPrice?: Decimal | DecimalJsLike | number | string | null
    itemImages?: string | null
    contactInfo?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type WtbResponseUpdateWithoutWtbRequestInput = {
    message?: StringFieldUpdateOperationsInput | string
    offeredPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    itemImages?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responder?: UserUpdateOneRequiredWithoutWtbResponsesNestedInput
  }

  export type WtbResponseUncheckedUpdateWithoutWtbRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    responderId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    offeredPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    itemImages?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WtbResponseUncheckedUpdateManyWithoutWtbRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    responderId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    offeredPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    itemImages?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyDiscussionInput = {
    id?: number
    userId: number
    parentId?: number | null
    content: string
    isEdited?: boolean
    editedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateWithoutDiscussionInput = {
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateWithoutDiscussionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutDiscussionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyParentInput = {
    id?: number
    discussionId: number
    userId: number
    content: string
    isEdited?: boolean
    editedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateWithoutParentInput = {
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discussion?: DiscussionUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    discussionId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    discussionId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    isEdited?: BoolFieldUpdateOperationsInput | boolean
    editedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DonationDistributionCreateManyDonationRequestInput = {
    id?: number
    donorId: number
    recipientId: number
    itemTitle: string
    itemDescription?: string | null
    quantity?: number
    status?: $Enums.DistributionStatus
    distributedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DonationDistributionUpdateWithoutDonationRequestInput = {
    recipientId?: IntFieldUpdateOperationsInput | number
    itemTitle?: StringFieldUpdateOperationsInput | string
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumDistributionStatusFieldUpdateOperationsInput | $Enums.DistributionStatus
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    donor?: UserUpdateOneRequiredWithoutDonationDistributionsNestedInput
  }

  export type DonationDistributionUncheckedUpdateWithoutDonationRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    donorId?: IntFieldUpdateOperationsInput | number
    recipientId?: IntFieldUpdateOperationsInput | number
    itemTitle?: StringFieldUpdateOperationsInput | string
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumDistributionStatusFieldUpdateOperationsInput | $Enums.DistributionStatus
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DonationDistributionUncheckedUpdateManyWithoutDonationRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    donorId?: IntFieldUpdateOperationsInput | number
    recipientId?: IntFieldUpdateOperationsInput | number
    itemTitle?: StringFieldUpdateOperationsInput | string
    itemDescription?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumDistributionStatusFieldUpdateOperationsInput | $Enums.DistributionStatus
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}